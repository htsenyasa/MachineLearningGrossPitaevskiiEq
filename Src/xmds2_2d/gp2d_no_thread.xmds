<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <name>xgp2d_no_thread</name>
  <author>Joe Hope</author>
  <description>
    Calculate the ground state of the non-linear Schrodinger equation in a harmonic magnetic trap.
    This is done by evolving it in imaginary time while re-normalising each timestep.
  </description>
  <features>
    <auto_vectorise />
    <benchmark />
    <bing />
    <fftw plan="exhaustive"  threads="1"/>
    <globals>
      <![CDATA[
        const real Nptls = 1.0;
        real gg;
        real x0, y0_;
        real w_x, w_y;
        real r_w, l_w, u_w, b_w; //right, left, upper, bottom well
        real lm_x_1, lm_x_2, mu_x_1, mu_x_2, s_x_1, s_x_2; //params of double inverted gaussian distribution X
        real lm_y_1, lm_y_2, mu_y_1, mu_y_2, s_y_1, s_y_2; //params of double inverted gaussian distribution Y
        int pot_type;
      ]]>
    </globals>
    <arguments>
      <argument name="interaction" type="real" default_value="0"/>
      <![CDATA[
      gg = interaction;
      ]]>
      <argument name="pottype" type="real" default_value="0"/>
      <![CDATA[
      pot_type = pottype;
      ]]>

      <!-- ****************** Harmonic Params  ********************** -->
      
      <argument name="xshift" type="real" default_value="0"/>
      <![CDATA[
      x0 = xshift;
      ]]>
      <argument name="yshift" type="real" default_value="0"/>
      <![CDATA[
      y0_ = yshift;
      ]]>
      <argument name="wx" type="real" default_value="1"/>
      <![CDATA[
      w_x = wx;
      ]]>
      <argument name="wy" type="real" default_value="1"/>
      <![CDATA[
      w_y = wy;
      ]]>
      
      <!-- ****************** Infinite Well Params  ********************** -->
            
      <argument name="rw" type="real" default_value="3"/>
      <![CDATA[
      r_w = rw;
      ]]>
      <argument name="lw" type="real" default_value="-3"/>
      <![CDATA[
      l_w = lw;
      ]]>
      <argument name="uw" type="real" default_value="3"/>
      <![CDATA[
      u_w = uw;
      ]]>
      <argument name="bw" type="real" default_value="-3"/>
      <![CDATA[
      b_w = bw;
      ]]>


      <!-- ****************** Double Inverted Gaussian Params X  ********************** -->

      <argument name="xlam1" type="real" default_value="3"/>
      <![CDATA[
      lm_x_1 = xlam1;
      ]]>
      <argument name="xlam2" type="real" default_value="2"/>
      <![CDATA[
      lm_x_2 = xlam2;
      ]]>
      <argument name="xmu1" type="real" default_value="-2"/>
      <![CDATA[
      mu_x_1 = xmu1;
      ]]>
      <argument name="xmu2" type="real" default_value="2"/>
      <![CDATA[
      mu_x_2 = xmu2;
      ]]>
      <argument name="xs1" type="real" default_value="2"/>
      <![CDATA[
      s_x_1 = xs1;
      ]]>
      <argument name="xs2" type="real" default_value="2"/>
      <![CDATA[
      s_x_2 = xs2;
      ]]>

      <!-- ****************** Double Inverted Gaussian Params Y ********************** -->
    

      <argument name="ylam1" type="real" default_value="3"/>
      <![CDATA[
      lm_y_1 = ylam1;
      ]]>
      <argument name="ylam2" type="real" default_value="2"/>
      <![CDATA[
      lm_y_2 = xlam2;
      ]]>
      <argument name="ymu1" type="real" default_value="-2"/>
      <![CDATA[
      mu_y_1 = ymu1;
      ]]>
      <argument name="ymu2" type="real" default_value="2"/>
      <![CDATA[
      mu_y_2 = ymu2;
      ]]>
      <argument name="ys1" type="real" default_value="2"/>
      <![CDATA[
      s_y_1 = ys1;
      ]]>
      <argument name="ys2" type="real" default_value="2"/>
      <![CDATA[
      s_y_2 = ys2;
      ]]>
    </arguments>

  </features>
  
  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="x" lattice="128"  domain="(-10.0, 10.0)" />
      <dimension name="y" lattice="128"  domain="(-10.0, 10.0)" />
    </transverse_dimensions>
  </geometry>
  
  <vector name="potential" initial_basis="x y" type="real">
    <components> Vext </components>
    <initialisation>
      <![CDATA[
        switch(pot_type){
        case 0: Vext = 0.5*( w_x*w_x * (x-x0)*(x-x0) + w_y*w_y * (y-y0_)*(y-y0_)); break;
        case 1: Vext = !((x > l_w) && (x < r_w) && (y > b_w) && (y < u_w)) * 100; break;
        case 2: Vext = -((lm_x_1 * exp(-((x-mu_x_1)*(x-mu_x_1)) / (s_x_1 * s_x_1))) + (lm_x_2 * exp(-((x-mu_x_2)*(x-mu_x_2)) / (s_x_2 * s_x_2)))) * ((lm_y_1 * exp(-((y-mu_y_1)*(y-mu_y_1)) / (s_y_1 * s_y_1))) + (lm_y_2 * exp(-((y-mu_y_2)*(y-mu_y_2)) / (s_y_2 * s_y_2)))); break;
        //case 2: Vext = - ((lm_x_1 * exp(-((x-mu_x_1)*(x-mu_x_1)) / (s_x_1 * s_x_1))) ) * ((lm_y_1 * exp(-((y-mu_y_1)*(y-mu_y_1)) / (s_y_1 * s_y_1))));
        }

        //printf("*************\n%lf %lf %lf %lf %lf %lf\n", lm_x_1, lm_x_2, mu_x_1, mu_x_2, s_x_1, s_x_2); 
        //printf("*************\n%lf %lf %lf %lf %lf %lf\n", lm_y_1, lm_y_2, mu_y_1, mu_y_2, s_y_1, s_y_2); 
      ]]>
    </initialisation>
  </vector>
  
  <vector name="wavefunction" initial_basis="x y" type="complex">
    <components> phi </components>
    <initialisation>
      <![CDATA[
        if (fabs(y) < 9.0 && fabs(x) < 9.0) {
          phi = 1.0;
          // This will be automatically normalised later
        } else {
          phi = 0.0;
        }
            ]]>
    </initialisation>
  </vector>
  
  <computed_vector name="gradphi" dimensions="x y" type="complex">
    <components> dphix dphiy </components>
    <evaluation>
      <dependencies basis="kx ky">wavefunction</dependencies>
      <![CDATA[
        dphix=i*kx*phi;
        dphiy=i*ky*phi;
      ]]>
    </evaluation>
  </computed_vector>

  <computed_vector name="number" dimensions="" type="real">
    <components> Ncalc Ekin Epot Eint EN </components>
    <evaluation>
      <dependencies basis="x y">wavefunction gradphi potential</dependencies>
      <![CDATA[
        // Calculate the current normalisation of the wave function.
        Ncalc = mod2(phi);
        Ekin = 0.5 * (mod2(dphix)+mod2(dphiy));
        Epot = Vext * mod2(phi);
        Eint = 0.5 * gg * mod2(phi)*mod2(phi);
        EN = Ekin+Epot+Eint;
	    //Virial = Ekin - Epot + Eint;
	    //mu = Ekin + Epot + (2) * Eint;
      ]]>
    </evaluation>
  </computed_vector>
  
  <sequence>
    <filter>
        <dependencies>number wavefunction</dependencies>
      <![CDATA[
        phi *= sqrt(Nptls/Ncalc);
      ]]>
    </filter>

    <integrate algorithm="ARK45" interval="20.0" steps="1000" tolerance="1e-6">
      <samples>1 1 25</samples>
      <filters where="step end">
        <filter>root = "../../data/nonlinearSE/generic_dataset_2/" + dire + "/"

          <dependencies>wavefunction number</dependencies>
          <![CDATA[
            // Correct normalisation of the wavefunction
            phi *= sqrt(Nptls/Ncalc);
          ]]>
        </filter>
      </filters>
      <operators>
      <operator kind="ip" type="real" dimensions="x">
        <operator_names>Tx</operator_names>
        <![CDATA[
                Tx = -0.5*kx*kx;
        ]]>
      </operator>
      <operator kind="ip" type="real" dimensions="y">
        <operator_names>Ty</operator_names>
        <![CDATA[
                Ty = -0.5*ky*ky;
         ]]>
      </operator>
      <!--
	<operator kind="ex" dimensions="x y">
          <operator_names>T</operator_names>
          <![CDATA[
            T = -0.5*(kx*kx+ky*ky);
          ]]>
        </operator>
      -->	
      <!-- <integration_vectors basis="kx ky">wavefunction</integration_vectors>-->
        <integration_vectors>wavefunction</integration_vectors>
        <dependencies>potential</dependencies>
        <![CDATA[
	  // dphi_dt = T[phi] - ( Vext + gg * mod2(phi) )*phi;
          dphi_dt = Tx[phi] + Ty[phi]  - ( Vext + gg * mod2(phi) )*phi;
        ]]>
      </operators>
    </integrate>

    <filter>
      <![CDATA[
	  printf(" ");
	  printf(" %lf", 5.);
	  printf(" ");
      ]]>
    </filter> 
 
    <!--
    <breakpoint filename="gp2d.xsil" format="ascii">
      <dependencies basis="kx ky">wavefunction </dependencies>
    </breakpoint>
    -->

  </sequence>

  <output filename="gp2d.xsil">
      <sampling_group initial_sample="yes">
        <moments>Nptls Ek Ep Ei En g0</moments>
        <dependencies>number</dependencies>
        <![CDATA[
          Nptls = Ncalc;
	        Ek = Ekin;
	        Ep = Epot;
	        Ei = Eint;
	        En = EN;
	        g0 = gg;
        ]]>
      </sampling_group>
      <sampling_group basis="x y" initial_sample="no">
        <moments>Pot</moments>
        <dependencies>potential</dependencies>
        <![CDATA[
	      Pot = Vext;
        ]]>
      </sampling_group>
      <sampling_group basis="x y" initial_sample="yes">
        <moments>dens</moments>
        <dependencies>wavefunction</dependencies>
        <![CDATA[
          dens = mod2(phi);
        ]]>
      </sampling_group>
  </output>
</simulation>
