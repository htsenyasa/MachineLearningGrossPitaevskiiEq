// ********************************************************
// simulation logging

#define _SAMPLE_LOG_LEVEL             (1 << 0)
#define _SEGMENT_LOG_LEVEL            (1 << 1)
#define _PATH_LOG_LEVEL               (1 << 2)
#define _SIMULATION_LOG_LEVEL         (1 << 3)
#define _WARNING_LOG_LEVEL            (1 << 4)
#define _ERROR_LOG_LEVEL              (1 << 5)
#define _NO_ERROR_TERMINATE_LOG_LEVEL (1 << 6)
#define _ALL_LOG_LEVELS        _SAMPLE_LOG_LEVEL|_SEGMENT_LOG_LEVEL|_PATH_LOG_LEVEL|_SIMULATION_LOG_LEVEL|_WARNING_LOG_LEVEL|_ERROR_LOG_LEVEL|_NO_ERROR_TERMINATE_LOG_LEVEL
#define _LOG_LEVELS_BEING_LOGGED (_ALL_LOG_LEVELS)

#define real Re
#define imag Im

#include <complex>

#undef real
#undef imag


#include <stdio.h>

#define _LOG(logLevel, ...) \
  do { \
    if (logLevel & _LOG_LEVELS_BEING_LOGGED) { \
      if (logLevel & (_ERROR_LOG_LEVEL | _WARNING_LOG_LEVEL)) \
          printf("%s:%i: ", __FILE__, __LINE__); \
      printf(__VA_ARGS__); \
      fflush(stdout); \
      if (logLevel & (_ERROR_LOG_LEVEL | _NO_ERROR_TERMINATE_LOG_LEVEL)) \
        exit(logLevel == _ERROR_LOG_LEVEL); \
    } \
  } while (0)

// ********************************************************
// simulation includes

#include <xpdeint_platform.h>
#include <cmath>
#include <string>
#include <cstring>
#include <fstream>
#include <sstream>
#include <cstdlib>

#if CFG_OSAPI == CFG_OSAPI_POSIX // These are POSIX headers (i.e. non-windows)
  #include <sys/time.h>
#endif // POSIX

#ifdef __APPLE__
  #include <Availability.h>
  #if __MAC_OS_X_VERSION_MIN_REQUIRED >= 1080
    #define OS_OBJECT_USE_OBJC 0 // Don't make dispatch and xpc objects Objective-C objects.
    #include <IOKit/pwr_mgt/IOPMLib.h> // To disable user idle sleep on Mountain Lion
  #endif
#endif

#include <time.h>
#include <list>
#include <vector>
#include <algorithm>

#include <utility>
#include <map>

#include <getopt.h>

#if (CFG_COMPILER == CFG_COMPILER_MSVC)
  #define FFTW_DLL
#endif

#include <fftw3.h>
#include <sys/stat.h>
#include <sys/types.h>

#define _xmds_malloc fftw_malloc
#define xmds_free fftw_free

#define H5_USE_16_API
#include <hdf5.h>

#if !defined(HAVE_H5LEXISTS)
htri_t H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id)
{
  H5E_auto_t error_func;
  void* error_client_data;
  // Squelch errors generated by H5Gget_objinfo. It will report errors when it can't find an object
  // but that's the purpose of calling it.
  H5Eget_auto(&error_func, &error_client_data);
  H5Eset_auto(NULL, NULL);
  herr_t err = H5Gget_objinfo(loc_id, name, false, NULL);
  H5Eset_auto(error_func, error_client_data);
  if (err >= 0)
    return true;
  else
    return false;
}
#endif

#define H5T_NATIVE_REAL H5T_NATIVE_DOUBLE
#if defined(HAVE_HDF5_HL)
  #include <hdf5_hl.h>
#endif


typedef long integer;
typedef double real;
typedef std::complex<real> XMDSComplexType;

#include <xpdeint.h>

#define complex XMDSComplexType

const complex i(0.0, 1.0);

using namespace std;

#if CFG_COMPILER == CFG_COMPILER_ICC
  //
  // Disable ICC's warning: label was declared but never referenced
  //
  #pragma warning ( disable : 177 )
#endif

inline void *xmds_malloc(size_t size);

// ********************************************************
// DEFINES
// ********************************************************

// ********************************************************
//   Simulation defines
#define _EPSILON 1e-6
#ifndef INFINITY
#define INFINITY HUGE_VAL
#endif

#ifndef MAX
#define MAX(a, b) \
  ({ typeof(a) _a = (a); \
     typeof(b) _b = (b); \
     _a > _b ? _a : _b; })
#endif

#ifndef MIN
#define MIN(a, b) \
   ({ typeof(a) _a = (a); \
      typeof(b) _b = (b); \
      _a < _b ? _a : _b; })
#endif


// ********************************************************
//   Auto-vectorisation defines

#define _MAKE_AUTOVEC_VARIABLE(x) real* const __restrict__ x ## _autovec = (real*) x
#define _AUTOVEC(x) (x ## _autovec)

// ********************************************************
//   Geometry defines
#define _lattice_x ((int)128)
#define _min_x     ((real)-10.0)
#define _max_x     ((real)10.0)
#define _dx        ((real)((_max_x - _min_x)/_lattice_x))

#define _lattice_kx ((int)128)
#define _dkx        (2.0*M_PI/(_max_x - _min_x))
#define _min_kx     (-(_lattice_kx/2) * _dkx)
#define _max_kx     ((_lattice_kx - 1)/2 * _dkx)

// ********************************************************
//   field x defines
#define _x_ndims 1


// vector gradphi defines
#define _x_gradphi_ncomponents 1

// vector wavefunction defines
#define _x_wavefunction_ncomponents 1

// vector potential defines
#define _x_potential_ncomponents 1

// ********************************************************
//   field dimensionless defines
#define _dimensionless_ndims 0


// vector normalisation defines
#define _dimensionless_normalisation_ncomponents 7

// ********************************************************
//   segment 3 (RK45 adaptive-step integrator) defines
// vector segment3_x_operators_operator0_result defines
#define _x_segment3_x_operators_operator0_result_ncomponents 1

// ********************************************************
//   field mg0_sampling defines
#define _mg0_sampling_ndims 1


// ********************************************************
//   field mg0_output defines
#define _mg0_output_ndims 2


#define _mg0_output_lattice_t ((int)26)
#define _mg0_output_min_t     (_mg0_output_t[0])
#define _mg0_output_max_t     (_mg0_output_t[_mg0_output_lattice_t-1])
#define _mg0_output_dt        (_mg0_output_t[_index_t+1]-_mg0_output_t[_index_t])

// vector raw defines
#define _mg0_output_raw_ncomponents 3

// ********************************************************
//   field mg1_sampling defines
#define _mg1_sampling_ndims 0


// ********************************************************
//   field mg1_output defines
#define _mg1_output_ndims 1


#define _mg1_output_lattice_t ((int)26)
#define _mg1_output_min_t     (_mg1_output_t[0])
#define _mg1_output_max_t     (_mg1_output_t[_mg1_output_lattice_t-1])
#define _mg1_output_dt        (_mg1_output_t[_index_t+1]-_mg1_output_t[_index_t])

// vector raw defines
#define _mg1_output_raw_ncomponents 7

// ********************************************************
//   field mg2_sampling defines
#define _mg2_sampling_ndims 1


// ********************************************************
//   field mg2_output defines
#define _mg2_output_ndims 1


// vector raw defines
#define _mg2_output_raw_ncomponents 1


// ********************************************************
// GLOBALS
// ********************************************************


// ********************************************************
//   Simulation globals

string gsArgsAndValues = "";
  
real t;

// ********************************************************
//   Transform Multiplexer globals
typedef pair<ptrdiff_t, ptrdiff_t> _basis_pair;
typedef void (*transform_function)(bool, real, real* const __restrict__, real* const __restrict__, ptrdiff_t, ptrdiff_t);

// Less than operator needed by the C++ map class
struct _basis_pair_less_than
{
  bool operator()(const _basis_pair& _x, const _basis_pair& _y) const {
    return (_x.first < _y.first) || ((_x.first == _y.first) && (_x.second < _y.second));
  }
};

struct _transform_step
{
  transform_function _func;
  bool _forward;
  bool _out_of_place;
  ptrdiff_t _prefix_lattice;
  ptrdiff_t _postfix_lattice;
};

// Structure to hold the basis change information
struct _basis_transform_t
{
  vector<_transform_step> _transform_steps;
  real _multiplier;
  
  _basis_transform_t(real _multiplier_in = 1.0) : _multiplier(_multiplier_in) {}
  
  _basis_transform_t(const _basis_transform_t& _b) : _transform_steps(_b._transform_steps), _multiplier(_b._multiplier) {}
  
  void append(transform_function _func, bool _forward, bool _out_of_place, ptrdiff_t _prefix_lattice, ptrdiff_t _postfix_lattice)
  {
    _transform_steps.push_back((_transform_step){_func, _forward, _out_of_place, _prefix_lattice, _postfix_lattice});
  }
};

// Map type for holding (old_basis, new_basis) -> _basis_transform_t mappings
typedef map<_basis_pair, _basis_transform_t, _basis_pair_less_than> _basis_map;

_basis_map _x_gradphi_basis_map;
_basis_map _x_segment3_x_operators_operator0_result_basis_map;
_basis_map _x_wavefunction_basis_map;

real *_auxiliary_array = NULL;

const char *_basis_identifiers[] = {
  /* 0 */ "(kx)",
  /* 1 */ "(x)",
};

// ********************************************************
//   'Globals' element globals

#line 18 "gp1d.xmds"

real Uint; // interaction parameter
real Nparticles;
real omega;
real x0; //shift

#line 325 "xgp1d.cc"

// ********************************************************
//   Command line argument processing globals
real interaction_param = 0; 
real num_particles = 1; 
real freq = 1; 
real shift = 0; 

// ********************************************************
//   FFTW3 globals
const real _inverse_sqrt_2pi = 1.0 / sqrt(2.0 * M_PI); 
string _fftwWisdomPath;

// ********************************************************
//   Geometry globals
real* _x = NULL;

real* _kx = NULL;

// ********************************************************
//   field x globals
// vector gradphi globals
size_t _x_gradphi_alloc_size = 0;
complex* _x_gradphi = NULL;
complex* _active_x_gradphi = NULL;

ptrdiff_t _x_gradphi_basis = -1;

// vector wavefunction globals
size_t _x_wavefunction_alloc_size = 0;
complex* _x_wavefunction = NULL;
complex* _active_x_wavefunction = NULL;

ptrdiff_t _x_wavefunction_basis = -1;

// vector potential globals
size_t _x_potential_alloc_size = 0;
real* _x_potential = NULL;
real* _active_x_potential = NULL;

// ********************************************************
//   field dimensionless globals
// vector normalisation globals
size_t _dimensionless_normalisation_alloc_size = 0;
real* _dimensionless_normalisation = NULL;
real* _active_dimensionless_normalisation = NULL;

// ********************************************************
//   segment 3 (RK45 adaptive-step integrator) globals
complex* _segment3_akfield_x_wavefunction;
complex* _segment3_aifield_x_wavefunction;
complex* _segment3_ajfield_x_wavefunction;
complex* _segment3_alfield_x_wavefunction;
complex* _segment3_checkfield_x_wavefunction;

// vector segment3_x_operators_operator0_result globals
size_t _x_segment3_x_operators_operator0_result_alloc_size = 0;
complex* _x_segment3_x_operators_operator0_result = NULL;
complex* _active_x_segment3_x_operators_operator0_result = NULL;

ptrdiff_t _x_segment3_x_operators_operator0_result_basis = -1;

// ********************************************************
//   field mg0_output globals
real* _mg0_output_t = NULL;
unsigned long _mg0_output_index_t = 0;

// vector raw globals
size_t _mg0_output_raw_alloc_size = 0;
real* _mg0_output_raw = NULL;
real* _active_mg0_output_raw = NULL;

// ********************************************************
//   field mg1_output globals
real* _mg1_output_t = NULL;
unsigned long _mg1_output_index_t = 0;

// vector raw globals
size_t _mg1_output_raw_alloc_size = 0;
real* _mg1_output_raw = NULL;
real* _active_mg1_output_raw = NULL;

// ********************************************************
//   field mg2_output globals
// vector raw globals
size_t _mg2_output_raw_alloc_size = 0;
real* _mg2_output_raw = NULL;
real* _active_mg2_output_raw = NULL;


// ********************************************************
// FUNCTION PROTOTYPES
// ********************************************************

// ********************************************************
//   Transform Multiplexer function prototypes
void _transform_0(bool _forward, real _multiplier, real* const __restrict__ _data_in, real* const __restrict__ _data_out, ptrdiff_t _prefix_lattice, ptrdiff_t _postfix_lattice);
void _transform_1(bool _forward, real _multiplier, real* const __restrict__ _data_in, real* const __restrict__ _data_out, ptrdiff_t _prefix_lattice, ptrdiff_t _postfix_lattice);

// ********************************************************
//   Command line argument processing function prototypes
void _print_usage();

// ********************************************************
//   field x function prototypes
void _x_gradphi_evaluate();
void _x_gradphi_initialise();
void _x_gradphi_basis_transform(ptrdiff_t new_basis);

void _x_wavefunction_initialise();
void _x_wavefunction_basis_transform(ptrdiff_t new_basis);

void _x_potential_initialise();

// ********************************************************
//   field dimensionless function prototypes
void _dimensionless_normalisation_evaluate();
void _dimensionless_normalisation_initialise();

// ********************************************************
//   segment 0 (Top level sequence) function prototypes
void _segment0();

// ********************************************************
//   segment 1 (Filter) function prototypes
void _segment1();

void _segment1__evaluate_operator0();

// ********************************************************
//   segment 2 (Filter) function prototypes
void _segment2();

void _segment2__evaluate_operator0();

// ********************************************************
//   segment 3 (RK45 adaptive-step integrator) function prototypes
inline void _segment3_calculate_delta_a(real _step);
inline void _segment3_calculate_nonconstant_ip_fields(real _step, int _exponent);
void _segment3();
inline void _segment3_ip_evolve(int _exponent);
real _segment3_setup_sampling(bool* _next_sample_flag, long* _next_sample_counter);
real _segment3_x_wavefunction_timestep_error(complex* _checkfield);
bool _segment3_x_wavefunction_reset(complex* _reset_to);

void _segment3_x_operators_evaluate_operator0();

void _x_segment3_x_operators_operator0_result_basis_transform(ptrdiff_t new_basis);

void _segment3_x_operators_evaluate_operator1(real _step);

void _segment3__evaluate_operator0();

// ********************************************************
//   output function prototypes
void _write_output();

FILE* _open_xsil_file(const char* _filename);
void _close_xsil_file(FILE*& fp);
void _write_xsil_header(FILE* fp);
void _write_xsil_footer(FILE* fp);

// ********************************************************
//   moment group 0 function prototypes
void _mg0_sample();
void _mg0_process();
void _mg0_write_out(FILE* _outfile);

// ********************************************************
//   field mg0_output function prototypes
void _mg0_output_raw_initialise();

// ********************************************************
//   moment group 1 function prototypes
void _mg1_sample();
void _mg1_process();
void _mg1_write_out(FILE* _outfile);

// ********************************************************
//   field mg1_output function prototypes
void _mg1_output_raw_initialise();

// ********************************************************
//   moment group 2 function prototypes
void _mg2_sample();
void _mg2_process();
void _mg2_write_out(FILE* _outfile);

// ********************************************************
//   field mg2_output function prototypes
void _mg2_output_raw_initialise();

// ********************************************************
// MAIN ROUTINE
// ********************************************************
int main(int argc, char **argv)
{
  #ifdef __APPLE__
    #if __MAC_OS_X_VERSION_MIN_REQUIRED >= 1080
  {
    IOPMAssertionID _powerAssertionID = 0;
    IOReturn __io_result = IOPMAssertionCreateWithDescription(
      kIOPMAssertionTypePreventUserIdleSystemSleep,
      CFSTR("XMDS simulation 'xgp1d' preventing user idle sleep"), // Assertion name
      NULL, // Assertion details
      NULL, // Human-readable reason
      NULL, // Localization bundle path
      (CFTimeInterval)0, // never timeout
      kIOPMAssertionTimeoutActionRelease,
      &_powerAssertionID
      );
    if (__io_result != kIOReturnSuccess) {
      _LOG(_WARNING_LOG_LEVEL, "Failed to disable user idle sleep\n");
    }
    // Note, this power assertion is automatically released when the process quits.
  }
    #endif
  #endif
  
    
  // *********** Parse the command line for arguments, and set  *********
  // *********** the appropriate global variables               *********
  
  int resp;
  std::map<string, string> mInputArgsAndValues;
  
  while (1) {
    static struct option long_options[] = 
      {
        {"help", no_argument, 0, 'h'},
        {"interaction_param", required_argument, 0, 'i'},
        {"num_particles", required_argument, 0, 'n'},
        {"freq", required_argument, 0, 'f'},
        {"shift", required_argument, 0, 's'},
        {NULL, 0, 0, 0}
      };
    
    int option_index = 0;
  
    resp = getopt_long(argc, argv, "hi:n:f:s:", long_options, &option_index);
    
    if (resp == -1)
      break;
  
    switch (resp) {
      case '?':
        // An unknown option was passed. Show allowed options and exit. 
        _print_usage(); // This causes the simulation to exit
  
      case 'h':
        _print_usage(); // This causes the simulation to exit
      
      case 'i':
        interaction_param = strtod(optarg, NULL);
        break;
      
      case 'n':
        num_particles = strtod(optarg, NULL);
        break;
      
      case 'f':
        freq = strtod(optarg, NULL);
        break;
      
      case 's':
        shift = strtod(optarg, NULL);
        break;
        
      default:
        _LOG(_ERROR_LOG_LEVEL, "Internal error in processing arguments.\n");
    }
  }
  
  
  if (optind < argc)
    _print_usage(); // This causes the simulation to exit.
  
  // ******** Argument post-processing code *******
  #line 27 "gp1d.xmds"
  
  Uint = interaction_param;
  
  Nparticles = num_particles;
  
  omega = freq;
  
  x0 = shift;
  
  #line 614 "xgp1d.cc"
  // **********************************************
  
    
  
  _x_wavefunction_alloc_size = MAX(_x_wavefunction_alloc_size, (_lattice_kx) * _x_wavefunction_ncomponents);
  _x_wavefunction_alloc_size = MAX(_x_wavefunction_alloc_size, (_lattice_x) * _x_wavefunction_ncomponents);
  _mg2_output_raw_alloc_size = MAX(_mg2_output_raw_alloc_size, (_lattice_x) * _mg2_output_raw_ncomponents);
  _x_potential_alloc_size = MAX(_x_potential_alloc_size, (_lattice_x) * _x_potential_ncomponents);
  _dimensionless_normalisation_alloc_size = MAX(_dimensionless_normalisation_alloc_size, (1) * _dimensionless_normalisation_ncomponents);
  _x_segment3_x_operators_operator0_result_alloc_size = MAX(_x_segment3_x_operators_operator0_result_alloc_size, (_lattice_kx) * _x_segment3_x_operators_operator0_result_ncomponents);
  _x_segment3_x_operators_operator0_result_alloc_size = MAX(_x_segment3_x_operators_operator0_result_alloc_size, (_lattice_x) * _x_segment3_x_operators_operator0_result_ncomponents);
  _x_gradphi_alloc_size = MAX(_x_gradphi_alloc_size, (_lattice_kx) * _x_gradphi_ncomponents);
  _x_gradphi_alloc_size = MAX(_x_gradphi_alloc_size, (_lattice_x) * _x_gradphi_ncomponents);
  _mg0_output_raw_alloc_size = MAX(_mg0_output_raw_alloc_size, (_mg0_output_lattice_t * _lattice_x) * _mg0_output_raw_ncomponents);
  _mg1_output_raw_alloc_size = MAX(_mg1_output_raw_alloc_size, (_mg1_output_lattice_t) * _mg1_output_raw_ncomponents);
  _x = (real*) xmds_malloc(sizeof(real) * (_lattice_x+1));
  
  _kx = (real*) xmds_malloc(sizeof(real) * (_lattice_kx+1));
  
  _x_gradphi = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_gradphi_alloc_size,1));
  _active_x_gradphi = _x_gradphi;
  
  
  _x_wavefunction = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_wavefunction_alloc_size,1));
  _active_x_wavefunction = _x_wavefunction;
  
  
  _x_potential = (real*) xmds_malloc(sizeof(real) * MAX(_x_potential_alloc_size,1));
  _active_x_potential = _x_potential;
  
  _dimensionless_normalisation = (real*) xmds_malloc(sizeof(real) * MAX(_dimensionless_normalisation_alloc_size,1));
  _active_dimensionless_normalisation = _dimensionless_normalisation;
  _mg0_output_t = (real*) xmds_malloc(sizeof(real) * (_mg0_output_lattice_t+1));
  
  
  _mg0_output_raw = (real*) xmds_malloc(sizeof(real) * MAX(_mg0_output_raw_alloc_size,1));
  _active_mg0_output_raw = _mg0_output_raw;
  _mg1_output_t = (real*) xmds_malloc(sizeof(real) * (_mg1_output_lattice_t+1));
  
  
  _mg1_output_raw = (real*) xmds_malloc(sizeof(real) * MAX(_mg1_output_raw_alloc_size,1));
  _active_mg1_output_raw = _mg1_output_raw;
  
  _mg2_output_raw = (real*) xmds_malloc(sizeof(real) * MAX(_mg2_output_raw_alloc_size,1));
  _active_mg2_output_raw = _mg2_output_raw;
  
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++)
    _x[_index_x] = _min_x + _index_x*_dx;
  for (long _index_kx = 0; _index_kx < (_lattice_kx+1)/2; _index_kx++)
    _kx[_index_kx] = _index_kx*_dkx;
  for (long _index_kx = (_lattice_kx+1)/2; _index_kx < _lattice_kx; _index_kx++)
    _kx[_index_kx] = -(_lattice_kx - _index_kx) * _dkx;
  _active_mg0_output_raw = _mg0_output_raw;
  _mg0_output_raw_initialise();
  _active_mg1_output_raw = _mg1_output_raw;
  _mg1_output_raw_initialise();
  _active_mg2_output_raw = _mg2_output_raw;
  _mg2_output_raw_initialise();
  // load wisdom
  #if CFG_OSAPI == CFG_OSAPI_POSIX // Don't load wisdom on windows
  {
    char _hostName[256];
    gethostname(_hostName, 256);
    _hostName[255] = '\0'; // just in case
    
    string _pathToWisdom = getenv("HOME");
    _pathToWisdom += "/.xmds/wisdom/";
    
    string _wisdomFileName = _hostName;
    _wisdomFileName += ".wisdom";
    _wisdomFileName += ".fftw3";
    
    FILE *_fp = NULL;
    
    _fp = fopen(_pathToWisdom.c_str(), "r");
    if (_fp) {
      fclose(_fp);
    } else {
      int _result = mkdir((string(getenv("HOME")) + "/.xmds").c_str(), S_IRWXU);
      if (mkdir(_pathToWisdom.c_str(), S_IRWXU)) {
        // We failed to create the ~/.xmds/wisdom directory
        _LOG(_WARNING_LOG_LEVEL, "Warning: Cannot find enlightenment, the path to wisdom ~/.xmds/wisdom doesn't seem to exist and we couldn't create it.\n"
                                 "         I'll use the current path instead.\n");
        _pathToWisdom = ""; // present directory
      }
      
    }
    
    _fftwWisdomPath = _pathToWisdom + _wisdomFileName;
    
    FILE *_wisdomFile = NULL;
    if ( (_wisdomFile = fopen(_fftwWisdomPath.c_str(), "r")) != NULL) {
      _LOG(_SIMULATION_LOG_LEVEL, "Found enlightenment... (Importing wisdom)\n");
      fftw_import_wisdom_from_file(_wisdomFile);
      fclose(_wisdomFile);
    }
  }
  #endif // POSIX
  
  _basis_transform_t *_basis_transform = NULL;
  ptrdiff_t _auxiliary_array_size = 0;
  ptrdiff_t _max_vector_size = 0;
  real* _max_vector_array = NULL;
  
  if (2 * _x_gradphi_alloc_size > _max_vector_size) {
    _max_vector_size = 2 * _x_gradphi_alloc_size;
    _max_vector_array = reinterpret_cast<real*>(_x_gradphi);
  }
  _basis_transform = &_x_gradphi_basis_map[_basis_pair(0, 1)];
  _basis_transform->_multiplier = _inverse_sqrt_2pi * _dkx;
  _basis_transform->append(
    /* transform function */ _transform_0,
    /* forward? */ false,
    /* out-of-place? */ false,
    /* prefix lattice */ 1,
    /* postfix lattice*/ _x_gradphi_ncomponents
  );
  _basis_transform->append(
    /* transform function */ _transform_1,
    /* forward? */ true,
    /* out-of-place? */ false,
    /* prefix lattice */ _lattice_x,
    /* postfix lattice*/ _x_gradphi_ncomponents * 2
  );
  
  _basis_transform = &_x_gradphi_basis_map[_basis_pair(1, 0)];
  _basis_transform->_multiplier = _inverse_sqrt_2pi * _dx;
  _basis_transform->append(
    /* transform function */ _transform_1,
    /* forward? */ false,
    /* out-of-place? */ false,
    /* prefix lattice */ _lattice_x,
    /* postfix lattice */ _x_gradphi_ncomponents * 2
  );
  _basis_transform->append(
    /* transform function */ _transform_0,
    /* forward? */ true,
    /* out-of-place? */ false,
    /* prefix lattice */ 1,
    /* postfix lattice */ _x_gradphi_ncomponents
  );
  
  if (2 * _x_segment3_x_operators_operator0_result_alloc_size > _max_vector_size) {
    _max_vector_size = 2 * _x_segment3_x_operators_operator0_result_alloc_size;
    _max_vector_array = reinterpret_cast<real*>(_x_segment3_x_operators_operator0_result);
  }
  _basis_transform = &_x_segment3_x_operators_operator0_result_basis_map[_basis_pair(0, 1)];
  _basis_transform->_multiplier = _inverse_sqrt_2pi * _dkx;
  _basis_transform->append(
    /* transform function */ _transform_0,
    /* forward? */ false,
    /* out-of-place? */ false,
    /* prefix lattice */ 1,
    /* postfix lattice*/ _x_segment3_x_operators_operator0_result_ncomponents
  );
  _basis_transform->append(
    /* transform function */ _transform_1,
    /* forward? */ true,
    /* out-of-place? */ false,
    /* prefix lattice */ _lattice_x,
    /* postfix lattice*/ _x_segment3_x_operators_operator0_result_ncomponents * 2
  );
  
  _basis_transform = &_x_segment3_x_operators_operator0_result_basis_map[_basis_pair(1, 0)];
  _basis_transform->_multiplier = _inverse_sqrt_2pi * _dx;
  _basis_transform->append(
    /* transform function */ _transform_1,
    /* forward? */ false,
    /* out-of-place? */ false,
    /* prefix lattice */ _lattice_x,
    /* postfix lattice */ _x_segment3_x_operators_operator0_result_ncomponents * 2
  );
  _basis_transform->append(
    /* transform function */ _transform_0,
    /* forward? */ true,
    /* out-of-place? */ false,
    /* prefix lattice */ 1,
    /* postfix lattice */ _x_segment3_x_operators_operator0_result_ncomponents
  );
  
  if (2 * _x_wavefunction_alloc_size > _max_vector_size) {
    _max_vector_size = 2 * _x_wavefunction_alloc_size;
    _max_vector_array = reinterpret_cast<real*>(_x_wavefunction);
  }
  _basis_transform = &_x_wavefunction_basis_map[_basis_pair(0, 1)];
  _basis_transform->_multiplier = _inverse_sqrt_2pi * _dkx;
  _basis_transform->append(
    /* transform function */ _transform_0,
    /* forward? */ false,
    /* out-of-place? */ false,
    /* prefix lattice */ 1,
    /* postfix lattice*/ _x_wavefunction_ncomponents
  );
  _basis_transform->append(
    /* transform function */ _transform_1,
    /* forward? */ true,
    /* out-of-place? */ false,
    /* prefix lattice */ _lattice_x,
    /* postfix lattice*/ _x_wavefunction_ncomponents * 2
  );
  
  _basis_transform = &_x_wavefunction_basis_map[_basis_pair(1, 0)];
  _basis_transform->_multiplier = _inverse_sqrt_2pi * _dx;
  _basis_transform->append(
    /* transform function */ _transform_1,
    /* forward? */ false,
    /* out-of-place? */ false,
    /* prefix lattice */ _lattice_x,
    /* postfix lattice */ _x_wavefunction_ncomponents * 2
  );
  _basis_transform->append(
    /* transform function */ _transform_0,
    /* forward? */ true,
    /* out-of-place? */ false,
    /* prefix lattice */ 1,
    /* postfix lattice */ _x_wavefunction_ncomponents
  );
  
  if (_auxiliary_array_size) {
    _auxiliary_array = (real*) xmds_malloc(sizeof(real) * _auxiliary_array_size);
  }
  
  bool _allocated_temporary_array = false;
  if (!_max_vector_array && _max_vector_size > 0) {
    _max_vector_array = (real*) xmds_malloc(sizeof(real) * _max_vector_size);
    _allocated_temporary_array = true;
  }
  
  // Make all geometry-dependent transformations prepare plans, etc.
  _transform_0(true, 1.0, _max_vector_array, _auxiliary_array, 1, _x_gradphi_ncomponents);
  
  if (_allocated_temporary_array) {
    xmds_free(_max_vector_array);
  }
  
  // Get the time at which the simulation started
  timeval _tim;
  gettimeofday(&_tim, NULL);
  double _startTime = _tim.tv_sec + (_tim.tv_usec/1e6);
  
  /* Code that actually does stuff goes here */
  _segment0();
  
  
  _write_output();
  
  // Work out how long the simulation has run for
  gettimeofday(&_tim, NULL);
  double _endTime = _tim.tv_sec + (_tim.tv_usec/1e6);
  _LOG(_SIMULATION_LOG_LEVEL, "Time elapsed for simulation is: %.2f seconds\n", _endTime - _startTime);
  if (_auxiliary_array) {
    xmds_free(_auxiliary_array);
  }
  
  // Save wisdom
  #if CFG_OSAPI == CFG_OSAPI_POSIX
  {
    FILE *_wisdomFile = NULL;
    if ( (_wisdomFile = fopen(_fftwWisdomPath.c_str(), "w")) != NULL) {
      fftw_export_wisdom_to_file(_wisdomFile);
      fclose(_wisdomFile);
    }
  }
  #endif // POSIX
  
  fftw_cleanup();
  
  // Bing!
  _LOG(_SIMULATION_LOG_LEVEL, "\a");
  
  xmds_free(_x_gradphi);
  _active_x_gradphi = _x_gradphi = NULL;
  
  
  xmds_free(_x_wavefunction);
  _active_x_wavefunction = _x_wavefunction = NULL;
  
  
  xmds_free(_x_potential);
  _active_x_potential = _x_potential = NULL;
  
  xmds_free(_dimensionless_normalisation);
  _active_dimensionless_normalisation = _dimensionless_normalisation = NULL;
  
  xmds_free(_mg0_output_raw);
  _active_mg0_output_raw = _mg0_output_raw = NULL;
  
  xmds_free(_mg1_output_raw);
  _active_mg1_output_raw = _mg1_output_raw = NULL;
  
  xmds_free(_mg2_output_raw);
  _active_mg2_output_raw = _mg2_output_raw = NULL;
  
  
  return 0;
}

// ********************************************************
// FUNCTION IMPLEMENTATIONS
// ********************************************************

inline void *xmds_malloc(size_t size)
{
  void *retPointer = _xmds_malloc(size);
  if ( !retPointer )
    _LOG(_ERROR_LOG_LEVEL, "ERROR: Couldn't allocate %zu bytes of memory!", size);
  return retPointer;
}


// ********************************************************
//   Transform Multiplexer function implementations
// x <---> kx transform
void _transform_0(bool _forward, real _multiplier, real* const __restrict__ _data_in, real* const __restrict__ _data_out, ptrdiff_t _prefix_lattice, ptrdiff_t _postfix_lattice)
{
  if (_prefix_lattice <= 0 || _postfix_lattice <= 0) return;
  // _prefix_lattice should be 1
  // _postfix_lattice should be 1
  static fftw_plan _fftw_forward_plan = NULL;
  static fftw_plan _fftw_backward_plan = NULL;
  
  if (!_fftw_forward_plan) {
    _LOG(_SIMULATION_LOG_LEVEL, "Planning for x <---> kx transform...");
    
    fftw_iodim _transform_sizes[1], _loop_sizes[2];
    fftw_iodim *_iodim_ptr = NULL;
    
    int _transform_sizes_index = 0, _loop_sizes_index = 0;
    
    if (_prefix_lattice > 1) {
      _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
      _iodim_ptr->n = _prefix_lattice;
      _iodim_ptr->is = _iodim_ptr->os = _postfix_lattice * _lattice_x;
    }
    if (_postfix_lattice > 1) {
      _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
      _iodim_ptr->n = _postfix_lattice;
      _iodim_ptr->is = _iodim_ptr->os = 1;
    }
    _iodim_ptr = &_transform_sizes[_transform_sizes_index++];
    _iodim_ptr->n = _lattice_x;
    _iodim_ptr->is = _iodim_ptr->os = _postfix_lattice;
    
    
    _fftw_forward_plan = fftw_plan_guru_dft(
      _transform_sizes_index, _transform_sizes,
      _loop_sizes_index, _loop_sizes,
      reinterpret_cast<fftw_complex*>(_data_in), reinterpret_cast<fftw_complex*>(_data_in),
      FFTW_FORWARD, FFTW_EXHAUSTIVE
    );
    if (!_fftw_forward_plan)
      _LOG(_ERROR_LOG_LEVEL, "(%s: %i) Unable to create forward dft plan.\n", __FILE__, __LINE__);
    
    _fftw_backward_plan = fftw_plan_guru_dft(
      _transform_sizes_index, _transform_sizes,
      _loop_sizes_index, _loop_sizes,
      reinterpret_cast<fftw_complex*>(_data_in), reinterpret_cast<fftw_complex*>(_data_in),
      FFTW_BACKWARD, FFTW_EXHAUSTIVE
    );
    if (!_fftw_backward_plan)
      _LOG(_ERROR_LOG_LEVEL, "(%s: %i) Unable to create backward dft plan.\n", __FILE__, __LINE__);
    
    
    _LOG(_SIMULATION_LOG_LEVEL, " done.\n");
  }
  
  if (_forward) {
    fftw_execute_dft(
      _fftw_forward_plan,
      reinterpret_cast<fftw_complex*>(_data_in),
      reinterpret_cast<fftw_complex*>(_data_in)
    );
  } else {
    fftw_execute_dft(
      _fftw_backward_plan,
      reinterpret_cast<fftw_complex*>(_data_in),
      reinterpret_cast<fftw_complex*>(_data_in)
    );
  }
}


// In-place multiply
void _transform_1(bool _forward, real _multiplier, real* const __restrict__ _data_in, real* const __restrict__ _data_out, ptrdiff_t _prefix_lattice, ptrdiff_t _postfix_lattice)
{
  if (_prefix_lattice <= 0 || _postfix_lattice <= 0) return;
  #pragma ivdep
  for (long _i0 = 0; _i0 < _prefix_lattice * _postfix_lattice; _i0++) {
    _data_in[_i0] *= _multiplier;
  }
}

// ********************************************************
//   Command line argument processing function implementations
void _print_usage()
{
  // This function does not return.
  _LOG(_NO_ERROR_TERMINATE_LOG_LEVEL, "\n\nUsage: xgp1d --interaction_param <real> --num_particles <real> --freq <real> --shift <real>\n\n"
                         "Details:\n"
                         "Option\t\tType\t\tDefault value\n"
                         "-i,  --interaction_param\treal \t\t0\n"
                         "-n,  --num_particles\treal \t\t1\n"
                         "-f,  --freq\treal \t\t1\n"
                         "-s,  --shift\treal \t\t0\n"
                         );
  // _LOG terminates the simulation.
}

// ********************************************************
//   Default Simulation Driver function implementations
void _segment0()
{
  t = 0.0;
  
  _mg0_output_raw_initialise();
  _mg1_output_raw_initialise();
  _mg2_output_raw_initialise();
  _active_x_wavefunction = _x_wavefunction;
  _x_wavefunction_initialise();
  _active_x_potential = _x_potential;
  _x_potential_initialise();
  _mg0_output_index_t = 0;
  _mg1_output_index_t = 0;
  _mg0_sample();
  _mg1_sample();
  _segment1();
  _segment2();
  _segment3();
  
  _mg0_process();
  _mg1_process();
  _mg2_process();
}


// ********************************************************
//   field x function implementations
void _x_gradphi_evaluate()
{
  // Transforming vectors to basis (kx)
  _x_wavefunction_basis_transform(0); // (kx)
  
  long _x_gradphi_index_pointer = 0;
  #define dphix _active_x_gradphi[_x_gradphi_index_pointer + 0]
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  #define kx _kx[_index_kx + 0]
  #define dkx (_dkx * (1.0))
  
  for (long _index_kx = 0; _index_kx < _lattice_kx; _index_kx++) {
    // ************* Evaluation code ****************
    #line 75 "gp1d.xmds"
    
    dphix=i*kx*phi;
    
    #line 1071 "xgp1d.cc"
    // **********************************************
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_gradphi_index_pointer += 1 * _x_gradphi_ncomponents;
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    
  }
  #undef kx
  #undef dkx
  #undef dphix
  #undef phi
  
  _x_gradphi_basis = 0;
}


// initialisation for computed vector gradphi
void _x_gradphi_initialise()
{
  
  _x_gradphi_basis = 0;
}


void _x_gradphi_basis_transform(ptrdiff_t new_basis)
{
  if (_x_gradphi_basis == new_basis)
    return;
  
  if (_x_gradphi_basis == -1) {
    _LOG(
      _ERROR_LOG_LEVEL,
      "Error: Attempted to transform the vector 'x_gradphi' to basis %s, but the vector doesn't have a basis specified yet!\n"
      "       Please report this error to xmds-devel@lists.sourceforge.net\n",
      _basis_identifiers[new_basis]
      );
  }
  
  if (_x_gradphi_basis_map.count(_basis_pair(_x_gradphi_basis, new_basis)) == 0) {
    _LOG(
      _ERROR_LOG_LEVEL,
      "Error: We should have information about how to do every needed transform, but it seems we don't for this transform.\n"
      "       The transform is for the vector 'x_gradphi' from basis %s to basis %s.\n",
      _basis_identifiers[_x_gradphi_basis], _basis_identifiers[new_basis]
    );
  }
  _basis_transform_t &_t = _x_gradphi_basis_map[_basis_pair(_x_gradphi_basis, new_basis)];
  if (_t._transform_steps.size() == 0) {
    _LOG(_ERROR_LOG_LEVEL, "Error: It looks like we tried to create plans for this transform, but failed.\n"
                           "       The transform was for the vector 'x_gradphi' from basis %s to basis %s.\n",
                           _basis_identifiers[_x_gradphi_basis], _basis_identifiers[new_basis]);
  }
  real *_source_data = reinterpret_cast<real*>(_active_x_gradphi);
  real *_dest_data = _auxiliary_array;
  for (vector<_transform_step>::iterator _it = _t._transform_steps.begin(); _it != _t._transform_steps.end(); ++_it) {
    _it->_func(_it->_forward, _t._multiplier, _source_data, _dest_data, _it->_prefix_lattice, _it->_postfix_lattice);
    if (_it->_out_of_place) {
      real *_temp = _source_data;
      _source_data = _dest_data;
      _dest_data = _temp;
    }
  }
  _x_gradphi_basis = new_basis;
}

// initialisation for vector wavefunction
void _x_wavefunction_initialise()
{
  
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    // The purpose of the following define is to give a (somewhat helpful) compile-time error
    // if the user has attempted to use the propagation dimension variable in the initialisation
    // block of a <vector> element. If they're trying to do this, what they really want is a 
    // <computed_vector> instead.
    #define t Dont_use_propagation_dimension_t_in_vector_element_CDATA_block___Use_a_computed_vector_instead
    
    // ********** Initialisation code ***************
    #line 65 "gp1d.xmds"
    
    phi = 1; //exp(-(x*x)/2);
    
    #line 1157 "xgp1d.cc"
    // **********************************************
    #undef t
    
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef phi
  
  _x_wavefunction_basis = 1;
}


void _x_wavefunction_basis_transform(ptrdiff_t new_basis)
{
  if (_x_wavefunction_basis == new_basis)
    return;
  
  if (_x_wavefunction_basis == -1) {
    _LOG(
      _ERROR_LOG_LEVEL,
      "Error: Attempted to transform the vector 'x_wavefunction' to basis %s, but the vector doesn't have a basis specified yet!\n"
      "       Please report this error to xmds-devel@lists.sourceforge.net\n",
      _basis_identifiers[new_basis]
      );
  }
  
  if (_x_wavefunction_basis_map.count(_basis_pair(_x_wavefunction_basis, new_basis)) == 0) {
    _LOG(
      _ERROR_LOG_LEVEL,
      "Error: We should have information about how to do every needed transform, but it seems we don't for this transform.\n"
      "       The transform is for the vector 'x_wavefunction' from basis %s to basis %s.\n",
      _basis_identifiers[_x_wavefunction_basis], _basis_identifiers[new_basis]
    );
  }
  _basis_transform_t &_t = _x_wavefunction_basis_map[_basis_pair(_x_wavefunction_basis, new_basis)];
  if (_t._transform_steps.size() == 0) {
    _LOG(_ERROR_LOG_LEVEL, "Error: It looks like we tried to create plans for this transform, but failed.\n"
                           "       The transform was for the vector 'x_wavefunction' from basis %s to basis %s.\n",
                           _basis_identifiers[_x_wavefunction_basis], _basis_identifiers[new_basis]);
  }
  real *_source_data = reinterpret_cast<real*>(_active_x_wavefunction);
  real *_dest_data = _auxiliary_array;
  for (vector<_transform_step>::iterator _it = _t._transform_steps.begin(); _it != _t._transform_steps.end(); ++_it) {
    _it->_func(_it->_forward, _t._multiplier, _source_data, _dest_data, _it->_prefix_lattice, _it->_postfix_lattice);
    if (_it->_out_of_place) {
      real *_temp = _source_data;
      _source_data = _dest_data;
      _dest_data = _temp;
    }
  }
  _x_wavefunction_basis = new_basis;
}

// initialisation for vector potential
void _x_potential_initialise()
{
  
  long _x_potential_index_pointer = 0;
  #define V1 _active_x_potential[_x_potential_index_pointer + 0]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    // The purpose of the following define is to give a (somewhat helpful) compile-time error
    // if the user has attempted to use the propagation dimension variable in the initialisation
    // block of a <vector> element. If they're trying to do this, what they really want is a 
    // <computed_vector> instead.
    #define t Dont_use_propagation_dimension_t_in_vector_element_CDATA_block___Use_a_computed_vector_instead
    
    // ********** Initialisation code ***************
    #line 55 "gp1d.xmds"
    
    //V1  = 0.5*x*x;
    V1  = 0.5 * omega * omega * (x-x0)*(x-x0); // shift and omega
    
    #line 1236 "xgp1d.cc"
    // **********************************************
    #undef t
    
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_potential_index_pointer += 1 * _x_potential_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef V1
}

// ********************************************************
//   field dimensionless function implementations
void _dimensionless_normalisation_evaluate()
{
  _active_dimensionless_normalisation = _dimensionless_normalisation;
  _dimensionless_normalisation_initialise();
  
  // Transforming vectors to basis (x)
  _x_gradphi_basis_transform(1); // (x)
  _x_wavefunction_basis_transform(1); // (x)
  
  long _x_gradphi_index_pointer = 0;
  #define dphix _active_x_gradphi[_x_gradphi_index_pointer + 0]
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  long _x_potential_index_pointer = 0;
  #define V1 _active_x_potential[_x_potential_index_pointer + 0]
  long _dimensionless_normalisation_index_pointer = 0;
  real Ncalc;
  real EN;
  real Ekin;
  real Epot;
  real Eint;
  real Virial;
  real mu;
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    // ************* Evaluation code ****************
    #line 85 "gp1d.xmds"
    
    // Calculate the current normalisation of the wave function.
    Ncalc = mod2(phi);
    EN = 0.5*mod2(dphix)+(V1+0.5*Uint*mod2(phi))*mod2(phi);
    Ekin = 0.5*mod2(dphix);
    Epot = V1*mod2(phi);
    Eint = 0.5*Uint*mod2(phi)*mod2(phi);
            Virial = Ekin - Epot + Eint;
            mu = Ekin + Epot + (2) * Eint;
    
    #line 1290 "xgp1d.cc"
    // **********************************************
    
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 0] += Ncalc * dx;
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 1] += EN * dx;
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 2] += Ekin * dx;
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 3] += Epot * dx;
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 4] += Eint * dx;
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 5] += Virial * dx;
    _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 6] += mu * dx;
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_gradphi_index_pointer += 1 * _x_gradphi_ncomponents;
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    _x_potential_index_pointer += 1 * _x_potential_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef dphix
  #undef phi
  #undef V1
}


// initialisation for computed vector normalisation
void _dimensionless_normalisation_initialise()
{
  // Because we're integrating over dimensions, we need to set the vector to zero.
  bzero(_active_dimensionless_normalisation, sizeof(real) * _dimensionless_normalisation_alloc_size);
}

// ********************************************************
//   segment 1 (Filter) function implementations
void _segment1()
{
  
  // Filter operator
  _segment1__evaluate_operator0();
}

// Filter operator
void _segment1__evaluate_operator0()
{
  
  // ************** Filter code *****************
  #line 100 "gp1d.xmds"
  
  printf("Hello world from a filter segment!\n");
  
  #line 1339 "xgp1d.cc"
  // **********************************************
}

// ********************************************************
//   segment 2 (Filter) function implementations
void _segment2()
{
  
  // Filter operator
  _segment2__evaluate_operator0();
}

// Filter operator
void _segment2__evaluate_operator0()
{
  _x_gradphi_evaluate();
  _dimensionless_normalisation_evaluate();
  // Transforming vectors to basis (x)
  _x_wavefunction_basis_transform(1); // (x)
  
  long _dimensionless_normalisation_index_pointer = 0;
  #define Ncalc _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 0]
  #define EN _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 1]
  #define Ekin _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 2]
  #define Epot _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 3]
  #define Eint _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 4]
  #define Virial _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 5]
  #define mu _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 6]
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    
    // ************** Filter code *****************
    #line 107 "gp1d.xmds"
    
    phi *= sqrt(Nparticles/Ncalc);
    
    #line 1380 "xgp1d.cc"
    // **********************************************
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef Ncalc
  #undef EN
  #undef Ekin
  #undef Epot
  #undef Eint
  #undef Virial
  #undef mu
  #undef phi
}

// ********************************************************
//   segment 3 (RK45 adaptive-step integrator) function implementations
inline void _segment3_calculate_delta_a(real _step)
{
  
  // EX transverse derivative operator for field x (not constant)
  _segment3_x_operators_evaluate_operator0();
  
  // Delta A propagation operator for field x
  _segment3_x_operators_evaluate_operator1(_step);
  
}


inline void _segment3_calculate_nonconstant_ip_fields(real _step, int _exponent)
{
}


void _segment3()
{
  real _step = 20.0/(real)1000;
  real _old_step = _step;
  real _min_step = _step;
  real _max_step = _step;
  long _attempted_steps = 0;
  long _unsuccessful_steps = 0;
  
  real _tolerance = 1e-06;
  
  real _error, _last_norm_error = 1.0;
  real _segment3_x_wavefunction_error;
  
  bool _discard = false;
  bool _break_next = false;
  
  bool _next_sample_flag[5];
  for (long _i0 = 0; _i0 < 5; _i0++)
    _next_sample_flag[_i0] = false;
  
  long _next_sample_counter[3];
  for (long _i0 = 0; _i0 < 3; _i0++)
    _next_sample_counter[_i0] = 1;
  
  real _t_local = 0.0;
  
  real _t_break_next = _segment3_setup_sampling(_next_sample_flag, _next_sample_counter);
  
  if ( (_t_local + _step)*(1.0 + _EPSILON) >= _t_break_next) {
    _break_next = true;
    _step = _t_break_next - _t_local;
  }
  
  
  _x_segment3_x_operators_operator0_result = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_segment3_x_operators_operator0_result_alloc_size,1));
  _active_x_segment3_x_operators_operator0_result = _x_segment3_x_operators_operator0_result;
  _segment3_akfield_x_wavefunction = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_wavefunction_alloc_size,1));
  _segment3_aifield_x_wavefunction = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_wavefunction_alloc_size,1));
  _segment3_ajfield_x_wavefunction = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_wavefunction_alloc_size,1));
  _segment3_alfield_x_wavefunction = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_wavefunction_alloc_size,1));
  _segment3_checkfield_x_wavefunction = (complex*) xmds_malloc(sizeof(complex) * MAX(_x_wavefunction_alloc_size,1));
  complex* _akfield_x_wavefunction = _segment3_akfield_x_wavefunction;
  complex* _aifield_x_wavefunction = _segment3_aifield_x_wavefunction;
  complex* _ajfield_x_wavefunction = _segment3_ajfield_x_wavefunction;
  complex* _alfield_x_wavefunction = _segment3_alfield_x_wavefunction;
  complex* _checkfield_x_wavefunction = _segment3_checkfield_x_wavefunction;
  
  
  // Cash-Karp coefficients
  real _a_raw[7];
  real _a[7];
  real _b[7][7];
  real _c[7];
  real _cs[7];
  // linear combinations for the (k_i)s
  real _d[4];
  real _e[5];
  real _f[6];
  real _g[7];
  
  _a_raw[0]=0.0;
  _a_raw[1]=0.0;
  _a_raw[2]=1.0/5;
  _a_raw[3]=3.0/10;
  _a_raw[4]=3.0/5;
  _a_raw[5]=1.0;
  _a_raw[6]=7.0/8.0;
  
  _a[0]=0.0;
  _a[1]=0.0;
  for(long _i0 = 2; _i0 < 7; _i0++)
    _a[_i0] = _a_raw[_i0] - _a_raw[_i0-1];
  
  _b[2][1]=1.0/5;
  _b[3][1]=3.0/40;
  _b[3][2]=9.0/40;
  _b[4][1]=3.0/10;
  _b[4][2]=-9.0/10;
  _b[4][3]=6.0/5;
  _b[5][1]=-11.0/54;
  _b[5][2]=5.0/2;
  _b[5][3]=-70.0/27;
  _b[5][4]=35.0/27;
  _b[6][1]=1631.0/55296;
  _b[6][2]=175.0/512;
  _b[6][3]=575.0/13824;
  _b[6][4]=44275.0/110592;
  _b[6][5]=253.0/4096;
  
  _c[0]=0.0;
  _c[1]=37.0/378;
  _c[2]=0.0;
  _c[3]=250.0/621;
  _c[4]=125.0/594;
  _c[5]=0.0;
  _c[6]=512.0/1771;
  
  _cs[0]=0.0;
  _cs[1]=2825.0/27648;
  _cs[2]=0.0;
  _cs[3]=18575.0/48384;
  _cs[4]=13525.0/55296;
  _cs[5]=277.0/14336;
  _cs[6]=1.0/4;
  
  _d[0]=0.0;
  _d[1]=1.0-_b[3][1]/_c[1];
  _d[2]=_b[3][1]/_c[1];
  _d[3]=_b[3][2];
  
  _e[0]=0.0;
  _e[1]=1.0-_b[4][1]/_c[1];
  _e[2]=_b[4][1]/_c[1];
  _e[3]=_b[4][2];
  _e[4]=_b[4][3];
  
  _f[0]=0.0;
  _f[1]=1.0-_b[5][1]/_c[1];
  _f[2]=_b[5][1]/_c[1];
  _f[3]=_b[5][2];
  _f[4]=_b[5][3]-_b[5][1]/_c[1]*_c[3];
  _f[5]=_b[5][4]-_b[5][1]/_c[1]*_c[4];
  
  real _den=_c[1]*_cs[4]-_cs[1]*_c[4];
  _g[0]=0.0;
  _g[1]=( _b[6][4]*(_cs[1]-_c[1]) + _b[6][1]*(_c[4]-_cs[4]) )/_den + 1.0;
  _g[2]=  _b[6][2];
  _g[3]=( _b[6][4]*(_cs[1]*_c[3] - _c[1]*_cs[3]) + _b[6][1]*(_cs[3]*_c[4] - _c[3]*_cs[4]) )/_den + _b[6][3];
  _g[4]=( _b[6][1]*_cs[4]-_b[6][4]*_cs[1] )/_den;
  _g[5]=  _b[6][5] + _cs[5]*( _b[6][1]*_c[4]-_b[6][4]*_c[1] )/_den;
  _g[6]=( -_b[6][1]*_c[4]+_b[6][4]*_c[1] )/_den;
  
  do {
    
    do {
      
      _x_wavefunction_basis_transform(1); // (x)
      
      // a_k = y1
      memcpy(_akfield_x_wavefunction, _x_wavefunction, sizeof(complex) * _x_wavefunction_alloc_size);
      
      _segment3_calculate_nonconstant_ip_fields(_step, 1);
      
      // a_i = D(a_2*dt)[y1]
      _segment3_ip_evolve(1);
      _x_wavefunction_basis_transform(1); // (x)
      
      // y2 = y1
      memcpy(_checkfield_x_wavefunction, _x_wavefunction, sizeof(complex) * _x_wavefunction_alloc_size);
      
      // a_i = y1
      memcpy(_aifield_x_wavefunction, _x_wavefunction, sizeof(complex) * _x_wavefunction_alloc_size);
      
      _active_x_wavefunction = _akfield_x_wavefunction;
      
      // a_k = G[a_k, t]
      _segment3_calculate_delta_a(_step);
      
      // a_k = D(a_2*dt)[a_k]
      _segment3_ip_evolve(1);
      _x_wavefunction_basis_transform(1); // (x)
      
      {
        _MAKE_AUTOVEC_VARIABLE(_akfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_checkfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_aifield_x_wavefunction);
        #pragma ivdep
        for (long _i0 = 0; _i0 < 2 * (_lattice_x) * _x_wavefunction_ncomponents; _i0++) {
          // y1 = y1 + c_1*a_k
          _AUTOVEC(_x_wavefunction)[_i0] += _c[1]*_AUTOVEC(_akfield_x_wavefunction)[_i0];
          // y2 = y2 + cs_1*a_k
          _AUTOVEC(_checkfield_x_wavefunction)[_i0] += _cs[1]*_AUTOVEC(_akfield_x_wavefunction)[_i0];
          // a_k = a_i + b_21*a_k
          _AUTOVEC(_akfield_x_wavefunction)[_i0] = _AUTOVEC(_aifield_x_wavefunction)[_i0] + _b[2][1]*_AUTOVEC(_akfield_x_wavefunction)[_i0];
        }
      
      }
      
      t += _a[2] * _step;
      
      _segment3_calculate_nonconstant_ip_fields(_step, 2);
      
      _segment3_ip_evolve(-2);
      
      // a_k = G[a_k, t + aa_2*dt]
      _segment3_calculate_delta_a(_step);
      
      _segment3_ip_evolve(2);
      _x_wavefunction_basis_transform(1); // (x)
      
      // c_2 == cs_2 == 0
      {
        _MAKE_AUTOVEC_VARIABLE(_ajfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_akfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_aifield_x_wavefunction);
        #pragma ivdep
        for (long _i0 = 0; _i0 < 2 * (_lattice_x) * _x_wavefunction_ncomponents; _i0++) {
          // a_j = d_1*a_i + d_2*y1 + d_3*a_k
          _AUTOVEC(_ajfield_x_wavefunction)[_i0] = _d[1]*_AUTOVEC(_aifield_x_wavefunction)[_i0] + _d[2]*_AUTOVEC(_x_wavefunction)[_i0] + _d[3]*_AUTOVEC(_akfield_x_wavefunction)[_i0];
        }
      
      }
      
      t += _a[3] * _step;
      
      _active_x_wavefunction = _ajfield_x_wavefunction;
      
      _segment3_calculate_nonconstant_ip_fields(_step, 3);
      
      // a_j = D((a_3 - a_2)*dt)[a_j]
      _segment3_ip_evolve(-3);
      
      // a_j = G[a_j, t + aa_3*dt]
      _segment3_calculate_delta_a(_step);
      
      // a_j = D(-(a_3 - a_2)*dt)[a_j]
      _segment3_ip_evolve(3);
      _x_wavefunction_basis_transform(1); // (x)
      
      {
        _MAKE_AUTOVEC_VARIABLE(_ajfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_akfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_checkfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_aifield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_alfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_x_wavefunction);
        #pragma ivdep
        for (long _i0 = 0; _i0 < 2 * (_lattice_x) * _x_wavefunction_ncomponents; _i0++) {
          // a_l = e_1*a_i + e_2*y1 + e_3*a_k + e_4*a_j
          _AUTOVEC(_alfield_x_wavefunction)[_i0] = _e[1]*_AUTOVEC(_aifield_x_wavefunction)[_i0] + _e[2]*_AUTOVEC(_x_wavefunction)[_i0] + _e[3]*_AUTOVEC(_akfield_x_wavefunction)[_i0] + _e[4]*_AUTOVEC(_ajfield_x_wavefunction)[_i0];
          // y1 = y1 + c_3*a_j
          _AUTOVEC(_x_wavefunction)[_i0] += _c[3]*_AUTOVEC(_ajfield_x_wavefunction)[_i0];
          // y2 = y2 + cs_3*a_j
          _AUTOVEC(_checkfield_x_wavefunction)[_i0] += _cs[3]*_AUTOVEC(_ajfield_x_wavefunction)[_i0];
        }
      
      }
      
      t += _a[4] * _step;
      
      _active_x_wavefunction = _alfield_x_wavefunction;
      
      _segment3_calculate_nonconstant_ip_fields(_step, 4);
      
      // a_l = D((a_4 - a_2)*dt)[a_l]
      _segment3_ip_evolve(-4);
      
      // a_l = G[a_l, t + aa_4*dt]
      _segment3_calculate_delta_a(_step);
      
      // a_l = D(-(a_4 - a_2)*dt)[a_l]
      _segment3_ip_evolve(4);
      _x_wavefunction_basis_transform(1); // (x)
      
      {
        _MAKE_AUTOVEC_VARIABLE(_ajfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_akfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_checkfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_aifield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_alfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_x_wavefunction);
        #pragma ivdep
        for (long _i0 = 0; _i0 < 2 * (_lattice_x) * _x_wavefunction_ncomponents; _i0++) {
          // y1 = y1 + c_4*a_l
          _AUTOVEC(_x_wavefunction)[_i0] += _c[4]*_AUTOVEC(_alfield_x_wavefunction)[_i0];
          // y2 = y2 + cs_4*a_l
          _AUTOVEC(_checkfield_x_wavefunction)[_i0] += _cs[4]*_AUTOVEC(_alfield_x_wavefunction)[_i0];
          // a_l = f_1*a_i + f_2*y1 + f_3*a_k + f_4*a_j + f_5*a_l
          _AUTOVEC(_alfield_x_wavefunction)[_i0] = _f[1]*_AUTOVEC(_aifield_x_wavefunction)[_i0] + _f[2]*_AUTOVEC(_x_wavefunction)[_i0] + _f[3]*_AUTOVEC(_akfield_x_wavefunction)[_i0] + _f[4]*_AUTOVEC(_ajfield_x_wavefunction)[_i0] + _f[5]*_AUTOVEC(_alfield_x_wavefunction)[_i0];
        }
      
      }
      
      t += _a[5] * _step;
      
      // a_l = G[a_l, t + aa_5*dt]
      _segment3_calculate_delta_a(_step);
      _x_wavefunction_basis_transform(1); // (x)
      
      // c_5 == 0
      {
        _MAKE_AUTOVEC_VARIABLE(_ajfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_akfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_checkfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_aifield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_alfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_x_wavefunction);
        #pragma ivdep
        for (long _i0 = 0; _i0 < 2 * (_lattice_x) * _x_wavefunction_ncomponents; _i0++) {
          // y2 = y2 + cs_5*a_l
          _AUTOVEC(_checkfield_x_wavefunction)[_i0] += _cs[5]*_AUTOVEC(_alfield_x_wavefunction)[_i0];
          // a_l = g_1*a_i + g_2*a_k + g_3*a_j + g_4*y_1 + g_5*a_l + g_6*y2
          _AUTOVEC(_alfield_x_wavefunction)[_i0] = _g[1]*_AUTOVEC(_aifield_x_wavefunction)[_i0] + _g[2]*_AUTOVEC(_akfield_x_wavefunction)[_i0] + _g[3]*_AUTOVEC(_ajfield_x_wavefunction)[_i0] + _g[4]*_AUTOVEC(_x_wavefunction)[_i0] + _g[5]*_AUTOVEC(_alfield_x_wavefunction)[_i0] + _g[6]*_AUTOVEC(_checkfield_x_wavefunction)[_i0];
        }
      
      }
      
      t += _a[6] * _step;
      
      _segment3_calculate_nonconstant_ip_fields(_step, 5);
      
      // a_l = D((a_6 - a_2)*dt)[a_l]
      _segment3_ip_evolve(-5);
      
      // a_l = G[a_l, t + aa_6*dt]
      _segment3_calculate_delta_a(_step);
      
      // a_l = D(-(a_6 - a_2)*dt)[a_l]
      _segment3_ip_evolve(5);
      _x_wavefunction_basis_transform(1); // (x)
      
      // c_5 == 0
      {
        _MAKE_AUTOVEC_VARIABLE(_alfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_checkfield_x_wavefunction);
        _MAKE_AUTOVEC_VARIABLE(_x_wavefunction);
        #pragma ivdep
        for (long _i0 = 0; _i0 < 2 * (_lattice_x) * _x_wavefunction_ncomponents; _i0++) {
          // y1 = y1 + c_6*a_l
          _AUTOVEC(_x_wavefunction)[_i0] += _c[6]*_AUTOVEC(_alfield_x_wavefunction)[_i0];
          // y2 = y2 + cs_6*a_l
          _AUTOVEC(_checkfield_x_wavefunction)[_i0] += _cs[6]*_AUTOVEC(_alfield_x_wavefunction)[_i0];
        }
      
      }
      
      // t -> t + dt
      t -= _a[6]*_step;
      
      _active_x_wavefunction = _checkfield_x_wavefunction;
      
      _active_x_wavefunction = _x_wavefunction;
      
      
      
      _error = 0.0;
      
      _segment3_x_wavefunction_error = _segment3_x_wavefunction_timestep_error(_checkfield_x_wavefunction);
      if (_segment3_x_wavefunction_error > _error)
        _error = _segment3_x_wavefunction_error;
      
      _attempted_steps++;
      
      if (_error < _tolerance) {
        _t_local += _step;
        if (_step > _max_step)
          _max_step = _step;
        if (!_break_next && _step < _min_step)
          _min_step = _step;
        _discard = false;
      } else {
        if (_error == 2.0*1e-06)
          _LOG(_SEGMENT_LOG_LEVEL, "NaN hit on this step. Retrying. (Error set to %e)\n", 2.0*1e-06);
        _LOG(_SEGMENT_LOG_LEVEL, "Step size %e failed, t = %e, error = %e\n", _step, t, _error);
        t -= _step;
  
        if (_segment3_x_wavefunction_reset(_aifield_x_wavefunction) == false) {
  
          _LOG(_WARNING_LOG_LEVEL, "WARNING: NaN present. Integration halted at t = %e.\n"
                             "         Non-finite number in integration vector \"wavefunction\" in segment 3.\n", t);
          if (_mg0_output_index_t < _mg0_output_lattice_t)
            _mg0_sample();
          if (_mg1_output_index_t < _mg1_output_lattice_t)
            _mg1_sample();
          
          goto _SEGMENT3_END;
        }
  
        _segment3_ip_evolve(-1);
        
        _discard = true;
        _break_next = false;
        _unsuccessful_steps++;
      }
      
      _old_step = _step;
      
      // Resize step
      if (_error < 0.5*_tolerance || _error > _tolerance) {
        const real _safetyFactor = 0.90;
        real _scalingFactor = _safetyFactor * pow(abs(_error/_tolerance), real(-0.7/5.0)) * pow(_last_norm_error, real(0.4/5.0));
        _scalingFactor = MAX(_scalingFactor, 1.0/5.0);
        _scalingFactor = MIN(_scalingFactor, 7.0);
        if (_error > _tolerance && _scalingFactor > 1.0) {
          // If our step failed don't try and increase our step size. That would be silly.
          _scalingFactor = _safetyFactor * pow(abs(_error/_tolerance), real(-1.0/5.0));
        }
        _old_step = _step;
        _last_norm_error = pow(_safetyFactor/_scalingFactor*pow(_last_norm_error, real(0.4/5.0)), real(5.0/0.7));
        _step *= _scalingFactor;
      }
      
    } while (_discard);
    
    // Filter operator
    _segment3__evaluate_operator0();
    
    if (_break_next) {
      if (_next_sample_flag[0]) {
        _mg0_sample();
        _next_sample_counter[0]++;
      }
      if (_next_sample_flag[1]) {
        _mg1_sample();
        _next_sample_counter[1]++;
      }
      if (_next_sample_flag[2]) {
        _mg2_sample();
        _next_sample_counter[2]++;
      }
      if (_next_sample_flag[3])
        _next_sample_flag[4] = true;
      else {
        _break_next = false;
        _t_break_next = _segment3_setup_sampling(_next_sample_flag, _next_sample_counter);
      }
    }
    
    if ( (_t_local + _step)*(1.0 + _EPSILON) > _t_break_next) {
      _break_next = true;
      _LOG(_SAMPLE_LOG_LEVEL, "Current timestep: %e\n", _old_step);
      _step = _t_break_next - _t_local;
    }
  } while (!_next_sample_flag[4]);
  
  _SEGMENT3_END:;
  
  xmds_free(_x_segment3_x_operators_operator0_result);
  _active_x_segment3_x_operators_operator0_result = _x_segment3_x_operators_operator0_result = NULL;
  xmds_free(_segment3_akfield_x_wavefunction);
  xmds_free(_segment3_aifield_x_wavefunction);
  xmds_free(_segment3_ajfield_x_wavefunction);
  xmds_free(_segment3_alfield_x_wavefunction);
  xmds_free(_segment3_checkfield_x_wavefunction);
  
  _LOG(_SEGMENT_LOG_LEVEL, "Segment 3: minimum timestep: %e maximum timestep: %e\n", _min_step, _max_step);
  _LOG(_SEGMENT_LOG_LEVEL, "  Attempted %li steps, %.2f%% steps failed.\n", _attempted_steps, (100.0*_unsuccessful_steps)/_attempted_steps);
}


inline void _segment3_ip_evolve(int _exponent)
{
  
}
real _segment3_setup_sampling(bool* _next_sample_flag, long* _next_sample_counter)
{
  // The numbers of the moment groups that need to be sampled at the next sampling point.
  // An entry of N+1 means "reached end of integration interval"
  long _momentGroupNumbersNeedingSamplingNext[4];
  long _numberOfMomentGroupsToBeSampledNext = 1;
  
  long _previous_m = 1;
  long _previous_M = 1;
  
  real _t_break_next = (real)20.0;
  _momentGroupNumbersNeedingSamplingNext[0] = 3;
  
  // initialise all flags to false
  for (long _i0 = 0; _i0 < 4; _i0++)
    _next_sample_flag[_i0] = false;
  
  /* Check if moment group needs sampling at the same time as another already discovered sample (or the final time).
   * If so, add this moment group to the to-be-sampled list. If moment group demands sampling earlier than all
   * previously noted moment groups, erase all previous ones from list and set the sample time to this earlier one.
   */
  if (_next_sample_counter[0] * _previous_M == _previous_m * 25) {
    _momentGroupNumbersNeedingSamplingNext[_numberOfMomentGroupsToBeSampledNext] = 0;
    _numberOfMomentGroupsToBeSampledNext++;
  } else if (_next_sample_counter[0] * _previous_M < _previous_m * 25) {
    _t_break_next = _next_sample_counter[0] * ((real)20.0) / ((real)25);
    _numberOfMomentGroupsToBeSampledNext = 1;
    _momentGroupNumbersNeedingSamplingNext[0] = 0;
    _previous_M = 25;
    _previous_m = _next_sample_counter[0];
  }
  
  if (_next_sample_counter[1] * _previous_M == _previous_m * 25) {
    _momentGroupNumbersNeedingSamplingNext[_numberOfMomentGroupsToBeSampledNext] = 1;
    _numberOfMomentGroupsToBeSampledNext++;
  } else if (_next_sample_counter[1] * _previous_M < _previous_m * 25) {
    _t_break_next = _next_sample_counter[1] * ((real)20.0) / ((real)25);
    _numberOfMomentGroupsToBeSampledNext = 1;
    _momentGroupNumbersNeedingSamplingNext[0] = 1;
    _previous_M = 25;
    _previous_m = _next_sample_counter[1];
  }
  
  if (_next_sample_counter[2] * _previous_M == _previous_m * 1) {
    _momentGroupNumbersNeedingSamplingNext[_numberOfMomentGroupsToBeSampledNext] = 2;
    _numberOfMomentGroupsToBeSampledNext++;
  } else if (_next_sample_counter[2] * _previous_M < _previous_m * 1) {
    _t_break_next = _next_sample_counter[2] * ((real)20.0) / ((real)1);
    _numberOfMomentGroupsToBeSampledNext = 1;
    _momentGroupNumbersNeedingSamplingNext[0] = 2;
    _previous_M = 1;
    _previous_m = _next_sample_counter[2];
  }
  
  // _momentGroupNumbersNeedingSamplingNext now contains the complete list of moment groups that need
  // to be sampled at the next sampling point. Set their flags to true.
  for (long _i0 = 0; _i0 < _numberOfMomentGroupsToBeSampledNext; _i0++)
    _next_sample_flag[_momentGroupNumbersNeedingSamplingNext[_i0]] = true;
  
  return _t_break_next;
}

real _segment3_x_wavefunction_timestep_error(complex* _checkfield)
{
  real _error = 1e-24;
  real _temp_error = 0.0;
  real _temp_mod = 0.0;

  real _component_errors[_x_wavefunction_ncomponents];
  for (long _i0 = 0; _i0 < _x_wavefunction_ncomponents; _i0++)
    _component_errors[_i0] = 0.0;
  
  // Find the peak value for each component of the field
  real _cutoff[_x_wavefunction_ncomponents];
  
  for (long _i0 = 0; _i0 < _x_wavefunction_ncomponents; _i0++)
    _cutoff[_i0] = 0.0;
  
  {
    long _x_wavefunction_index_pointer = 0;
    #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
    for (long _i0 = 0; _i0 < (_lattice_x); _i0++) {
      for (long _i1 = 0; _i1 < _x_wavefunction_ncomponents; _i1++) {
        _temp_mod = mod2(_x_wavefunction[_x_wavefunction_index_pointer + _i1]);
        if (_xmds_isnonfinite(_temp_mod))
          _cutoff[_i1] = INFINITY;
        else if (_cutoff[_i1] < _temp_mod)
          _cutoff[_i1] = _temp_mod;
      }
    
      _x_wavefunction_index_pointer += _x_wavefunction_ncomponents;
    }
    #undef phi
  }
  
  for (long _i0 = 0; _i0 < _x_wavefunction_ncomponents; _i0++) {
    if (_xmds_isnonfinite(_cutoff[_i0]))
      // Return an error two times the tolerance in this case because the timestep must be reduced.
      return 2.0*1e-06;
    _cutoff[_i0] *= 0.001;
    _cutoff[_i0] *= 0.001;
  }
  
  {
    long _x_wavefunction_index_pointer = 0;
    #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
    for (long _i0 = 0; _i0 < (_lattice_x); _i0++) {
      for (long  _i1 = 0; _i1 < _x_wavefunction_ncomponents; _i1++) {
        if (mod2(_x_wavefunction[_x_wavefunction_index_pointer + _i1]) > _cutoff[_i1]) {
          _temp_error = abs(_x_wavefunction[_x_wavefunction_index_pointer + _i1] - _checkfield[_x_wavefunction_index_pointer + _i1]) / (0.5*abs(_x_wavefunction[_x_wavefunction_index_pointer + _i1]) + 0.5*abs(_checkfield[_x_wavefunction_index_pointer + _i1]));
          
          if (_xmds_isnonfinite(_temp_error)) {
            /* For _temp_error to be NaN, both the absolute value of the higher and lower order solutions
               must BOTH be zero. This therefore implies that their difference is zero, and that there is no error. */
            _temp_error = 0.0;
          }
          
          if (_error < _temp_error) // UNVECTORISABLE
            _error = _temp_error;
          if (_temp_error > _component_errors[_i1])
            _component_errors[_i1] = _temp_error;
        }
      }
    
      _x_wavefunction_index_pointer += _x_wavefunction_ncomponents;
    }
    #undef phi
  }
  if (_error > 1e-06)
    _LOG(_WARNING_LOG_LEVEL, "phi_error: %.1e (cutoff: %.1e)\n",
                             _component_errors[0], _cutoff[0]);
  
  return _error;
}

bool _segment3_x_wavefunction_reset(complex* _reset_to_x_wavefunction)
{
  memcpy(_x_wavefunction, _reset_to_x_wavefunction, sizeof(complex) * _x_wavefunction_alloc_size);
  
  /* return false if there's a NaN somewhere in the vector, otherwise return true */
  bool bNoNaNsPresent = true;
  {
    long _x_wavefunction_index_pointer = 0;
    #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
    for (long _i0 = 0; _i0 < (_lattice_x); _i0++) {
        for (long _i1 = 0; _i1 < _x_wavefunction_ncomponents; _i1++) {
          if (_xmds_isnonfinite(_x_wavefunction[_x_wavefunction_index_pointer + _i1].Re())
            || _xmds_isnonfinite(_x_wavefunction[_x_wavefunction_index_pointer + _i1].Im())) bNoNaNsPresent = false;
        }
    
      _x_wavefunction_index_pointer += _x_wavefunction_ncomponents;
    }
    #undef phi
  }
  return bNoNaNsPresent;
}

// EX transverse derivative operator for field x (not constant)
void _segment3_x_operators_evaluate_operator0()
{
  memcpy(_active_x_segment3_x_operators_operator0_result, _active_x_wavefunction, _x_wavefunction_alloc_size * sizeof(complex));
  complex *__backup_ptr = _active_x_wavefunction;
  ptrdiff_t __backup_basis = _x_wavefunction_basis;
  _active_x_wavefunction = _active_x_segment3_x_operators_operator0_result;
  
  // Transforming vectors to basis (kx)
  _x_wavefunction_basis_transform(0); // (kx)
  
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  long _x_segment3_x_operators_operator0_result_index_pointer = 0;
  #define _T2_phi _active_x_segment3_x_operators_operator0_result[_x_segment3_x_operators_operator0_result_index_pointer + 0]
  #define kx _kx[_index_kx + 0]
  #define dkx (_dkx * (1.0))
  
  for (long _index_kx = 0; _index_kx < _lattice_kx; _index_kx++) {
    complex T2;
    
    
    // ************** Operator code *****************
    #line 126 "gp1d.xmds"
    
    T2 = -0.5*kx*kx;
    
    #line 2048 "xgp1d.cc"
    // **********************************************
    
    // T2[phi]
    _T2_phi = T2 * phi;
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    _x_segment3_x_operators_operator0_result_index_pointer += 1 * _x_segment3_x_operators_operator0_result_ncomponents;
    
  }
  #undef kx
  #undef dkx
  #undef phi
  #undef _T2_phi
  _active_x_wavefunction = __backup_ptr;
  _x_wavefunction_basis = __backup_basis;
  
  _x_segment3_x_operators_operator0_result_basis = 0;
}

void _x_segment3_x_operators_operator0_result_basis_transform(ptrdiff_t new_basis)
{
  if (_x_segment3_x_operators_operator0_result_basis == new_basis)
    return;
  
  if (_x_segment3_x_operators_operator0_result_basis == -1) {
    _LOG(
      _ERROR_LOG_LEVEL,
      "Error: Attempted to transform the vector 'x_segment3_x_operators_operator0_result' to basis %s, but the vector doesn't have a basis specified yet!\n"
      "       Please report this error to xmds-devel@lists.sourceforge.net\n",
      _basis_identifiers[new_basis]
      );
  }
  
  if (_x_segment3_x_operators_operator0_result_basis_map.count(_basis_pair(_x_segment3_x_operators_operator0_result_basis, new_basis)) == 0) {
    _LOG(
      _ERROR_LOG_LEVEL,
      "Error: We should have information about how to do every needed transform, but it seems we don't for this transform.\n"
      "       The transform is for the vector 'x_segment3_x_operators_operator0_result' from basis %s to basis %s.\n",
      _basis_identifiers[_x_segment3_x_operators_operator0_result_basis], _basis_identifiers[new_basis]
    );
  }
  _basis_transform_t &_t = _x_segment3_x_operators_operator0_result_basis_map[_basis_pair(_x_segment3_x_operators_operator0_result_basis, new_basis)];
  if (_t._transform_steps.size() == 0) {
    _LOG(_ERROR_LOG_LEVEL, "Error: It looks like we tried to create plans for this transform, but failed.\n"
                           "       The transform was for the vector 'x_segment3_x_operators_operator0_result' from basis %s to basis %s.\n",
                           _basis_identifiers[_x_segment3_x_operators_operator0_result_basis], _basis_identifiers[new_basis]);
  }
  real *_source_data = reinterpret_cast<real*>(_active_x_segment3_x_operators_operator0_result);
  real *_dest_data = _auxiliary_array;
  for (vector<_transform_step>::iterator _it = _t._transform_steps.begin(); _it != _t._transform_steps.end(); ++_it) {
    _it->_func(_it->_forward, _t._multiplier, _source_data, _dest_data, _it->_prefix_lattice, _it->_postfix_lattice);
    if (_it->_out_of_place) {
      real *_temp = _source_data;
      _source_data = _dest_data;
      _dest_data = _temp;
    }
  }
  _x_segment3_x_operators_operator0_result_basis = new_basis;
}

// Delta A propagation operator for field x
void _segment3_x_operators_evaluate_operator1(real _step)
{
  // Transforming vectors to basis (x)
  _x_wavefunction_basis_transform(1); // (x)
  _x_segment3_x_operators_operator0_result_basis_transform(1); // (x)
  
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  long _x_potential_index_pointer = 0;
  #define V1 _active_x_potential[_x_potential_index_pointer + 0]
  long _x_segment3_x_operators_operator0_result_index_pointer = 0;
  #define _T2_phi _active_x_segment3_x_operators_operator0_result[_x_segment3_x_operators_operator0_result_index_pointer + 0]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    complex dphi_dt;
    
    #define dt _step
    
    // ************* Propagation code ***************
    #line 132 "gp1d.xmds"
    
    dphi_dt = _T2_phi - (V1 + Uint * mod2(phi) )*phi;
    
    #line 2135 "xgp1d.cc"
    // **********************************************
    
    #undef dt
    
    
    _active_x_wavefunction[_x_wavefunction_index_pointer + 0] = dphi_dt * _step;
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    _x_potential_index_pointer += 1 * _x_potential_ncomponents;
    _x_segment3_x_operators_operator0_result_index_pointer += 1 * _x_segment3_x_operators_operator0_result_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef phi
  #undef V1
  #undef _T2_phi
}

// Filter operator
void _segment3__evaluate_operator0()
{
  _x_gradphi_evaluate();
  _dimensionless_normalisation_evaluate();
  // Transforming vectors to basis (x)
  _x_wavefunction_basis_transform(1); // (x)
  
  long _dimensionless_normalisation_index_pointer = 0;
  #define Ncalc _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 0]
  #define EN _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 1]
  #define Ekin _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 2]
  #define Epot _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 3]
  #define Eint _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 4]
  #define Virial _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 5]
  #define mu _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 6]
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    
    // ************** Filter code *****************
    #line 117 "gp1d.xmds"
    
    // Correct normalisation of the wavefunction
    phi *= sqrt(Nparticles/Ncalc);
    
    #line 2184 "xgp1d.cc"
    // **********************************************
    // Increment index pointers for vectors in field x (or having the same dimensions)
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef Ncalc
  #undef EN
  #undef Ekin
  #undef Epot
  #undef Eint
  #undef Virial
  #undef mu
  #undef phi
}

// ********************************************************
//   output function implementations
void _write_output()
{
  _LOG(_SIMULATION_LOG_LEVEL, "Generating output for xgp1d\n");
  
  
  char *_xsilFilename = (char*)malloc(256);
  snprintf(_xsilFilename, 256, "%s.xsil", ("gp1d" + gsArgsAndValues).c_str());
  
  FILE* _outfile = _open_xsil_file(_xsilFilename);
  
  if (_outfile) {
    _write_xsil_header(_outfile);
    char _dataFilename[200];
    snprintf(_dataFilename, 200, "%s.h5", ("gp1d" + gsArgsAndValues).c_str());
    
    H5Fclose(H5Fcreate(_dataFilename, H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT));
  }
  _mg0_write_out(_outfile);
  _mg1_write_out(_outfile);
  _mg2_write_out(_outfile);
  
  _write_xsil_footer(_outfile);
  _close_xsil_file(_outfile);
  free(_xsilFilename);
  _xsilFilename = NULL;
  _outfile = NULL;
  
}


FILE* _open_xsil_file(const char* _filename)
{
  
  FILE* fp = fopen(_filename, "w");
  
  if (fp == NULL)
    // _LOG will cause the simulation to exit
    _LOG(_ERROR_LOG_LEVEL, "Unable to open output file '%s'.\n"
                           "Exiting.\n", _filename);
  
  return fp;
}

void _close_xsil_file(FILE*& fp)
{
  if (fp)
    fclose(fp);
  fp = NULL;
  
}

void _write_xsil_header(FILE* fp)
{
  if (!fp)
    return;
  fprintf(fp, "<?xml version=\"1.0\" ?><simulation xmds-version=\"2\">\n");
  fprintf(fp, "  <name>xgp1d</name>\n");
  fprintf(fp, "  <author>Joe Hope</author>\n");
  fprintf(fp, "  <description>\n");
  fprintf(fp, "    Calculate the ground state of the non-linear Schrodinger equation in a harmonic magnetic trap.\n");
  fprintf(fp, "    This is done by evolving it in imaginary time while re-normalising each timestep.\n");
  fprintf(fp, "    Adapted from xmds2 examples.\n");
  fprintf(fp, "  </description>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <features>\n");
  fprintf(fp, "    <auto_vectorise/>\n");
  fprintf(fp, "    <benchmark/>\n");
  fprintf(fp, "    <diagnostics/>\n");
  fprintf(fp, "    <bing/>\n");
  fprintf(fp, "    <fftw plan=\"exhaustive\"/>\n");
  fprintf(fp, "    <globals>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "        real Uint; // interaction parameter\n");
  fprintf(fp, "        real Nparticles;\n");
  fprintf(fp, "        real omega;\n");
  fprintf(fp, "        real x0; //shift\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </globals>\n");
  fprintf(fp, "    <arguments>\n");
  fprintf(fp, "      <argument default_value=\"0\" name=\"interaction_param\" type=\"real\"/>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "      Uint = interaction_param;\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "      <argument default_value=\"1\" name=\"num_particles\" type=\"real\"/>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "      Nparticles = num_particles;\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "      <argument default_value=\"1\" name=\"freq\" type=\"real\"/>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "      omega = freq;\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "      <argument default_value=\"0\" name=\"shift\" type=\"real\"/>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "      x0 = shift;\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </arguments>\n");
  fprintf(fp, " </features>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <geometry>\n");
  fprintf(fp, "    <propagation_dimension> t </propagation_dimension>\n");
  fprintf(fp, "    <transverse_dimensions>\n");
  fprintf(fp, "      <dimension domain=\"(-10.0, 10.0)\" lattice=\"128\" name=\"x\"/>\n");
  fprintf(fp, "    </transverse_dimensions>\n");
  fprintf(fp, "  </geometry>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <vector initial_basis=\"x\" name=\"potential\" type=\"real\">\n");
  fprintf(fp, "    <components> V1 </components>\n");
  fprintf(fp, "    <initialisation>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "        //V1  = 0.5*x*x;\n");
  fprintf(fp, "        V1  = 0.5 * omega * omega * (x-x0)*(x-x0); // shift and omega\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </initialisation>\n");
  fprintf(fp, "  </vector>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <vector initial_basis=\"x\" name=\"wavefunction\" type=\"complex\">\n");
  fprintf(fp, "    <components> phi </components>\n");
  fprintf(fp, "    <initialisation>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "      phi = 1; //exp(-(x*x)/2);\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </initialisation>\n");
  fprintf(fp, "  </vector>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <computed_vector dimensions=\"x\" name=\"gradphi\" type=\"complex\">\n");
  fprintf(fp, "    <components> dphix </components>\n");
  fprintf(fp, "    <evaluation>\n");
  fprintf(fp, "      <dependencies basis=\"kx\">wavefunction</dependencies>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "        dphix=i*kx*phi;\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </evaluation>\n");
  fprintf(fp, "  </computed_vector>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <computed_vector dimensions=\"\" name=\"normalisation\" type=\"real\">\n");
  fprintf(fp, "    <components>Ncalc EN Ekin Epot Eint Virial mu</components>\n");
  fprintf(fp, "    <evaluation>\n");
  fprintf(fp, "      <dependencies basis=\"x\">wavefunction gradphi potential</dependencies>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "        // Calculate the current normalisation of the wave function.\n");
  fprintf(fp, "        Ncalc = mod2(phi);\n");
  fprintf(fp, "        EN = 0.5*mod2(dphix)+(V1+0.5*Uint*mod2(phi))*mod2(phi);\n");
  fprintf(fp, "        Ekin = 0.5*mod2(dphix);\n");
  fprintf(fp, "        Epot = V1*mod2(phi);\n");
  fprintf(fp, "        Eint = 0.5*Uint*mod2(phi)*mod2(phi);\n");
  fprintf(fp, "                Virial = Ekin - Epot + Eint;\n");
  fprintf(fp, "                mu = Ekin + Epot + (2) * Eint;\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </evaluation>\n");
  fprintf(fp, "  </computed_vector>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <sequence>\n");
  fprintf(fp, "      <filter>\n");
  fprintf(fp, "        <![CDATA[\n");
  fprintf(fp, "          printf(\"Hello world from a filter segment!\\n\");\n");
  fprintf(fp, "        ]]>\n");
  fprintf(fp, "      </filter>\n");
  fprintf(fp, "\n");
  fprintf(fp, "    <filter>\n");
  fprintf(fp, "        <dependencies>normalisation wavefunction</dependencies>\n");
  fprintf(fp, "      <![CDATA[\n");
  fprintf(fp, "        phi *= sqrt(Nparticles/Ncalc);\n");
  fprintf(fp, "      ]]>\n");
  fprintf(fp, "    </filter>\n");
  fprintf(fp, "\n");
  fprintf(fp, "    <integrate algorithm=\"ARK45\" interval=\"20.0\" steps=\"1000\" tolerance=\"1e-6\">\n");
  fprintf(fp, "      <samples>25 25 1</samples>\n");
  fprintf(fp, "      <filters where=\"step end\">\n");
  fprintf(fp, "        <filter>\n");
  fprintf(fp, "          <dependencies>wavefunction normalisation</dependencies>\n");
  fprintf(fp, "          <![CDATA[\n");
  fprintf(fp, "            // Correct normalisation of the wavefunction\n");
  fprintf(fp, "            phi *= sqrt(Nparticles/Ncalc);\n");
  fprintf(fp, "          ]]>\n");
  fprintf(fp, "        </filter>\n");
  fprintf(fp, "      </filters>\n");
  fprintf(fp, "      <operators>\n");
  fprintf(fp, "        <operator dimensions=\"x\" kind=\"ex\">\n");
  fprintf(fp, "          <operator_names>T2</operator_names>\n");
  fprintf(fp, "          <![CDATA[\n");
  fprintf(fp, "            T2 = -0.5*kx*kx;\n");
  fprintf(fp, "          ]]>\n");
  fprintf(fp, "        </operator>\n");
  fprintf(fp, "        <integration_vectors>wavefunction</integration_vectors>\n");
  fprintf(fp, "        <dependencies>potential</dependencies>\n");
  fprintf(fp, "        <![CDATA[\n");
  fprintf(fp, "        dphi_dt = T2[phi] - (V1 + Uint * mod2(phi) )*phi;\n");
  fprintf(fp, "        ]]>\n");
  fprintf(fp, "      </operators>\n");
  fprintf(fp, "    </integrate>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  </sequence>\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <output filename=\"gp1d.xsil\">\n");
  fprintf(fp, "      <sampling_group basis=\"x\" initial_sample=\"yes\">\n");
  fprintf(fp, "        <moments>dens phiR phiI</moments>\n");
  fprintf(fp, "        <dependencies>wavefunction normalisation</dependencies>\n");
  fprintf(fp, "        <![CDATA[\n");
  fprintf(fp, "          dens = mod2(phi);\n");
  fprintf(fp, "          _SAMPLE_COMPLEX(phi);\n");
  fprintf(fp, "        ]]>\n");
  fprintf(fp, "      </sampling_group>\n");
  fprintf(fp, "      <sampling_group basis=\"\" initial_sample=\"yes\">\n");
  fprintf(fp, "        <moments>norm e1 e1kin e1pot e1int vir1 mu1</moments>\n");
  fprintf(fp, "        <dependencies>normalisation</dependencies>\n");
  fprintf(fp, "        <![CDATA[\n");
  fprintf(fp, "          norm = Ncalc;\n");
  fprintf(fp, "          e1 = EN;\n");
  fprintf(fp, "          e1kin = Ekin;\n");
  fprintf(fp, "          e1pot = Epot;\n");
  fprintf(fp, "          e1int = Eint;\n");
  fprintf(fp, "          vir1  = Virial;\n");
  fprintf(fp, "          mu1   = mu;\n");
  fprintf(fp, "        ]]>\n");
  fprintf(fp, "      </sampling_group>\n");
  fprintf(fp, "      <sampling_group basis=\"x\" initial_sample=\"no\">\n");
  fprintf(fp, "        <moments>v1</moments>\n");
  fprintf(fp, "        <dependencies>potential</dependencies>\n");
  fprintf(fp, "        <![CDATA[\n");
  fprintf(fp, "                  v1 = V1;\n");
  fprintf(fp, "        ]]>\n");
  fprintf(fp, "      </sampling_group>\n");
  fprintf(fp, "  </output>\n");
  
  fprintf(fp, "\n<info>\n");
  fprintf(fp, "Script compiled with XMDS2 version 2.2.3 \"It came from the deep\" (r2989)\n");
  fprintf(fp, "See http://www.xmds.org for more information.\n");
  fprintf(fp, "\nVariables that can be specified on the command line:\n");
  
  fprintf(fp, "  Command line argument interaction_param = %e\n", interaction_param);
  
  fprintf(fp, "  Command line argument num_particles = %e\n", num_particles);
  
  fprintf(fp, "  Command line argument freq = %e\n", freq);
  
  fprintf(fp, "  Command line argument shift = %e\n", shift);
  fprintf(fp, "</info>\n");
  
}

// In addition to writing the footer (if 'fp' is not NULL)
// this function closes the fp file pointer.
void _write_xsil_footer(FILE* fp)
{
  if (fp) {
    fprintf(fp, "</simulation>\n");
  }
}

// ********************************************************
//   moment group 0 function implementations
void _mg0_sample()
{
  _x_gradphi_evaluate();
  _dimensionless_normalisation_evaluate();
  
  // Transforming vectors to basis (t, x)
  _x_wavefunction_basis_transform(1); // (x)
  
  long _dimensionless_normalisation_index_pointer = 0;
  #define Ncalc _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 0]
  #define EN _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 1]
  #define Ekin _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 2]
  #define Epot _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 3]
  #define Eint _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 4]
  #define Virial _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 5]
  #define mu _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 6]
  long _x_wavefunction_index_pointer = 0;
  #define phi _active_x_wavefunction[_x_wavefunction_index_pointer + 0]
  long _mg0_output_raw_index_pointer = 0;
  #define dens _active_mg0_output_raw[_mg0_output_raw_index_pointer + 0]
  #define phiR _active_mg0_output_raw[_mg0_output_raw_index_pointer + 1]
  #define phiI _active_mg0_output_raw[_mg0_output_raw_index_pointer + 2]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    // Set index pointers explicitly for (some) vectors
    _mg0_output_raw_index_pointer = ( 0
       + _mg0_output_index_t  * _lattice_x
       + _index_x * 1 ) * _mg0_output_raw_ncomponents;
    #define _SAMPLE_COMPLEX(variable) \
              variable ## R = variable.Re(); variable ## I = variable.Im();
    
    // *************** Sampling code ****************
    #line 144 "gp1d.xmds"
    
    dens = mod2(phi);
    _SAMPLE_COMPLEX(phi);
    
    #line 2494 "xgp1d.cc"
    // **********************************************
    
    #undef _SAMPLE_COMPLEX
    // Increment index pointers for vectors in field mg0_sampling (or having the same dimensions)
    _x_wavefunction_index_pointer += 1 * _x_wavefunction_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef Ncalc
  #undef EN
  #undef Ekin
  #undef Epot
  #undef Eint
  #undef Virial
  #undef mu
  #undef phi
  #undef dens
  #undef phiR
  #undef phiI
  
  _mg0_output_t[0 + _mg0_output_index_t++] = t;
  
  _LOG(_SAMPLE_LOG_LEVEL, "Sampled field (for moment group #1) at t = %e\n", t);
  
}


void _mg0_process()
{
  // No post processing needs to be done
}


void _mg0_write_out(FILE* _outfile)
{
  
  if (_outfile) {
    fprintf(_outfile, "\n");
    fprintf(_outfile, "<XSIL Name=\"moment_group_1\">\n");
    fprintf(_outfile, "  <Param Name=\"n_independent\">2</Param>\n");
    fprintf(_outfile, "  <Array Name=\"variables\" Type=\"Text\">\n");
    fprintf(_outfile, "    <Dim>5</Dim>\n");
    fprintf(_outfile, "    <Stream><Metalink Format=\"Text\" Delimiter=\" \\n\"/>\n");
    fprintf(_outfile, "t x dens phiR phiI \n");
    fprintf(_outfile, "    </Stream>\n");
    fprintf(_outfile, "  </Array>\n");
    fprintf(_outfile, "  <Array Name=\"data\" Type=\"double\">\n");
    fprintf(_outfile, "    <Dim>%i</Dim>\n", _mg0_output_lattice_t);
    fprintf(_outfile, "    <Dim>%i</Dim>\n", _lattice_x);
    fprintf(_outfile, "    <Dim>5</Dim>\n");
  }
  
  
  char _h5Filename[200];
  snprintf(_h5Filename, 200, "%s.h5", ("gp1d" + gsArgsAndValues).c_str());
  
  /* Open the file */
  hid_t hdf5_file = H5Fopen(_h5Filename, H5F_ACC_RDWR, H5P_DEFAULT);
  if (hdf5_file < 0) {
    _LOG(_WARNING_LOG_LEVEL, "Failed to open HDF5 file '%s', will try to create it.", _h5Filename);
    hdf5_file = H5Fcreate(_h5Filename, H5F_ACC_EXCL, H5P_DEFAULT, H5P_DEFAULT);
    if (hdf5_file < 0) {
      _LOG(_ERROR_LOG_LEVEL, "Failed to create HDF5 file '%s'. Bailing.", _h5Filename);
    }
  }
  
  /* Create the group for this data */
  hid_t group;
  if (!H5Lexists(hdf5_file, "/1", H5P_DEFAULT))
    group = H5Gcreate(hdf5_file, "/1", H5P_DEFAULT);
  else
    group = H5Gopen(hdf5_file, "/1");
  
  if (_outfile) {
    fprintf(_outfile, "    <Stream><Metalink Format=\"HDF5\" Type=\"Remote\" Group=\"/1\"/>\n");
    fprintf(_outfile, "%s.h5\n", ("gp1d" + gsArgsAndValues).c_str());
    fprintf(_outfile, "    </Stream>\n");
  }
  
  /* Create the coordinate data sets */
  hsize_t coordinate_length;
  hid_t coordinate_dataspace;
  coordinate_length = _mg0_output_lattice_t;
  coordinate_dataspace = H5Screate_simple(1, &coordinate_length, NULL);
  hid_t dataset_t;
  if (!H5Lexists(hdf5_file, "/1/t", H5P_DEFAULT))
    dataset_t = H5Dcreate(hdf5_file, "/1/t", H5T_NATIVE_REAL, coordinate_dataspace, H5P_DEFAULT);
  else
    dataset_t = H5Dopen(hdf5_file, "/1/t");
  H5Dwrite(dataset_t, H5T_NATIVE_REAL, H5S_ALL, H5S_ALL, H5P_DEFAULT, _mg0_output_t);
  #if defined(HAVE_HDF5_HL)
    H5DSset_scale(dataset_t, "t");
  #endif
  
  H5Sclose(coordinate_dataspace);
  coordinate_length = _lattice_x;
  coordinate_dataspace = H5Screate_simple(1, &coordinate_length, NULL);
  hid_t dataset_x;
  if (!H5Lexists(hdf5_file, "/1/x", H5P_DEFAULT))
    dataset_x = H5Dcreate(hdf5_file, "/1/x", H5T_NATIVE_REAL, coordinate_dataspace, H5P_DEFAULT);
  else
    dataset_x = H5Dopen(hdf5_file, "/1/x");
  H5Dwrite(dataset_x, H5T_NATIVE_REAL, H5S_ALL, H5S_ALL, H5P_DEFAULT, _x);
  #if defined(HAVE_HDF5_HL)
    H5DSset_scale(dataset_x, "x");
  #endif
  
  H5Sclose(coordinate_dataspace);
  
  hsize_t file_dims[] = {_mg0_output_lattice_t, _lattice_x};
  hid_t file_dataspace = H5Screate_simple(2, file_dims, NULL);
  
  hid_t dataset_dens;
  if (!H5Lexists(hdf5_file, "/1/dens", H5P_DEFAULT))
    dataset_dens = H5Dcreate(hdf5_file, "/1/dens", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_dens = H5Dopen(hdf5_file, "/1/dens");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_dens, dataset_t, 0);
    H5DSattach_scale(dataset_dens, dataset_x, 1);
  #endif
  hid_t dataset_phiR;
  if (!H5Lexists(hdf5_file, "/1/phiR", H5P_DEFAULT))
    dataset_phiR = H5Dcreate(hdf5_file, "/1/phiR", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_phiR = H5Dopen(hdf5_file, "/1/phiR");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_phiR, dataset_t, 0);
    H5DSattach_scale(dataset_phiR, dataset_x, 1);
  #endif
  hid_t dataset_phiI;
  if (!H5Lexists(hdf5_file, "/1/phiI", H5P_DEFAULT))
    dataset_phiI = H5Dcreate(hdf5_file, "/1/phiI", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_phiI = H5Dopen(hdf5_file, "/1/phiI");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_phiI, dataset_t, 0);
    H5DSattach_scale(dataset_phiI, dataset_x, 1);
  #endif
  H5Dclose(dataset_t);
  H5Dclose(dataset_x);
  
  
  if ((_mg0_output_lattice_t * _lattice_x)) {
    /* Create the data space */
    hsize_t file_start[2] = {0, 0};
    hsize_t mem_dims[3] = {_mg0_output_lattice_t, _lattice_x, 1};
    hsize_t mem_start[3] = {0, 0, 0};
    hsize_t mem_stride[3] = {1, 1, 1};
    hsize_t mem_count[3] = {_mg0_output_lattice_t, _lattice_x, 1};
    
    
    hid_t mem_dataspace;
    mem_dims[2] = 3;
    mem_dataspace = H5Screate_simple(3, mem_dims, NULL);
    mem_stride[2] = 3;
    
    // Select hyperslabs of memory and file data spaces for data transfer operation
    mem_start[2] = 0;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_dens)
      H5Dwrite(dataset_dens, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg0_output_raw);
    mem_start[2] = 1;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_phiR)
      H5Dwrite(dataset_phiR, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg0_output_raw);
    mem_start[2] = 2;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_phiI)
      H5Dwrite(dataset_phiI, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg0_output_raw);
    
    H5Sclose(mem_dataspace);
  }
  
  
  H5Dclose(dataset_dens);
  H5Dclose(dataset_phiR);
  H5Dclose(dataset_phiI);
  
  H5Sclose(file_dataspace);
  H5Gclose(group);
  H5Fclose(hdf5_file);
  
  
  if (_outfile) {
    fprintf(_outfile, "  </Array>\n");
    fprintf(_outfile, "</XSIL>\n");
  }
}

// ********************************************************
//   field mg0_output function implementations
// initialisation for vector raw
void _mg0_output_raw_initialise()
{
  
  bzero(_active_mg0_output_raw, sizeof(real) * _mg0_output_raw_alloc_size);
}

// ********************************************************
//   moment group 1 function implementations
void _mg1_sample()
{
  _x_gradphi_evaluate();
  _dimensionless_normalisation_evaluate();
  
  long _dimensionless_normalisation_index_pointer = 0;
  #define Ncalc _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 0]
  #define EN _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 1]
  #define Ekin _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 2]
  #define Epot _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 3]
  #define Eint _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 4]
  #define Virial _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 5]
  #define mu _active_dimensionless_normalisation[_dimensionless_normalisation_index_pointer + 6]
  long _mg1_output_raw_index_pointer = 0;
  #define norm _active_mg1_output_raw[_mg1_output_raw_index_pointer + 0]
  #define e1 _active_mg1_output_raw[_mg1_output_raw_index_pointer + 1]
  #define e1kin _active_mg1_output_raw[_mg1_output_raw_index_pointer + 2]
  #define e1pot _active_mg1_output_raw[_mg1_output_raw_index_pointer + 3]
  #define e1int _active_mg1_output_raw[_mg1_output_raw_index_pointer + 4]
  #define vir1 _active_mg1_output_raw[_mg1_output_raw_index_pointer + 5]
  #define mu1 _active_mg1_output_raw[_mg1_output_raw_index_pointer + 6]
  // Set index pointers explicitly for (some) vectors
  _mg1_output_raw_index_pointer = ( 0
     + _mg1_output_index_t  * 1 ) * _mg1_output_raw_ncomponents;
  #define _SAMPLE_COMPLEX(variable) \
            variable ## R = variable.Re(); variable ## I = variable.Im();
  
  // *************** Sampling code ****************
  #line 152 "gp1d.xmds"
  
  norm = Ncalc;
  e1 = EN;
  e1kin = Ekin;
  e1pot = Epot;
  e1int = Eint;
  vir1  = Virial;
  mu1   = mu;
  
  #line 2741 "xgp1d.cc"
  // **********************************************
  
  #undef _SAMPLE_COMPLEX
  #undef Ncalc
  #undef EN
  #undef Ekin
  #undef Epot
  #undef Eint
  #undef Virial
  #undef mu
  #undef norm
  #undef e1
  #undef e1kin
  #undef e1pot
  #undef e1int
  #undef vir1
  #undef mu1
  
  _mg1_output_t[0 + _mg1_output_index_t++] = t;
  
  _LOG(_SAMPLE_LOG_LEVEL, "Sampled field (for moment group #2) at t = %e\n", t);
  
}


void _mg1_process()
{
  // No post processing needs to be done
}


void _mg1_write_out(FILE* _outfile)
{
  
  if (_outfile) {
    fprintf(_outfile, "\n");
    fprintf(_outfile, "<XSIL Name=\"moment_group_2\">\n");
    fprintf(_outfile, "  <Param Name=\"n_independent\">1</Param>\n");
    fprintf(_outfile, "  <Array Name=\"variables\" Type=\"Text\">\n");
    fprintf(_outfile, "    <Dim>8</Dim>\n");
    fprintf(_outfile, "    <Stream><Metalink Format=\"Text\" Delimiter=\" \\n\"/>\n");
    fprintf(_outfile, "t norm e1 e1kin e1pot e1int vir1 mu1 \n");
    fprintf(_outfile, "    </Stream>\n");
    fprintf(_outfile, "  </Array>\n");
    fprintf(_outfile, "  <Array Name=\"data\" Type=\"double\">\n");
    fprintf(_outfile, "    <Dim>%i</Dim>\n", _mg1_output_lattice_t);
    fprintf(_outfile, "    <Dim>8</Dim>\n");
  }
  
  
  char _h5Filename[200];
  snprintf(_h5Filename, 200, "%s.h5", ("gp1d" + gsArgsAndValues).c_str());
  
  /* Open the file */
  hid_t hdf5_file = H5Fopen(_h5Filename, H5F_ACC_RDWR, H5P_DEFAULT);
  if (hdf5_file < 0) {
    _LOG(_WARNING_LOG_LEVEL, "Failed to open HDF5 file '%s', will try to create it.", _h5Filename);
    hdf5_file = H5Fcreate(_h5Filename, H5F_ACC_EXCL, H5P_DEFAULT, H5P_DEFAULT);
    if (hdf5_file < 0) {
      _LOG(_ERROR_LOG_LEVEL, "Failed to create HDF5 file '%s'. Bailing.", _h5Filename);
    }
  }
  
  /* Create the group for this data */
  hid_t group;
  if (!H5Lexists(hdf5_file, "/2", H5P_DEFAULT))
    group = H5Gcreate(hdf5_file, "/2", H5P_DEFAULT);
  else
    group = H5Gopen(hdf5_file, "/2");
  
  if (_outfile) {
    fprintf(_outfile, "    <Stream><Metalink Format=\"HDF5\" Type=\"Remote\" Group=\"/2\"/>\n");
    fprintf(_outfile, "%s.h5\n", ("gp1d" + gsArgsAndValues).c_str());
    fprintf(_outfile, "    </Stream>\n");
  }
  
  /* Create the coordinate data sets */
  hsize_t coordinate_length;
  hid_t coordinate_dataspace;
  coordinate_length = _mg1_output_lattice_t;
  coordinate_dataspace = H5Screate_simple(1, &coordinate_length, NULL);
  hid_t dataset_t;
  if (!H5Lexists(hdf5_file, "/2/t", H5P_DEFAULT))
    dataset_t = H5Dcreate(hdf5_file, "/2/t", H5T_NATIVE_REAL, coordinate_dataspace, H5P_DEFAULT);
  else
    dataset_t = H5Dopen(hdf5_file, "/2/t");
  H5Dwrite(dataset_t, H5T_NATIVE_REAL, H5S_ALL, H5S_ALL, H5P_DEFAULT, _mg1_output_t);
  #if defined(HAVE_HDF5_HL)
    H5DSset_scale(dataset_t, "t");
  #endif
  
  H5Sclose(coordinate_dataspace);
  
  hsize_t file_dims[] = {_mg1_output_lattice_t};
  hid_t file_dataspace = H5Screate_simple(1, file_dims, NULL);
  
  hid_t dataset_norm;
  if (!H5Lexists(hdf5_file, "/2/norm", H5P_DEFAULT))
    dataset_norm = H5Dcreate(hdf5_file, "/2/norm", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_norm = H5Dopen(hdf5_file, "/2/norm");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_norm, dataset_t, 0);
  #endif
  hid_t dataset_e1;
  if (!H5Lexists(hdf5_file, "/2/e1", H5P_DEFAULT))
    dataset_e1 = H5Dcreate(hdf5_file, "/2/e1", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_e1 = H5Dopen(hdf5_file, "/2/e1");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_e1, dataset_t, 0);
  #endif
  hid_t dataset_e1kin;
  if (!H5Lexists(hdf5_file, "/2/e1kin", H5P_DEFAULT))
    dataset_e1kin = H5Dcreate(hdf5_file, "/2/e1kin", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_e1kin = H5Dopen(hdf5_file, "/2/e1kin");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_e1kin, dataset_t, 0);
  #endif
  hid_t dataset_e1pot;
  if (!H5Lexists(hdf5_file, "/2/e1pot", H5P_DEFAULT))
    dataset_e1pot = H5Dcreate(hdf5_file, "/2/e1pot", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_e1pot = H5Dopen(hdf5_file, "/2/e1pot");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_e1pot, dataset_t, 0);
  #endif
  hid_t dataset_e1int;
  if (!H5Lexists(hdf5_file, "/2/e1int", H5P_DEFAULT))
    dataset_e1int = H5Dcreate(hdf5_file, "/2/e1int", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_e1int = H5Dopen(hdf5_file, "/2/e1int");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_e1int, dataset_t, 0);
  #endif
  hid_t dataset_vir1;
  if (!H5Lexists(hdf5_file, "/2/vir1", H5P_DEFAULT))
    dataset_vir1 = H5Dcreate(hdf5_file, "/2/vir1", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_vir1 = H5Dopen(hdf5_file, "/2/vir1");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_vir1, dataset_t, 0);
  #endif
  hid_t dataset_mu1;
  if (!H5Lexists(hdf5_file, "/2/mu1", H5P_DEFAULT))
    dataset_mu1 = H5Dcreate(hdf5_file, "/2/mu1", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_mu1 = H5Dopen(hdf5_file, "/2/mu1");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_mu1, dataset_t, 0);
  #endif
  H5Dclose(dataset_t);
  
  
  if ((_mg1_output_lattice_t)) {
    /* Create the data space */
    hsize_t file_start[1] = {0};
    hsize_t mem_dims[2] = {_mg1_output_lattice_t, 1};
    hsize_t mem_start[2] = {0, 0};
    hsize_t mem_stride[2] = {1, 1};
    hsize_t mem_count[2] = {_mg1_output_lattice_t, 1};
    
    
    hid_t mem_dataspace;
    mem_dims[1] = 7;
    mem_dataspace = H5Screate_simple(2, mem_dims, NULL);
    mem_stride[1] = 7;
    
    // Select hyperslabs of memory and file data spaces for data transfer operation
    mem_start[1] = 0;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_norm)
      H5Dwrite(dataset_norm, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    mem_start[1] = 1;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_e1)
      H5Dwrite(dataset_e1, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    mem_start[1] = 2;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_e1kin)
      H5Dwrite(dataset_e1kin, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    mem_start[1] = 3;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_e1pot)
      H5Dwrite(dataset_e1pot, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    mem_start[1] = 4;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_e1int)
      H5Dwrite(dataset_e1int, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    mem_start[1] = 5;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_vir1)
      H5Dwrite(dataset_vir1, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    mem_start[1] = 6;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_mu1)
      H5Dwrite(dataset_mu1, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg1_output_raw);
    
    H5Sclose(mem_dataspace);
  }
  
  
  H5Dclose(dataset_norm);
  H5Dclose(dataset_e1);
  H5Dclose(dataset_e1kin);
  H5Dclose(dataset_e1pot);
  H5Dclose(dataset_e1int);
  H5Dclose(dataset_vir1);
  H5Dclose(dataset_mu1);
  
  H5Sclose(file_dataspace);
  H5Gclose(group);
  H5Fclose(hdf5_file);
  
  
  if (_outfile) {
    fprintf(_outfile, "  </Array>\n");
    fprintf(_outfile, "</XSIL>\n");
  }
}

// ********************************************************
//   field mg1_output function implementations
// initialisation for vector raw
void _mg1_output_raw_initialise()
{
  
  bzero(_active_mg1_output_raw, sizeof(real) * _mg1_output_raw_alloc_size);
}

// ********************************************************
//   moment group 2 function implementations
void _mg2_sample()
{
  
  long _x_potential_index_pointer = 0;
  #define V1 _active_x_potential[_x_potential_index_pointer + 0]
  long _mg2_output_raw_index_pointer = 0;
  #define v1 _active_mg2_output_raw[_mg2_output_raw_index_pointer + 0]
  #define x _x[_index_x + 0]
  #define dx (_dx * (1.0))
  
  for (long _index_x = 0; _index_x < _lattice_x; _index_x++) {
    #define _SAMPLE_COMPLEX(variable) \
              variable ## R = variable.Re(); variable ## I = variable.Im();
    
    // *************** Sampling code ****************
    #line 165 "gp1d.xmds"
    
    v1 = V1;
    
    #line 3008 "xgp1d.cc"
    // **********************************************
    
    #undef _SAMPLE_COMPLEX
    // Increment index pointers for vectors in field mg2_sampling (or having the same dimensions)
    _x_potential_index_pointer += 1 * _x_potential_ncomponents;
    _mg2_output_raw_index_pointer += 1 * _mg2_output_raw_ncomponents;
    
  }
  #undef x
  #undef dx
  #undef V1
  #undef v1
  
  _LOG(_SAMPLE_LOG_LEVEL, "Sampled field (for moment group #3) at t = %e\n", t);
  
}


void _mg2_process()
{
  // No post processing needs to be done
}


void _mg2_write_out(FILE* _outfile)
{
  
  if (_outfile) {
    fprintf(_outfile, "\n");
    fprintf(_outfile, "<XSIL Name=\"moment_group_3\">\n");
    fprintf(_outfile, "  <Param Name=\"n_independent\">1</Param>\n");
    fprintf(_outfile, "  <Array Name=\"variables\" Type=\"Text\">\n");
    fprintf(_outfile, "    <Dim>2</Dim>\n");
    fprintf(_outfile, "    <Stream><Metalink Format=\"Text\" Delimiter=\" \\n\"/>\n");
    fprintf(_outfile, "x v1 \n");
    fprintf(_outfile, "    </Stream>\n");
    fprintf(_outfile, "  </Array>\n");
    fprintf(_outfile, "  <Array Name=\"data\" Type=\"double\">\n");
    fprintf(_outfile, "    <Dim>%i</Dim>\n", _lattice_x);
    fprintf(_outfile, "    <Dim>2</Dim>\n");
  }
  
  
  char _h5Filename[200];
  snprintf(_h5Filename, 200, "%s.h5", ("gp1d" + gsArgsAndValues).c_str());
  
  /* Open the file */
  hid_t hdf5_file = H5Fopen(_h5Filename, H5F_ACC_RDWR, H5P_DEFAULT);
  if (hdf5_file < 0) {
    _LOG(_WARNING_LOG_LEVEL, "Failed to open HDF5 file '%s', will try to create it.", _h5Filename);
    hdf5_file = H5Fcreate(_h5Filename, H5F_ACC_EXCL, H5P_DEFAULT, H5P_DEFAULT);
    if (hdf5_file < 0) {
      _LOG(_ERROR_LOG_LEVEL, "Failed to create HDF5 file '%s'. Bailing.", _h5Filename);
    }
  }
  
  /* Create the group for this data */
  hid_t group;
  if (!H5Lexists(hdf5_file, "/3", H5P_DEFAULT))
    group = H5Gcreate(hdf5_file, "/3", H5P_DEFAULT);
  else
    group = H5Gopen(hdf5_file, "/3");
  
  if (_outfile) {
    fprintf(_outfile, "    <Stream><Metalink Format=\"HDF5\" Type=\"Remote\" Group=\"/3\"/>\n");
    fprintf(_outfile, "%s.h5\n", ("gp1d" + gsArgsAndValues).c_str());
    fprintf(_outfile, "    </Stream>\n");
  }
  
  /* Create the coordinate data sets */
  hsize_t coordinate_length;
  hid_t coordinate_dataspace;
  coordinate_length = _lattice_x;
  coordinate_dataspace = H5Screate_simple(1, &coordinate_length, NULL);
  hid_t dataset_x;
  if (!H5Lexists(hdf5_file, "/3/x", H5P_DEFAULT))
    dataset_x = H5Dcreate(hdf5_file, "/3/x", H5T_NATIVE_REAL, coordinate_dataspace, H5P_DEFAULT);
  else
    dataset_x = H5Dopen(hdf5_file, "/3/x");
  H5Dwrite(dataset_x, H5T_NATIVE_REAL, H5S_ALL, H5S_ALL, H5P_DEFAULT, _x);
  #if defined(HAVE_HDF5_HL)
    H5DSset_scale(dataset_x, "x");
  #endif
  
  H5Sclose(coordinate_dataspace);
  
  hsize_t file_dims[] = {_lattice_x};
  hid_t file_dataspace = H5Screate_simple(1, file_dims, NULL);
  
  hid_t dataset_v1;
  if (!H5Lexists(hdf5_file, "/3/v1", H5P_DEFAULT))
    dataset_v1 = H5Dcreate(hdf5_file, "/3/v1", H5T_NATIVE_REAL, file_dataspace, H5P_DEFAULT);
  else
    dataset_v1 = H5Dopen(hdf5_file, "/3/v1");
  #if defined(HAVE_HDF5_HL)
    H5DSattach_scale(dataset_v1, dataset_x, 0);
  #endif
  H5Dclose(dataset_x);
  
  
  if ((_lattice_x)) {
    /* Create the data space */
    hsize_t file_start[1] = {0};
    hsize_t mem_dims[2] = {_lattice_x, 1};
    hsize_t mem_start[2] = {0, 0};
    hsize_t mem_stride[2] = {1, 1};
    hsize_t mem_count[2] = {_lattice_x, 1};
    
    
    hid_t mem_dataspace;
    mem_dims[1] = 1;
    mem_dataspace = H5Screate_simple(2, mem_dims, NULL);
    mem_stride[1] = 1;
    
    // Select hyperslabs of memory and file data spaces for data transfer operation
    mem_start[1] = 0;
    H5Sselect_hyperslab(mem_dataspace, H5S_SELECT_SET, mem_start, mem_stride, mem_count, NULL);
    H5Sselect_hyperslab(file_dataspace, H5S_SELECT_SET, file_start, mem_stride, mem_count, NULL);
    
    if (dataset_v1)
      H5Dwrite(dataset_v1, H5T_NATIVE_REAL, mem_dataspace, file_dataspace, H5P_DEFAULT, _active_mg2_output_raw);
    
    H5Sclose(mem_dataspace);
  }
  
  
  H5Dclose(dataset_v1);
  
  H5Sclose(file_dataspace);
  H5Gclose(group);
  H5Fclose(hdf5_file);
  
  
  if (_outfile) {
    fprintf(_outfile, "  </Array>\n");
    fprintf(_outfile, "</XSIL>\n");
  }
}

// ********************************************************
//   field mg2_output function implementations
// initialisation for vector raw
void _mg2_output_raw_initialise()
{
  
  bzero(_active_mg2_output_raw, sizeof(real) * _mg2_output_raw_alloc_size);
}

