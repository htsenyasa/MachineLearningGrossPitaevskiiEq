<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <name>xgp1d</name>
  <author>Joe Hope</author>
  <description>
    Calculate the ground state of the non-linear Schrodinger equation in a harmonic magnetic trap.
    This is done by evolving it in imaginary time while re-normalising each timestep.
    Adapted from xmds2 examples.
  </description>

  <features>
    <auto_vectorise />
    <benchmark />
    <diagnostics />
    <bing />
    <fftw plan="exhaustive" />
    <globals>
      <![CDATA[
        real Uint; // interaction parameter
        real Nparticles;
        real omega;
        real x0; //shift
        int pt_type; //type of potential
        real l_w, r_w; //left, right well
        real lm_1, lm_2, mu_1, mu_2, s_1, s_2; //params of double inverted gaussian distribution
      ]]>
    </globals>
    <arguments>
      <argument name="interaction_param" type="real" default_value="0"/>
      <![CDATA[
      Uint = interaction_param;
      ]]>
      <argument name="num_particles" type="real" default_value="1"/>
      <![CDATA[
      Nparticles = num_particles;
      ]]>
      <argument name="freq" type="real" default_value="1"/>
      <![CDATA[
      omega = freq;
      ]]>
      <argument name="shift" type="real" default_value="0"/>
      <![CDATA[
      x0 = shift;
      ]]>
      <argument name="pot_type" type="real" default_value="0"/>
      <![CDATA[
      pt_type = pot_type;
      ]]>
      <argument name="lw" type="real" default_value="-5"/>
      <![CDATA[
      l_w = lw;
      ]]>
      <argument name="rw" type="real" default_value="5"/>
      <![CDATA[
      r_w = rw;
      ]]>
      <argument name="lam1" type="real" default_value="0"/>
      <![CDATA[
      lm_1 = lam1;
      ]]>
      <argument name="lam2" type="real" default_value="0"/>
      <![CDATA[
      lm_2 = lam2;
      ]]>
      <argument name="mu1" type="real" default_value="0"/>
      <![CDATA[
      mu_1 = mu1;
      ]]>
      <argument name="mu2" type="real" default_value="0"/>
      <![CDATA[
      mu_2 = mu2;
      ]]>
      <argument name="s1" type="real" default_value="0"/>
      <![CDATA[
      s_1 = s1;
      ]]>
      <argument name="s2" type="real" default_value="0"/>
      <![CDATA[
      s_2 = s2;
      ]]>
    </arguments>
 </features>

  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="x" lattice="128"  domain="(-10.0, 10.0)" />
    </transverse_dimensions>
  </geometry>

  <vector name="potential" initial_basis="x" type="real">
    <components> V1 </components>
    <initialisation>
      <![CDATA[
      switch(pt_type){
        case 0: V1  = 0.5 * omega * omega * (x-x0)*(x-x0); break;
        case 1: V1 = (!((lw < x) && (x < rw)) * 100.0); break;
        case 2: V1 = -lm_1 * exp(-pow((x-mu_1),2) / pow(s_1, 2)) - lm_2 * exp(-pow((x-mu_2), 2) / pow(s_2,2)); break;
      }
      ]]>
    </initialisation>
  </vector>

  <vector name="wavefunction" initial_basis="x" type="complex">
    <components> phi </components>
    <initialisation>
      <![CDATA[
      phi = 1; //exp(-(x*x)/2);
      ]]>
    </initialisation>
  </vector>

  <computed_vector name="gradphi" dimensions="x" type="complex">
    <components> dphix </components>
    <evaluation>
      <dependencies basis="kx">wavefunction</dependencies>
      <![CDATA[
        dphix=i*kx*phi;
      ]]>
    </evaluation>
  </computed_vector>

  <computed_vector name="normalisation" dimensions="" type="real">
    <components>Ncalc EN Ekin Epot Eint Virial mu</components>
    <evaluation>
      <dependencies basis="x">wavefunction gradphi potential</dependencies>
      <![CDATA[
        // Calculate the current normalisation of the wave function.
        Ncalc = mod2(phi);
        EN = 0.5*mod2(dphix)+(V1+0.5*Uint*mod2(phi))*mod2(phi);
        Ekin = 0.5*mod2(dphix);
        Epot = V1*mod2(phi);
        Eint = 0.5*Uint*mod2(phi)*mod2(phi);
		Virial = Ekin - Epot + Eint;
		mu = Ekin + Epot + (2) * Eint;
      ]]>
    </evaluation>
  </computed_vector>

  <sequence>
      <filter>
        <![CDATA[
          printf("Hello world from a filter segment!\n");
        ]]>
      </filter>

    <filter>
        <dependencies>normalisation wavefunction</dependencies>
      <![CDATA[
        phi *= sqrt(Nparticles/Ncalc);
      ]]>
    </filter>

    <integrate algorithm="ARK45" interval="20.0" steps="1000" tolerance="1e-6">
      <samples>25 25 1</samples>
      <filters where="step end">
        <filter>
          <dependencies>wavefunction normalisation</dependencies>
          <![CDATA[
            // Correct normalisation of the wavefunction
            phi *= sqrt(Nparticles/Ncalc);
          ]]>
        </filter>
      </filters>
      <operators>
        <operator kind="ex" dimensions="x">
          <operator_names>T2</operator_names>
          <![CDATA[
            T2 = -0.5*kx*kx;
          ]]>
        </operator>
        <integration_vectors>wavefunction</integration_vectors>
        <dependencies>potential</dependencies>
        <![CDATA[
        dphi_dt = T2[phi] - (V1 + Uint * mod2(phi) )*phi;
        ]]>
      </operators>
    </integrate>

  </sequence>

  <output filename="gp1d.xsil">
      <sampling_group basis="x" initial_sample="yes">
        <moments>dens phiR phiI</moments>
        <dependencies>wavefunction normalisation</dependencies>
        <![CDATA[
          dens = mod2(phi);
          _SAMPLE_COMPLEX(phi);
        ]]>
      </sampling_group>
      <sampling_group basis="" initial_sample="yes">
        <moments>norm e1 e1kin e1pot e1int vir1 mu1</moments>
        <dependencies>normalisation</dependencies>
        <![CDATA[
          norm = Ncalc;
	  e1 = EN;
	  e1kin = Ekin;
	  e1pot = Epot;
	  e1int = Eint;
	  vir1  = Virial;
	  mu1   = mu;
        ]]>
      </sampling_group>
      <sampling_group basis="x" initial_sample="no">
        <moments>v1</moments>
        <dependencies>potential</dependencies>
        <![CDATA[
		  v1 = V1;
        ]]>
      </sampling_group>
  </output>
</simulation>
