#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import builtins as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Segments.Integrators._RichardsonFixedStep import _RichardsonFixedStep

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.431613
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Segments/Integrators/RichardsonFixedStep.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 21 19:01:19 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class RichardsonFixedStep(_RichardsonFixedStep):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(RichardsonFixedStep, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in list(KWs.items()):
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: segment $segmentNumber ($stepper.name fixed-step, fixed-order integrator with Richardson Extrapolation) at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''segment ''')
        _v = VFFSL(SL,"segmentNumber",True) # u'$segmentNumber' on line 24, col 27
        if _v is not None: write(_filter(_v, rawExpr='$segmentNumber')) # from line 24, col 27.
        write(''' (''')
        _v = VFFSL(SL,"stepper.name",True) # u'$stepper.name' on line 24, col 43
        if _v is not None: write(_filter(_v, rawExpr='$stepper.name')) # from line 24, col 43.
        write(''' fixed-step, fixed-order integrator with Richardson Extrapolation)''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def localInitialise(self, **KWS):



        ## CHEETAH: generated from @def localInitialise at line 32, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(RichardsonFixedStep, self).localInitialise()
        if _v is not None: write(_filter(_v))
        # 
        write('''
''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 37, col 3
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 38, col 1
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 38, col 1.
            write('''* _T0_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 38, col 21
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 38, col 21.
            write('''[''')
            _v = VFFSL(SL,"extrapolations",True) # u'$extrapolations' on line 38, col 34
            if _v is not None: write(_filter(_v, rawExpr='$extrapolations')) # from line 38, col 34.
            write('''];
''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 39, col 1
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 39, col 1.
            write('''* _T1_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 39, col 21
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 39, col 21.
            write('''[''')
            _v = VFFSL(SL,"extrapolations",True) # u'$extrapolations' on line 39, col 34
            if _v is not None: write(_filter(_v, rawExpr='$extrapolations')) # from line 39, col 34.
            write('''];

''')
            for i in range(0, VFFSL(SL,"extrapolations",True)): # generated from line 41, col 3
                write('''_T0_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 42, col 5
                if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 42, col 5.
                write('''[''')
                _v = VFFSL(SL,"i",True) # u'$i' on line 42, col 18
                if _v is not None: write(_filter(_v, rawExpr='$i')) # from line 42, col 18.
                write('''] = _rerow_T0_''')
                _v = VFFSL(SL,"i",True) # u'${i}' on line 42, col 34
                if _v is not None: write(_filter(_v, rawExpr='${i}')) # from line 42, col 34.
                write('''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 42, col 39
                if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 42, col 39.
                write(''';
_T1_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 43, col 5
                if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 43, col 5.
                write('''[''')
                _v = VFFSL(SL,"i",True) # u'$i' on line 43, col 18
                if _v is not None: write(_filter(_v, rawExpr='$i')) # from line 43, col 18.
                write('''] = _rerow_T1_''')
                _v = VFFSL(SL,"i",True) # u'${i}' on line 43, col 34
                if _v is not None: write(_filter(_v, rawExpr='${i}')) # from line 43, col 34.
                write('''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 43, col 39
                if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 43, col 39.
                write(''';
''')
            write('''
''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 46, col 1
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 46, col 1.
            write('''** _Tprev_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 46, col 25
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 46, col 25.
            write(''' = _T0_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 46, col 44
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 46, col 44.
            write(''';
''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 47, col 1
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 47, col 1.
            write('''** _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 47, col 25
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 47, col 25.
            write(''' = _T1_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 47, col 44
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 47, col 44.
            write(''';
''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 48, col 1
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 48, col 1.
            write('''* _result_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 48, col 25
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 48, col 25.
            write(''';

''')
        write('''
''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_re_reset') # u"${copyVectors($integrationVectors, '_re_reset')}" on line 52, col 1
        if _v is not None: write(_filter(_v, rawExpr="${copyVectors($integrationVectors, '_re_reset')}")) # from line 52, col 1.
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def functionPrototypes(self, **KWS):



        ## CHEETAH: generated from @def functionPrototypes at line 59, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(RichardsonFixedStep, self).functionPrototypes()
        if _v is not None: write(_filter(_v))
        # 
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 63, col 3
            write('''void _segment''')
            _v = VFFSL(SL,"segmentNumber",True) # u'${segmentNumber}' on line 64, col 14
            if _v is not None: write(_filter(_v, rawExpr='${segmentNumber}')) # from line 64, col 14.
            write('''_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 64, col 31
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 64, col 31.
            write('''_reset(''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 64, col 50
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 64, col 50.
            write('''* _reset_to);
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def segmentFunctionBody(self, function, **KWS):



        ## CHEETAH: generated from @def segmentFunctionBody($function) @* Overrides segmentFunctionBody of FixedStep *@ at line 69, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"createStepVariable",True) # u'${createStepVariable}' on line 71, col 1
        if _v is not None: write(_filter(_v, rawExpr='${createStepVariable}')) # from line 71, col 1.
        # 
        featureOrderingOuter = ['Stochastic']
        _v = VFFSL(SL,"insertCodeForFeatures",False)('integrateFixedStepBegin', featureOrderingOuter) # u"${insertCodeForFeatures('integrateFixedStepBegin', featureOrderingOuter)}" on line 74, col 1
        if _v is not None: write(_filter(_v, rawExpr="${insertCodeForFeatures('integrateFixedStepBegin', featureOrderingOuter)}")) # from line 74, col 1.
        write('''
''')
        _v = VFFSL(SL,"allocate",True) # u'${allocate}' on line 76, col 1
        if _v is not None: write(_filter(_v, rawExpr='${allocate}')) # from line 76, col 1.
        _v = VFFSL(SL,"initialise",True) # u'${initialise}' on line 77, col 1
        if _v is not None: write(_filter(_v, rawExpr='${initialise}')) # from line 77, col 1.
        _v = VFFSL(SL,"localInitialise",True) # u'${localInitialise}' on line 78, col 1
        if _v is not None: write(_filter(_v, rawExpr='${localInitialise}')) # from line 78, col 1.
        write('''
for (long _istep = 0; _istep < ''')
        _v = VFFSL(SL,"stepCount",True) # u'${stepCount}' on line 80, col 32
        if _v is not None: write(_filter(_v, rawExpr='${stepCount}')) # from line 80, col 32.
        write('''; _istep++) {
''')
        #  Insert code for features
        featureOrderingInner = ['Output', 'ErrorCheck', 'Stochastic']
        # 
        dict = {'extraIndent': 0}
        write('''  ''')
        _v = VFFSL(SL,"insertCodeForFeatures",False)('integrateFixedStepInnerLoopBegin', featureOrderingInner, dict) # u"${insertCodeForFeatures('integrateFixedStepInnerLoopBegin', featureOrderingInner, dict), autoIndent=True}" on line 85, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${insertCodeForFeatures('integrateFixedStepInnerLoopBegin', featureOrderingInner, dict), autoIndent=True}")) # from line 85, col 3.
        extraIndent = VFFSL(SL,"dict.extraIndent",True)
        write('''  
  ''')
        _v = VFFSL(SL,"preSingleStep",True) # u'${preSingleStep, autoIndent=True, extraIndent=extraIndent}' on line 88, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, extraIndent=extraIndent, rawExpr='${preSingleStep, autoIndent=True, extraIndent=extraIndent}')) # from line 88, col 3.
        write('''  ''')
        _v = VFFSL(SL,"richardsonExtrapolate",False)(function) # u'${richardsonExtrapolate(function), autoIndent=True, extraIndent=extraIndent}' on line 89, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, extraIndent=extraIndent, rawExpr='${richardsonExtrapolate(function), autoIndent=True, extraIndent=extraIndent}')) # from line 89, col 3.
        write('''  ''')
        _v = VFFSL(SL,"postSingleStep",True) # u'${postSingleStep, autoIndent=True, extraIndent=extraIndent}' on line 90, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, extraIndent=extraIndent, rawExpr='${postSingleStep, autoIndent=True, extraIndent=extraIndent}')) # from line 90, col 3.
        write('''  
''')
        if VFFSL(SL,"cross",True): # generated from line 92, col 3
            #  If we are cross-integrating, then we now need to copy our result back
            #  into the original arrays for the integration vectors
            write('''  ''')
            _v = VFFSL(SL,"copyResultIntoIntegrationArrays",True) # u'${copyResultIntoIntegrationArrays, autoIndent=True, extraIndent=extraIndent}' on line 95, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, extraIndent=extraIndent, rawExpr='${copyResultIntoIntegrationArrays, autoIndent=True, extraIndent=extraIndent}')) # from line 95, col 3.
            write('''  
''')
        # 
        write('''  ''')
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('integrateFixedStepInnerLoopEnd', featureOrderingInner, dict) # u"${insertCodeForFeaturesInReverseOrder('integrateFixedStepInnerLoopEnd', featureOrderingInner, dict), autoIndent=True}" on line 99, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${insertCodeForFeaturesInReverseOrder('integrateFixedStepInnerLoopEnd', featureOrderingInner, dict), autoIndent=True}")) # from line 99, col 3.
        write('''}

''')
        _v = VFFSL(SL,"localFinalise",True) # u'${localFinalise}' on line 102, col 1
        if _v is not None: write(_filter(_v, rawExpr='${localFinalise}')) # from line 102, col 1.
        _v = VFFSL(SL,"finalise",True) # u'${finalise}' on line 103, col 1
        if _v is not None: write(_filter(_v, rawExpr='${finalise}')) # from line 103, col 1.
        _v = VFFSL(SL,"free",True) # u'${free}' on line 104, col 1
        if _v is not None: write(_filter(_v, rawExpr='${free}')) # from line 104, col 1.
        write('''
''')
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('integrateFixedStepEnd', featureOrderingOuter) # u"${insertCodeForFeaturesInReverseOrder('integrateFixedStepEnd', featureOrderingOuter)}" on line 106, col 1
        if _v is not None: write(_filter(_v, rawExpr="${insertCodeForFeaturesInReverseOrder('integrateFixedStepEnd', featureOrderingOuter)}")) # from line 106, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def richardsonExtrapolate(self, function, **KWS):



        ## CHEETAH: generated from @def richardsonExtrapolate($function) at line 110, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write('''long _k = 0;
long _max_integration_steps = 0;

long _istep_temp = _istep;
real _step_temp = _step;
real _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 117, col 7
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 117, col 7.
        write('''_temp = ''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 117, col 38
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 117, col 38.
        write(''';

for (_k = 0; _k < ''')
        _v = VFFSL(SL,"extrapolations",True) # u'$extrapolations' on line 119, col 19
        if _v is not None: write(_filter(_v, rawExpr='$extrapolations')) # from line 119, col 19.
        write('''; _k++)
{
  // Swap active rows
  {
''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 123, col 3
            write('''    ''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 124, col 5
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 124, col 5.
            write('''** _temp_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 124, col 28
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 124, col 28.
            write(''' = _Tprev_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 124, col 50
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 124, col 50.
            write(''';
    _Tprev_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 125, col 12
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 125, col 12.
            write(''' = _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 125, col 34
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 125, col 34.
            write(''';
    _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 126, col 12
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 126, col 12.
            write(''' = _temp_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 126, col 33
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 126, col 33.
            write(''';
''')
        write('''  }
  
  long _nk = 2 * (_k + 1);
  _max_integration_steps = _nk;
  
  _step = _step_temp / _nk;
  
  ''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 135, col 3
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 135, col 3.
        write(''' = _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 135, col 30
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 135, col 30.
        write('''_temp;
  
  for (_istep = 0; _istep < _nk; _istep++) {
    ''')
        _v = VFN(VFFSL(SL,"stepper",True),"singleIntegrationStep",False)(function) # u'${stepper.singleIntegrationStep(function), autoIndent=True}' on line 138, col 5
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr='${stepper.singleIntegrationStep(function), autoIndent=True}')) # from line 138, col 5.
        write('''  }
  _istep = _istep_temp;
  _step = _step_temp;
  
''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 143, col 3
            write('''  _result_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 144, col 11
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 144, col 11.
            write(''' = _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 144, col 33
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 144, col 33.
            write('''[0];
''')
        write('''  
  ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_result', '_active') # u"${copyVectors($integrationVectors, '_result', '_active'), autoIndent=True}" on line 147, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${copyVectors($integrationVectors, '_result', '_active'), autoIndent=True}")) # from line 147, col 3.
        write('''  
  for (long _j = 0; _j < _k; _j++)
  {
    real _nksubj = 2 * (_k - _j);
    real _denominator = pow(((real)_nk) / _nksubj, 2) - 1.0;
    
''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 154, col 5
            write('''    ''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 155, col 5
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 155, col 5.
            write('''* const _TcurrJPlusOne_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 155, col 42
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 155, col 42.
            write(''' = _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 155, col 64
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 155, col 64.
            write('''[_j+1];
    ''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 156, col 5
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 156, col 5.
            write('''* const _TcurrJ_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 156, col 35
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 156, col 35.
            write(''' = _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 156, col 57
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 156, col 57.
            write('''[_j];
    ''')
            _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 157, col 5
            if _v is not None: write(_filter(_v, rawExpr='${vector.type}')) # from line 157, col 5.
            write('''* const _TprevJ_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 157, col 35
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 157, col 35.
            write(''' = _Tprev_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 157, col 57
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 157, col 57.
            write('''[_j];
''')
        write('''    
    ''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True),
"""_TcurrJPlusOne_${vector.id}[$index] = _TcurrJ_${vector.id}[$index] + (_TcurrJ_${vector.id}[$index] - _TprevJ_${vector.id}[$index]) / _denominator;
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr='${loopOverVectorsWithInnerContentTemplate($integrationVectors,\n"""_TcurrJPlusOne_${vector.id}[$index] = _TcurrJ_${vector.id}[$index] + (_TcurrJ_${vector.id}[$index] - _TprevJ_${vector.id}[$index]) / _denominator;\n""", basis = $homeBasis), autoIndent=True}')) # from line 160, col 5.
        write('''  }
  
  // Reset
  ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_active', '_re_reset') # u"${copyVectors($integrationVectors, '_active', '_re_reset'), autoIndent=True}" on line 166, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${copyVectors($integrationVectors, '_active', '_re_reset'), autoIndent=True}")) # from line 166, col 3.
        write('''}

''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 169, col 3
            write('''_result_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 170, col 9
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 170, col 9.
            write(''' = _Tcurr_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 170, col 31
            if _v is not None: write(_filter(_v, rawExpr='${vector.id}')) # from line 170, col 31.
            write('''[_k-1];
''')
        write('''
''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_active', '_result') # u"${copyVectors($integrationVectors, '_active', '_result')}" on line 173, col 1
        if _v is not None: write(_filter(_v, rawExpr="${copyVectors($integrationVectors, '_active', '_result')}")) # from line 173, col 1.
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_re_reset', '_active') # u"${copyVectors($integrationVectors, '_re_reset', '_active')}" on line 174, col 1
        if _v is not None: write(_filter(_v, rawExpr="${copyVectors($integrationVectors, '_re_reset', '_active')}")) # from line 174, col 1.
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 175, col 1
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 175, col 1.
        write(''' = _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 175, col 28
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 175, col 28.
        write('''_temp + _step;

''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # RichardsonFixedStep.tmpl
        # 
        # Created by Sean Wild on 2013-10-10.
        # 
        # Copyright (c) 2007-2013, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write('''



                                      

''')
        # 
        #   Function prototypes
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    extrapolations = 4

    supportsConstantIPOperators = False

    maxIntegrationStepsVar = '_max_integration_steps'

    _mainCheetahMethod_for_RichardsonFixedStep= 'writeBody'

## END CLASS DEFINITION

if not hasattr(RichardsonFixedStep, '_initCheetahAttributes'):
    templateAPIClass = getattr(RichardsonFixedStep, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(RichardsonFixedStep)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=RichardsonFixedStep()).run()


