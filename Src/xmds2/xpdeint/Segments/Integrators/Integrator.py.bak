#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Segments.Integrators._Integrator import _Integrator
from xpdeint.CallOnceGuards import callOncePerInstanceGuard

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.240465
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Segments/Integrators/Integrator.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Feb  4 18:39:07 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Integrator(_Integrator):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Integrator, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: segment $segmentNumber ($stepper.name Integrator) at line 25, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''segment ''')
        _v = VFFSL(SL,"segmentNumber",True) # u'$segmentNumber' on line 25, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'$segmentNumber')) # from line 25, col 27.
        write(u''' (''')
        _v = VFFSL(SL,"stepper.name",True) # u'$stepper.name' on line 25, col 43
        if _v is not None: write(_filter(_v, rawExpr=u'$stepper.name')) # from line 25, col 43.
        write(u''' Integrator)''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def globals(self, **KWS):



        ## CHEETAH: generated from @def globals at line 27, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(Integrator, self).globals()
        if _v is not None: write(_filter(_v))
        # 
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 31, col 3
            #  Loop over the variables that need to be created
            for arrayName in VFFSL(SL,"extraIntegrationArrayNames",True): # generated from line 33, col 5
                _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 34, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.type}')) # from line 34, col 1.
                write(u'''* _''')
                _v = VFFSL(SL,"name",True) # u'${name}' on line 34, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 34, col 18.
                write(u'''_''')
                _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 34, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 34, col 26.
                write(u'''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 34, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 34, col 39.
                write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def deltaAFunctionBody(self, function, **KWS):



        ## CHEETAH: generated from @def deltaAFunctionBody($function) at line 40, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #  First evaluate any computed vector that any of our operators may depend on
        _v = VFFSL(SL,"evaluateComputedVectors",False)(VFFSL(SL,"dynamicVectorsNeedingPrecalculationForOperatorContainers",False)(VFFSL(SL,"intraStepOperatorContainers",True)), static = False) # u'${evaluateComputedVectors($dynamicVectorsNeedingPrecalculationForOperatorContainers($intraStepOperatorContainers), static = False)}' on line 43, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${evaluateComputedVectors($dynamicVectorsNeedingPrecalculationForOperatorContainers($intraStepOperatorContainers), static = False)}')) # from line 43, col 1.
        # 
        #  Then loop over operators that come before the delta A operators in the order in which
        #  they appear in the xmds script.
        # 
        for operatorContainer in VFFSL(SL,"intraStepOperatorContainers",True): # generated from line 48, col 3
            write(u'''
''')
            _v = VFN(VFFSL(SL,"operatorContainer",True),"evaluatePreDeltaAOperators",False)(parentFunction = function) # u'${operatorContainer.evaluatePreDeltaAOperators(parentFunction = function)}' on line 50, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${operatorContainer.evaluatePreDeltaAOperators(parentFunction = function)}')) # from line 50, col 1.
        # 
        #  Now loop over delta A operators
        #  See the comment in _Integrator about why this needs to be done in
        #  this particular order
        for operatorContainer in VFFSL(SL,"intraStepOperatorContainersInFieldDescendingOrder",True): # generated from line 56, col 3
            #  Blank line for formatting
            write(u'''
''')
            _v = VFN(VFFSL(SL,"operatorContainer",True),"evaluateDeltaAOperator",False)(parentFunction = function) # u'${operatorContainer.evaluateDeltaAOperator(parentFunction = function)}' on line 59, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${operatorContainer.evaluateDeltaAOperator(parentFunction = function)}')) # from line 59, col 1.
        # 
        #  Lastly, loop over the operators that come after the delta a operators in the order in
        #  which they appear in the xmds script.
        # 
        for operatorContainer in VFFSL(SL,"intraStepOperatorContainers",True): # generated from line 65, col 3
            #  Blank line for formatting
            write(u'''
''')
            _v = VFN(VFFSL(SL,"operatorContainer",True),"evaluatePostDeltaAOperators",False)(parentFunction = function) # u'${operatorContainer.evaluatePostDeltaAOperators(parentFunction = function)}' on line 68, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${operatorContainer.evaluatePostDeltaAOperators(parentFunction = function)}')) # from line 68, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def preSingleStep(self, **KWS):



        ## CHEETAH: generated from @def preSingleStep at line 73, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"evaluateComputedVectors",False)(VFFSL(SL,"dynamicVectorsNeedingPrecalculationForOperatorContainers",False)(VFFSL(SL,"stepStartOperatorContainers",True))) # u'${evaluateComputedVectors($dynamicVectorsNeedingPrecalculationForOperatorContainers($stepStartOperatorContainers))}' on line 75, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${evaluateComputedVectors($dynamicVectorsNeedingPrecalculationForOperatorContainers($stepStartOperatorContainers))}')) # from line 75, col 1.
        # 
        for operatorContainer in VFFSL(SL,"stepStartOperatorContainers",True): # generated from line 77, col 3
            write(u'''
''')
            _v = VFN(VFFSL(SL,"operatorContainer",True),"evaluateOperators",False)(_step = '_step') # u"${operatorContainer.evaluateOperators(_step = '_step')}" on line 79, col 1
            if _v is not None: write(_filter(_v, rawExpr=u"${operatorContainer.evaluateOperators(_step = '_step')}")) # from line 79, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def postSingleStep(self, **KWS):



        ## CHEETAH: generated from @def postSingleStep at line 84, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        featureOrdering = ['HaltNonFinite']
        # 
        _v = VFFSL(SL,"insertCodeForFeatures",False)('postSingleStep', featureOrdering) # u"${insertCodeForFeatures('postSingleStep', featureOrdering)}" on line 88, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeatures('postSingleStep', featureOrdering)}")) # from line 88, col 1.
        # 
        _v = VFFSL(SL,"evaluateComputedVectors",False)(VFFSL(SL,"dynamicVectorsNeedingPrecalculationForOperatorContainers",False)(VFFSL(SL,"stepEndOperatorContainers",True))) # u'${evaluateComputedVectors($dynamicVectorsNeedingPrecalculationForOperatorContainers($stepEndOperatorContainers))}' on line 90, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${evaluateComputedVectors($dynamicVectorsNeedingPrecalculationForOperatorContainers($stepEndOperatorContainers))}')) # from line 90, col 1.
        # 
        for operatorContainer in VFFSL(SL,"stepEndOperatorContainers",True): # generated from line 92, col 3
            write(u'''
''')
            _v = VFN(VFFSL(SL,"operatorContainer",True),"evaluateOperators",False)(_step = '_step') # u"${operatorContainer.evaluateOperators(_step = '_step')}" on line 94, col 1
            if _v is not None: write(_filter(_v, rawExpr=u"${operatorContainer.evaluateOperators(_step = '_step')}")) # from line 94, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @callOncePerInstanceGuard
    def allocate(self, **KWS):


        """
        Allocate additional arrays needed for the integrator
        
        This is a call once-per-instance function because we may want to do the initialisation
        (and clean-up) for this segment in a parent segment for efficiency reasons (if, for
        example we are looping over this segment, or we are running multiple paths).
        """

        ## CHEETAH: generated from @def allocate at line 100, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(Integrator, self).allocate()
        if _v is not None: write(_filter(_v))
        # 
        #  Loop over the vectors creating the arrays
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 112, col 3
            #  Loop over the variables that need to be created
            for arrayName in VFFSL(SL,"extraIntegrationArrayNames",True): # generated from line 114, col 5
                write(u'''_''')
                _v = VFFSL(SL,"name",True) # u'${name}' on line 115, col 2
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 115, col 2.
                write(u'''_''')
                _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 115, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 115, col 10.
                write(u'''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 115, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 115, col 23.
                write(u''' = ''')
                write(u'''(''')
                _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 116, col 2
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.type}')) # from line 116, col 2.
                write(u'''*) xmds_malloc(sizeof(''')
                _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 116, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.type}')) # from line 116, col 38.
                write(u''') * MAX(''')
                _v = VFFSL(SL,"vector.allocSize",True) # u'${vector.allocSize}' on line 116, col 60
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.allocSize}')) # from line 116, col 60.
                write(u''',1));
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @callOncePerInstanceGuard
    def free(self, **KWS):



        ## CHEETAH: generated from @def free at line 123, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(Integrator, self).free()
        if _v is not None: write(_filter(_v))
        # 
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 127, col 3
            for arrayName in VFFSL(SL,"extraIntegrationArrayNames",True): # generated from line 128, col 5
                write(u'''xmds_free(_''')
                _v = VFFSL(SL,"name",True) # u'${name}' on line 129, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 129, col 12.
                write(u'''_''')
                _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 129, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 129, col 20.
                write(u'''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 129, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 129, col 33.
                write(u''');
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def localInitialise(self, **KWS):


        """
        Because the initialisation for the integrator could be in a different function,
        we need to set up pointers in the integrator to the appropriate arrays.
        """

        ## CHEETAH: generated from @def localInitialise at line 135, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 141, col 3
            #  Loop over the variables that need to be created
            for arrayName in VFFSL(SL,"extraIntegrationArrayNames",True): # generated from line 143, col 5
                _v = VFFSL(SL,"vector.type",True) # u'${vector.type}' on line 144, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.type}')) # from line 144, col 1.
                write(u'''* _''')
                _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 144, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 144, col 18.
                write(u'''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 144, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 144, col 31.
                write(u''' = _''')
                _v = VFFSL(SL,"name",True) # u'${name}' on line 144, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 144, col 47.
                write(u'''_''')
                _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 144, col 55
                if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 144, col 55.
                write(u'''_''')
                _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 144, col 68
                if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 144, col 68.
                write(u''';
''')
        write(u'''
''')
        _v = VFFSL(SL,"stepper.localInitialise",True) # u'${stepper.localInitialise}' on line 148, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${stepper.localInitialise}')) # from line 148, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def localFinalise(self, **KWS):


        """
        Because the finalisation for the integrator could be in a different function,
        we need to be able to insert code at the end of the integrator as well.
        """

        ## CHEETAH: generated from @def localFinalise at line 152, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''_SEGMENT''')
        _v = VFFSL(SL,"segmentNumber",True) # u'${segmentNumber}' on line 158, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${segmentNumber}')) # from line 158, col 9.
        write(u'''_END:;
''')
        _v = VFFSL(SL,"stepper.localFinalise",True) # u'${stepper.localFinalise}' on line 159, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${stepper.localFinalise}')) # from line 159, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def earlyTerminationCode(self, **KWS):


        """
        This method writes code that should be executed if the integrator needs
        to be terminated early
        """

        ## CHEETAH: generated from @def earlyTerminationCode at line 163, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for mg, sampleCount in zip(VFFSL(SL,"momentGroups",True), VFFSL(SL,"samples",True)): # generated from line 169, col 3
            if not VFFSL(SL,"sampleCount",True): # generated from line 170, col 5
                continue
            # 
            for dim in filter(lambda x: not x.transverse, mg.outputField.dimensions): # generated from line 174, col 5
                dimRep = dim.inBasis(mg.outputBasis)
                write(u'''if (''')
                _v = VFFSL(SL,"dimRep.prefix",True) # u'${dimRep.prefix}' on line 176, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.prefix}')) # from line 176, col 5.
                write(u'''_index_''')
                _v = VFFSL(SL,"dimRep.name",True) # u'${dimRep.name}' on line 176, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.name}')) # from line 176, col 28.
                write(u''' < ''')
                _v = VFFSL(SL,"dimRep.globalLattice",True) # u'${dimRep.globalLattice}' on line 176, col 45
                if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.globalLattice}')) # from line 176, col 45.
                write(u''')
  _''')
                _v = VFFSL(SL,"mg.name",True) # u'${mg.name}' on line 177, col 4
                if _v is not None: write(_filter(_v, rawExpr=u'${mg.name}')) # from line 177, col 4.
                write(u'''_sample();
''')
        write(u'''
goto _SEGMENT''')
        _v = VFFSL(SL,"segmentNumber",True) # u'${segmentNumber}' on line 181, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'${segmentNumber}')) # from line 181, col 14.
        write(u'''_END;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Integrator.tmpl
        # 
        # Created by Graham Dennis on 2007-10-20.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''









''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_Integrator= 'writeBody'

## END CLASS DEFINITION

if not hasattr(Integrator, '_initCheetahAttributes'):
    templateAPIClass = getattr(Integrator, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Integrator)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Integrator()).run()


