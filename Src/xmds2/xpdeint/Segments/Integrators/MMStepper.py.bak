#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Segments.Integrators._Stepper import _Stepper

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.2875
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Segments/Integrators/MMStepper.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 21 19:01:19 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class MMStepper(_Stepper):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(MMStepper, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def name(self, **KWS):



        ## Generated from @def name: MM at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''MM''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def singleIntegrationStep(self, function, **KWS):



        ## CHEETAH: generated from @def singleIntegrationStep($function) at line 35, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''// Start of single step
''')
        arguments = {'_step': '_step', VFFSL(SL,"propagationDimension",True): VFFSL(SL,"propagationDimension",True)}
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 40, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 40, col 1.
        write(u'''
if (_istep == 0) 
{
  // a_k = a
  ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_akfield') # u"${copyVectors($integrationVectors, '_akfield'), autoIndent=True}" on line 45, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${copyVectors($integrationVectors, '_akfield'), autoIndent=True}")) # from line 45, col 3.
        write(u'''  
  // active vector = a_i
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active', '_aifield') # u"${assignVectorPointers($integrationVectors, '_active', '_aifield'), autoIndent=True}" on line 48, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active', '_aifield'), autoIndent=True}")) # from line 48, col 3.
        write(u'''  
  // a_i = a
  ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_aifield') # u"${copyVectors($integrationVectors, '_aifield'), autoIndent=True}" on line 51, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${copyVectors($integrationVectors, '_aifield'), autoIndent=True}")) # from line 51, col 3.
        write(u'''  
  // a_i = G[a_i, t]
  ''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function), autoIndent=True}" on line 54, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function), autoIndent=True}")) # from line 54, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 57, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 57, col 3.
        write(u'''  
  // active vector = a
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active') # u"${assignVectorPointers($integrationVectors, '_active'), autoIndent=True}" on line 60, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active'), autoIndent=True}")) # from line 60, col 3.
        write(u'''  
  // a = a + G[a_i, t]
  ''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True), 
"""_${vector.id}[$index] += _aifield_${vector.id}[$index];
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors, \n"""_${vector.id}[$index] += _aifield_${vector.id}[$index];\n""", basis = $homeBasis), autoIndent=True}')) # from line 63, col 3.
        write(u'''  
  ''')
        _v = VFFSL(SL,"callFunction",False)('nonconstantIPFields', arguments, _exponent = 1, _arrayIndex = 0, parentFunction = function) # u"${callFunction('nonconstantIPFields', arguments, _exponent = 1, _arrayIndex = 0, parentFunction = function), autoIndent=True}" on line 67, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('nonconstantIPFields', arguments, _exponent = 1, _arrayIndex = 0, parentFunction = function), autoIndent=True}")) # from line 67, col 3.
        write(u'''
  
  // ipEvolve a +1
  ''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIdent=True}" on line 70, col 3
        if _v is not None: write(_filter(_v, autoIdent=True, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIdent=True}")) # from line 70, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 73, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 73, col 3.
        write(u'''  
  ''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 75, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 75, col 3.
        write(u''' += _step;
  
} // For all steps past the first:
else 
{
  // active vector = a_k
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active', '_akfield') # u"${assignVectorPointers($integrationVectors, '_active', '_akfield'), autoIndent=True}" on line 81, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active', '_akfield'), autoIndent=True}")) # from line 81, col 3.
        write(u'''  
  // ipEvolve a_k +1
  ''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIndent=True}" on line 84, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIndent=True}")) # from line 84, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 87, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 87, col 3.
        write(u'''  
  // active vector = a_i
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active', '_aifield') # u"${assignVectorPointers($integrationVectors, '_active', '_aifield'), autoIndent=True}" on line 90, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active', '_aifield'), autoIndent=True}")) # from line 90, col 3.
        write(u'''  
  // a_i = a
  ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_aifield') # u"${copyVectors($integrationVectors, '_aifield'), autoIndent=True}" on line 93, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${copyVectors($integrationVectors, '_aifield'), autoIndent=True}")) # from line 93, col 3.
        write(u'''  
  // a_i = G[a_i, t]
  ''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function), autoIndent=True}" on line 96, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function), autoIndent=True}")) # from line 96, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 99, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 99, col 3.
        write(u'''  
  // active vector = a_k
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active', '_akfield') # u"${assignVectorPointers($integrationVectors, '_active', '_akfield'), autoIndent=True}" on line 102, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active', '_akfield'), autoIndent=True}")) # from line 102, col 3.
        write(u'''  
  // a_k = a_k + 2*a_i
  ''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True), 
"""_akfield_${vector.id}[$index] = _akfield_${vector.id}[$index] + 2*_aifield_${vector.id}[$index];
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors, \n"""_akfield_${vector.id}[$index] = _akfield_${vector.id}[$index] + 2*_aifield_${vector.id}[$index];\n""", basis = $homeBasis), autoIndent=True}')) # from line 105, col 3.
        write(u'''  
  ''')
        _v = VFFSL(SL,"callFunction",False)('nonconstantIPFields', arguments, _exponent = 1, _arrayIndex = 0, parentFunction = function) # u"${callFunction('nonconstantIPFields', arguments, _exponent = 1, _arrayIndex = 0, parentFunction = function), autoIndent=True}" on line 109, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('nonconstantIPFields', arguments, _exponent = 1, _arrayIndex = 0, parentFunction = function), autoIndent=True}")) # from line 109, col 3.
        write(u'''
  
  // ipEvolve a_k +1
  ''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIndent=True}" on line 112, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIndent=True}")) # from line 112, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 115, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 115, col 3.
        write(u'''  
  // a = a_k, a_k = a
  ''')
        _v = VFFSL(SL,"swapVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_akfield') # u"${swapVectorPointers($integrationVectors, '_akfield'), autoIndent=True}" on line 118, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${swapVectorPointers($integrationVectors, '_akfield'), autoIndent=True}")) # from line 118, col 3.
        write(u'''  
  ''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 120, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 120, col 3.
        write(u''' += _step;
  
}

if (_istep == (''')
        _v = VFFSL(SL,"getVar",False)('integrator.maxIntegrationStepsVar', VFFSL(SL,"integrator.stepCount",True)) # u"$getVar('integrator.maxIntegrationStepsVar', $integrator.stepCount)" on line 124, col 16
        if _v is not None: write(_filter(_v, rawExpr=u"$getVar('integrator.maxIntegrationStepsVar', $integrator.stepCount)")) # from line 124, col 16.
        write(u''' - 1)) {
  // active vector = a_k
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active', '_akfield') # u"${assignVectorPointers($integrationVectors, '_active', '_akfield'), autoIndent=True}" on line 126, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active', '_akfield'), autoIndent=True}")) # from line 126, col 3.
        write(u'''  
  // ipEvolve a_k +1
  ''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIndent=True}" on line 129, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function), autoIndent=True}")) # from line 129, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 132, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 132, col 3.
        write(u'''  
  // active vector = a_i
  ''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active', '_aifield') # u"${assignVectorPointers($integrationVectors, '_active', '_aifield'), autoIndent=True}" on line 135, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${assignVectorPointers($integrationVectors, '_active', '_aifield'), autoIndent=True}")) # from line 135, col 3.
        write(u'''  
  // a_i = a
  ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_aifield') # u"${copyVectors($integrationVectors, '_aifield'), autoIndent=True}" on line 138, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${copyVectors($integrationVectors, '_aifield'), autoIndent=True}")) # from line 138, col 3.
        write(u'''  
  // a_i = G[a_i, t]
  ''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function), autoIndent=True}" on line 141, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function), autoIndent=True}")) # from line 141, col 3.
        write(u'''
  
  // transformToHomeSpace()
  ''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}' on line 144, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis), autoIndent=True}')) # from line 144, col 3.
        write(u'''  
  // a = 0.5*(a + a_k + G[a_i, t])
  ''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True), 
"""_${vector.id}[$index] = 0.5*(_${vector.id}[$index] + _akfield_${vector.id}[$index] + _aifield_${vector.id}[$index]);
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors, \n"""_${vector.id}[$index] = 0.5*(_${vector.id}[$index] + _akfield_${vector.id}[$index] + _aifield_${vector.id}[$index]);\n""", basis = $homeBasis), autoIndent=True}')) # from line 147, col 3.
        write(u'''  
  if ((''')
        _v = VFFSL(SL,"getVar",False)('integrator.maxIntegrationStepsVar', VFFSL(SL,"integrator.stepCount",True)) # u"$getVar('integrator.maxIntegrationStepsVar', $integrator.stepCount)" on line 151, col 8
        if _v is not None: write(_filter(_v, rawExpr=u"$getVar('integrator.maxIntegrationStepsVar', $integrator.stepCount)")) # from line 151, col 8.
        write(u''' % 2) == 0) {
    // Odd number of vector swaps, need to swap back and memcpy
    // so that the original vectors are deallocated correctly
    ''')
        _v = VFFSL(SL,"swapVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_akfield') # u"${swapVectorPointers($integrationVectors, '_akfield'), autoIndent=True}" on line 154, col 5
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${swapVectorPointers($integrationVectors, '_akfield'), autoIndent=True}")) # from line 154, col 5.
        write(u'''    ''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), None, '_akfield') # u"${copyVectors($integrationVectors, None, '_akfield'), autoIndent=True}" on line 155, col 5
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${copyVectors($integrationVectors, None, '_akfield'), autoIndent=True}")) # from line 155, col 5.
        write(u'''  }
  
}

// To ensure correct sampling, set active dimension to vector
''')
        _v = VFFSL(SL,"assignVectorPointers",False)(VFFSL(SL,"integrationVectors",True), '_active') # u"${assignVectorPointers($integrationVectors, '_active')}" on line 161, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${assignVectorPointers($integrationVectors, '_active')}")) # from line 161, col 1.
        write(u'''
// End of single step
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # MMStepper.tmpl
        # 
        # Created by Damien Beard on 2013-08-07, with code adapted from Graham Dennis.
        # Last modified by Sean Wild on 2013-08-02.
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''// Start of stepper



''')
        # 
        #   Single integration step (MM)
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    ipPropagationStepFractions = ['1']

    nonconstantIPFields = 1

    extraIntegrationArrayNames = ['akfield', 'aifield']

    isCrossCapable = False

    integrationOrder = 2.0

    _mainCheetahMethod_for_MMStepper= 'writeBody'

## END CLASS DEFINITION

if not hasattr(MMStepper, '_initCheetahAttributes'):
    templateAPIClass = getattr(MMStepper, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(MMStepper)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=MMStepper()).run()


