#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Vectors._NoiseVector import _NoiseVector

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.857399
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Vectors/NoiseVector.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Feb  4 18:39:07 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class NoiseVector(_NoiseVector):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(NoiseVector, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: noise vector $name at line 27, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''noise vector ''')
        _v = VFFSL(SL,"name",True) # u'$name' on line 27, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 27, col 32.
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def evaluateFunctionContents(self, function, **KWS):


        """
        This function returns the code for the calculated vector's ``evaluate()`` function.
          
          The ``evaluate()`` function executes the code that defines the calculated vector.
        """

        ## CHEETAH: generated from @def evaluateFunctionContents($function) at line 29, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  For distributed MPI drivers, we may need to share the noise if it is defined on a field
        #   that is not distributed.
        featureOrdering = ['Driver']
        featureDict = {'extraIndent': 0}
        _v = VFFSL(SL,"insertCodeForFeatures",False)('evaluateNoiseVectorBegin', featureOrdering, featureDict) # u"${insertCodeForFeatures('evaluateNoiseVectorBegin', featureOrdering, featureDict)}" on line 39, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeatures('evaluateNoiseVectorBegin', featureOrdering, featureDict)}")) # from line 39, col 1.
        extraIndent = featureDict['extraIndent']
        # 
        _v = VFFSL(SL,"evaluateFunctionContentsInner",False)(function) # u'${evaluateFunctionContentsInner(function), extraIndent=extraIndent}' on line 42, col 1
        if _v is not None: write(_filter(_v, extraIndent=extraIndent, rawExpr=u'${evaluateFunctionContentsInner(function), extraIndent=extraIndent}')) # from line 42, col 1.
        # 
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('evaluateNoiseVectorEnd', featureOrdering, featureDict) # u"${insertCodeForFeaturesInReverseOrder('evaluateNoiseVectorEnd', featureOrdering, featureDict)}" on line 44, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeaturesInReverseOrder('evaluateNoiseVectorEnd', featureOrdering, featureDict)}")) # from line 44, col 1.
        # 
        if VFFSL(SL,"needsTransforms",True): # generated from line 46, col 3
            write(u'''_''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 47, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 47, col 2.
            write(u'''_basis = ''')
            _v = VFFSL(SL,"basisIndexForBasis",False)(self.initialBasis) # u'$basisIndexForBasis(self.initialBasis)' on line 47, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$basisIndexForBasis(self.initialBasis)')) # from line 47, col 16.
            write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def evaluateFunctionContentsInner(self, function, **KWS):



        ## CHEETAH: generated from @def evaluateFunctionContentsInner($function) at line 52, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''const ptrdiff_t _vector_size = ''')
        _v = VFFSL(SL,"sizeInBasisInReals",False)(self.initialBasis) # u'${sizeInBasisInReals(self.initialBasis)}' on line 54, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${sizeInBasisInReals(self.initialBasis)}')) # from line 54, col 32.
        write(u''';
''')
        _v = VFFSL(SL,"randomVariable.makeNoises",True) # u'${randomVariable.makeNoises}' on line 55, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${randomVariable.makeNoises}')) # from line 55, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def splitFunctionContents(self, function, **KWS):


        """
        This function is responsible for splitting the noise due to a failed step.
          
          As the implementation of this function is dependent on the random variable,
          it is the responsibility of the random variable to implement this.
        """

        ## CHEETAH: generated from @def splitFunctionContents($function) at line 59, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  For distributed MPI drivers, we may need to share the split noise. So we perform the split
        #  on only one of the nodes.
        featureOrdering = ['Driver']
        featureDict = {'extraIndent': 0}
        _v = VFFSL(SL,"insertCodeForFeatures",False)('evaluateNoiseVectorBegin', featureOrdering, featureDict) # u"${insertCodeForFeatures('evaluateNoiseVectorBegin', featureOrdering, featureDict)}" on line 70, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeatures('evaluateNoiseVectorBegin', featureOrdering, featureDict)}")) # from line 70, col 1.
        extraIndent = featureDict['extraIndent']
        # 
        _v = VFFSL(SL,"splitFunctionContentsInner",False)(function) # u'${splitFunctionContentsInner(function), extraIndent = extraIndent}' on line 73, col 1
        if _v is not None: write(_filter(_v, extraIndent = extraIndent, rawExpr=u'${splitFunctionContentsInner(function), extraIndent = extraIndent}')) # from line 73, col 1.
        # 
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('evaluateNoiseVectorEnd', featureOrdering, featureDict) # u"${insertCodeForFeaturesInReverseOrder('evaluateNoiseVectorEnd', featureOrdering, featureDict)}" on line 75, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeaturesInReverseOrder('evaluateNoiseVectorEnd', featureOrdering, featureDict)}")) # from line 75, col 1.
        # 
        if VFFSL(SL,"needsTransforms",True): # generated from line 77, col 3
            write(u'''_''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 78, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 78, col 2.
            write(u'''_basis = ''')
            _v = VFFSL(SL,"basisIndexForBasis",False)(self.initialBasis) # u'${basisIndexForBasis(self.initialBasis)}' on line 78, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'${basisIndexForBasis(self.initialBasis)}')) # from line 78, col 16.
            write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def splitFunctionContentsInner(self, function, **KWS):



        ## CHEETAH: generated from @def splitFunctionContentsInner($function) at line 83, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''const ptrdiff_t _vector_size = ''')
        _v = VFFSL(SL,"sizeInBasisInReals",False)(self.initialBasis) # u'${sizeInBasisInReals(self.initialBasis)}' on line 85, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${sizeInBasisInReals(self.initialBasis)}')) # from line 85, col 32.
        write(u''';
''')
        _v = VFN(VFFSL(SL,"randomVariable",True),"splitNoise",False)(function) # u'${randomVariable.splitNoise(function)}' on line 86, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${randomVariable.splitNoise(function)}')) # from line 86, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # NoiseVector.tmpl
        # 
        # Created by Joe Hope on 2009-08-17.
        # 
        # Copyright (c) 2009-2012, Joe Hope
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''
''')
        # 
        #   Description of template
        write(u'''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_NoiseVector= 'writeBody'

## END CLASS DEFINITION

if not hasattr(NoiseVector, '_initCheetahAttributes'):
    templateAPIClass = getattr(NoiseVector, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(NoiseVector)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=NoiseVector()).run()


