#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Geometry._SplitUniformDimensionRepresentation import _SplitUniformDimensionRepresentation

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.881351
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Geometry/SplitUniformDimensionRepresentation.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Jul 13 16:21:46 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class SplitUniformDimensionRepresentation(_SplitUniformDimensionRepresentation):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(SplitUniformDimensionRepresentation, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def defines(self, **KWS):



        ## CHEETAH: generated from @def defines at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(SplitUniformDimensionRepresentation, self).defines()
        if _v is not None: write(_filter(_v))
        if VFFSL(SL,"silent",True): # generated from line 27, col 3
            return _dummyTrans and trans.response().getvalue() or ""
        # 
        write(u'''#define ''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 31, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 31, col 9.
        write(u'''        (2.0*M_PI/(''')
        _v = VFFSL(SL,"_range",True) # u'$_range' on line 31, col 39
        if _v is not None: write(_filter(_v, rawExpr=u'$_range')) # from line 31, col 39.
        write(u'''))
#define ''')
        _v = VFFSL(SL,"minimum",True) # u'${minimum}' on line 32, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${minimum}')) # from line 32, col 9.
        write(u'''     (-(''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 32, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 32, col 27.
        write(u'''/2) * ''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 32, col 49
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 32, col 49.
        write(u''')
#define ''')
        _v = VFFSL(SL,"maximum",True) # u'${maximum}' on line 33, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${maximum}')) # from line 33, col 9.
        write(u'''     ((''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 33, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 33, col 26.
        write(u''' - 1)/2 * ''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 33, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 33, col 52.
        write(u''')
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def openLoopMemoryOrder(self, **KWS):



        ## CHEETAH: generated from @def openLoopMemoryOrder at line 37, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''#define ''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 39, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 39, col 9.
        write(u''' ''')
        _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 39, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 39, col 17.
        write(u'''[''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 39, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 39, col 30.
        write(u''' + ''')
        _v = VFFSL(SL,"localOffset",True) # u'${localOffset}' on line 39, col 45
        if _v is not None: write(_filter(_v, rawExpr=u'${localOffset}')) # from line 39, col 45.
        write(u''']
#define d''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 40, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 40, col 10.
        write(u''' (''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 40, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 40, col 19.
        write(u''' * (''')
        _v = VFFSL(SL,"volumePrefactor",True) # u'${volumePrefactor}' on line 40, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${volumePrefactor}')) # from line 40, col 34.
        write(u'''))

for (long ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 42, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 42, col 11.
        write(u''' = 0; ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 42, col 29
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 42, col 29.
        write(u''' < ''')
        _v = VFFSL(SL,"localLattice",True) # u'${localLattice}' on line 42, col 44
        if _v is not None: write(_filter(_v, rawExpr=u'${localLattice}')) # from line 42, col 44.
        write(u'''; ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 42, col 61
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 42, col 61.
        write(u'''++) {
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def closeLoopMemoryOrder(self, **KWS):



        ## CHEETAH: generated from @def closeLoopMemoryOrder at line 46, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''}
#undef ''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 49, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 49, col 8.
        write(u'''
#undef d''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 50, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 50, col 9.
        write(u'''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def openLoopAscending(self, **KWS):



        ## CHEETAH: generated from @def openLoopAscending at line 54, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''#define ''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 56, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 56, col 9.
        write(u''' ''')
        _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 56, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 56, col 17.
        write(u'''[''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 56, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 56, col 30.
        write(u''' + ''')
        _v = VFFSL(SL,"localOffset",True) # u'${localOffset}' on line 56, col 45
        if _v is not None: write(_filter(_v, rawExpr=u'${localOffset}')) # from line 56, col 45.
        write(u''']
#define d''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 57, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 57, col 10.
        write(u''' (''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 57, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 57, col 19.
        write(u''' * (''')
        _v = VFFSL(SL,"volumePrefactor",True) # u'${volumePrefactor}' on line 57, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${volumePrefactor}')) # from line 57, col 34.
        write(u'''))

for (long ''')
        _v = VFFSL(SL,"alternateLoopIndex",True) # u'${alternateLoopIndex}' on line 59, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${alternateLoopIndex}')) # from line 59, col 11.
        write(u''' = -(''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 59, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 59, col 37.
        write(u'''/2); ''')
        _v = VFFSL(SL,"alternateLoopIndex",True) # u'${alternateLoopIndex}' on line 59, col 58
        if _v is not None: write(_filter(_v, rawExpr=u'${alternateLoopIndex}')) # from line 59, col 58.
        write(u''' < (''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 59, col 83
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 59, col 83.
        write(u''' + 1)/2; ''')
        _v = VFFSL(SL,"alternateLoopIndex",True) # u'${alternateLoopIndex}' on line 59, col 108
        if _v is not None: write(_filter(_v, rawExpr=u'${alternateLoopIndex}')) # from line 59, col 108.
        write(u'''++) {
  long ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 60, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 60, col 8.
        write(u''' = ''')
        _v = VFFSL(SL,"alternateLoopIndex",True) # u'${alternateLoopIndex}' on line 60, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${alternateLoopIndex}')) # from line 60, col 23.
        write(u''';
  if (''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 61, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 61, col 7.
        write(u''' < 0)
    ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 62, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 62, col 5.
        write(u''' += ''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 62, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 62, col 21.
        write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def closeLoopAscending(self, **KWS):



        ## CHEETAH: generated from @def closeLoopAscending at line 66, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''}
#undef ''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 69, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 69, col 8.
        write(u'''
#undef d''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 70, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 70, col 9.
        write(u'''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def localIndexFromIndexForDimensionRep(self, dimRep, **KWS):



        ## CHEETAH: generated from @def localIndexFromIndexForDimensionRep($dimRep) at line 74, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  Check that our lattice has more points than the other lattice (provided we
        #  know how many points each lattice actually has - if the lattice is defined
        #  at runtime we'll just have string rather than a number, so we can't judge).
        assert isinstance(VFFSL(SL,"runtimeLattice",True), basestring) or isinstance(dimRep.runtimeLattice, basestring) or VFFSL(SL,"runtimeLattice",True) >= dimRep.runtimeLattice
        # 
        _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 80, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.loopIndex}')) # from line 80, col 1.
        write(u''' + ''')
        _v = VFFSL(SL,"dimRep.localOffset",True) # u'${dimRep.localOffset}' on line 80, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.localOffset}')) # from line 80, col 23.
        write(u''' - ''')
        _v = VFFSL(SL,"localOffset",True) # u'${localOffset}' on line 80, col 47
        if _v is not None: write(_filter(_v, rawExpr=u'${localOffset}')) # from line 80, col 47.
        write(u''' + (signbit(''')
        _v = VFFSL(SL,"dimRep.name",True) # u'${dimRep.name}' on line 80, col 73
        if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.name}')) # from line 80, col 73.
        write(u''') ? (''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 80, col 92
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 80, col 92.
        write(u''' - ''')
        _v = VFFSL(SL,"dimRep.globalLattice",True) # u'${dimRep.globalLattice}' on line 80, col 111
        if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.globalLattice}')) # from line 80, col 111.
        write(u''') : 0)''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def strictlyAscendingGlobalIndex(self, **KWS):



        ## CHEETAH: generated from @def strictlyAscendingGlobalIndex at line 84, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        if not VFFSL(SL,"hasLocalOffset",True): # generated from line 86, col 3
            _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 87, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 87, col 1.
            write(u''' + (signbit(''')
            _v = VFFSL(SL,"name",True) # u'${name}' on line 87, col 25
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 87, col 25.
            write(u''') ? -(''')
            _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 87, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 87, col 38.
            write(u'''+1)/2 : ''')
            _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 87, col 62
            if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 87, col 62.
            write(u'''/2)''')
        else: # generated from line 88, col 3
            write(u'''lround(''')
            _v = VFFSL(SL,"name",True) # u'${name}' on line 89, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 89, col 8.
            write(u'''/''')
            _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 89, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 89, col 16.
            write(u''') + ''')
            _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 89, col 31
            if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 89, col 31.
            write(u'''/2''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def indexForSinglePointSample(self, **KWS):



        ## CHEETAH: generated from @def indexForSinglePointSample at line 94, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #  We want to sample the middle, as that is just the first point in memory, return 0
        #  (Don't worry about multiplication by zero, any smart compiler will optimise that out)
        write(u'''0''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def createCoordinateVariableForSinglePointSample(self, **KWS):



        ## CHEETAH: generated from @def createCoordinateVariableForSinglePointSample at line 102, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"type",True) # u'${type}' on line 104, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 104, col 1.
        write(u''' ''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 104, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 104, col 9.
        write(u''' = 0.0;
#define d''')
        _v = VFFSL(SL,"name",True) # u'${name}' on line 105, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 105, col 10.
        write(u''' (''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 105, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 105, col 19.
        write(u''' * (''')
        _v = VFFSL(SL,"volumePrefactor",True) # u'${volumePrefactor}' on line 105, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${volumePrefactor}')) # from line 105, col 34.
        write(u'''))
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def initialiseArray(self, **KWS):



        ## CHEETAH: generated from @def initialiseArray at line 109, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''for (long ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 111, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 111, col 11.
        write(u''' = 0; ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 111, col 29
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 111, col 29.
        write(u''' < (''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 111, col 45
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 111, col 45.
        write(u'''+1)/2; ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 111, col 68
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 111, col 68.
        write(u'''++)
  ''')
        _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 112, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 112, col 3.
        write(u'''[''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 112, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 112, col 16.
        write(u'''] = ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 112, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 112, col 32.
        write(u'''*''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 112, col 45
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 112, col 45.
        write(u''';
for (long ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 113, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 113, col 11.
        write(u''' = (''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 113, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 113, col 27.
        write(u'''+1)/2; ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 113, col 50
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 113, col 50.
        write(u''' < ''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 113, col 65
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 113, col 65.
        write(u'''; ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 113, col 83
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 113, col 83.
        write(u'''++)
  ''')
        _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 114, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${arrayName}')) # from line 114, col 3.
        write(u'''[''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 114, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 114, col 16.
        write(u'''] = -(''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 114, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${globalLattice}')) # from line 114, col 34.
        write(u''' - ''')
        _v = VFFSL(SL,"loopIndex",True) # u'${loopIndex}' on line 114, col 53
        if _v is not None: write(_filter(_v, rawExpr=u'${loopIndex}')) # from line 114, col 53.
        write(u''') * ''')
        _v = VFFSL(SL,"stepSize",True) # u'${stepSize}' on line 114, col 69
        if _v is not None: write(_filter(_v, rawExpr=u'${stepSize}')) # from line 114, col 69.
        write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # SplitUniformDimensionRepresentation.tmpl
        # 
        # Created by Graham Dennis on 2008-07-31.
        # 
        # Copyright (c) 2008-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''










''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_SplitUniformDimensionRepresentation= 'writeBody'

## END CLASS DEFINITION

if not hasattr(SplitUniformDimensionRepresentation, '_initCheetahAttributes'):
    templateAPIClass = getattr(SplitUniformDimensionRepresentation, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(SplitUniformDimensionRepresentation)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=SplitUniformDimensionRepresentation()).run()


