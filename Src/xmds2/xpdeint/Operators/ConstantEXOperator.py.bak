#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Operators._EXOperator import _EXOperator

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.891827
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Operators/ConstantEXOperator.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Jul 23 09:43:31 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ConstantEXOperator(_EXOperator):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ConstantEXOperator, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: EX transverse derivative operator for field $field.name at line 26, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''EX transverse derivative operator for field ''')
        _v = VFFSL(SL,"field.name",True) # u'$field.name' on line 26, col 63
        if _v is not None: write(_filter(_v, rawExpr=u'$field.name')) # from line 26, col 63.
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def insideCalculateOperatorFieldLoops(self, codeString, **KWS):



        ## CHEETAH: generated from @def insideCalculateOperatorFieldLoops($codeString) at line 30, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"insideCalculateOperatorFieldLoopsBegin",True) # u'${insideCalculateOperatorFieldLoopsBegin}' on line 32, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${insideCalculateOperatorFieldLoopsBegin}')) # from line 32, col 1.
        # 
        write(u'''// ************** Operator code *****************
''')
        _v = VFFSL(SL,"codeString",True) # u'${codeString}' on line 35, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${codeString}')) # from line 35, col 1.
        write(u'''// **********************************************
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def evaluateOperatorFunctionContentsWithoutCodeBlock(self, function, **KWS):



        ## CHEETAH: generated from @def evaluateOperatorFunctionContentsWithoutCodeBlock($function) at line 40, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"optimisedOperatorCopyBegin",True) # u'${optimisedOperatorCopyBegin}' on line 42, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${optimisedOperatorCopyBegin}')) # from line 42, col 1.
        # 
        _v = super(ConstantEXOperator, self).evaluateOperatorFunctionContentsWithoutCodeBlock(function)
        if _v is not None: write(_filter(_v))
        # 
        _v = VFFSL(SL,"optimisedOperatorCopyEnd",True) # u'${optimisedOperatorCopyEnd}' on line 46, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${optimisedOperatorCopyEnd}')) # from line 46, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def evaluateOperatorLoop(self, setOfVectorsToLoopOver, **KWS):



        ## CHEETAH: generated from @def evaluateOperatorLoop($setOfVectorsToLoopOver) at line 50, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"loopOverVectorsInBasisWithInnerContent",False)(setOfVectorsToLoopOver, VFFSL(SL,"operatorBasis",True), VFFSL(SL,"insideEvaluateOperatorLoops",True)) # u'${loopOverVectorsInBasisWithInnerContent(setOfVectorsToLoopOver, $operatorBasis, $insideEvaluateOperatorLoops)}' on line 52, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${loopOverVectorsInBasisWithInnerContent(setOfVectorsToLoopOver, $operatorBasis, $insideEvaluateOperatorLoops)}')) # from line 52, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def insideEvaluateOperatorLoops(self, **KWS):



        ## CHEETAH: generated from @def insideEvaluateOperatorLoops at line 56, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"insideEvaluateOperatorLoopsBegin",True) # u'${insideEvaluateOperatorLoopsBegin}' on line 58, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${insideEvaluateOperatorLoopsBegin}')) # from line 58, col 1.
        # 
        for operatorComponentNumber, (operatorComponentName, operatorComponentVectors) in enumerate(VFN(VFFSL(SL,"operatorComponents",True),"iteritems",False)()): # generated from line 60, col 3
            for targetVectorComponents in operatorComponentVectors.itervalues(): # generated from line 61, col 5
                for targetVectorComponent in targetVectorComponents: # generated from line 62, col 7
                    write(u'''// ''')
                    _v = VFFSL(SL,"operatorComponentName",True) # u'${operatorComponentName}' on line 63, col 4
                    if _v is not None: write(_filter(_v, rawExpr=u'${operatorComponentName}')) # from line 63, col 4.
                    write(u'''[''')
                    _v = VFFSL(SL,"targetVectorComponent",True) # u'$targetVectorComponent' on line 63, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'$targetVectorComponent')) # from line 63, col 29.
                    write(u''']
_''')
                    _v = VFFSL(SL,"operatorComponentName",True) # u'${operatorComponentName}' on line 64, col 2
                    if _v is not None: write(_filter(_v, rawExpr=u'${operatorComponentName}')) # from line 64, col 2.
                    write(u'''_''')
                    _v = VFFSL(SL,"targetVectorComponent",True) # u'${targetVectorComponent}' on line 64, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'${targetVectorComponent}')) # from line 64, col 27.
                    write(u''' = ''')
                    _v = VFFSL(SL,"operatorComponentName",True) # u'$operatorComponentName' on line 64, col 54
                    if _v is not None: write(_filter(_v, rawExpr=u'$operatorComponentName')) # from line 64, col 54.
                    write(u''' * ''')
                    _v = VFFSL(SL,"targetVectorComponent",True) # u'$targetVectorComponent' on line 64, col 79
                    if _v is not None: write(_filter(_v, rawExpr=u'$targetVectorComponent')) # from line 64, col 79.
                    write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # ConstantEXOperator.tmpl
        # 
        # Explicit-picture transverse derivative operator
        # 
        # Created by Graham Dennis on 2007-10-20.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''




''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    operatorKind = _EXOperator.OtherOperatorKind

    calculateOperatorFieldFunctionArguments = []

    _mainCheetahMethod_for_ConstantEXOperator= 'writeBody'

## END CLASS DEFINITION

if not hasattr(ConstantEXOperator, '_initCheetahAttributes'):
    templateAPIClass = getattr(ConstantEXOperator, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ConstantEXOperator)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ConstantEXOperator()).run()


