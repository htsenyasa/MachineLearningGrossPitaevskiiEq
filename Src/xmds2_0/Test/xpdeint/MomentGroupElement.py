#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import builtins as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint._MomentGroupElement import _MomentGroupElement

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.882794
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/MomentGroupElement.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Feb  4 13:11:27 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class MomentGroupElement(_MomentGroupElement):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(MomentGroupElement, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in list(KWs.items()):
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: moment group $number at line 27, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''moment group ''')
        _v = VFFSL(SL,"number",True) # u'$number' on line 27, col 32
        if _v is not None: write(_filter(_v, rawExpr='$number')) # from line 27, col 32.
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def sampleFunctionContents(self, function, **KWS):



        ## CHEETAH: generated from @def sampleFunctionContents($function) at line 33, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  Evaluate any computed vectors we have that either we or one
        #  of our operators depends on
        featureOrdering = ['ChunkedOutput']
        _v = VFFSL(SL,"insertCodeForFeatures",False)('sampleFunctionBegin', VFFSL(SL,"featureOrdering",True)) # u"${insertCodeForFeatures('sampleFunctionBegin', $featureOrdering), autoIndent=True}" on line 37, col 1
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${insertCodeForFeatures('sampleFunctionBegin', $featureOrdering), autoIndent=True}")) # from line 37, col 1.
        computedVectorDependencies = VFN(VFN(VFFSL(SL,"codeBlocks",True)['sampling'],"dependencies",True),"copy",False)()
        computedVectorDependencies.update(VFFSL(SL,"dynamicVectorsNeedingPrecalculationForOperatorContainers",False)(VFFSL(SL,"operatorContainers",True)))
        _v = VFFSL(SL,"evaluateComputedVectors",False)(computedVectorDependencies) # u'${evaluateComputedVectors(computedVectorDependencies)}' on line 40, col 1
        if _v is not None: write(_filter(_v, rawExpr='${evaluateComputedVectors(computedVectorDependencies)}')) # from line 40, col 1.
        # 
        #  Execute any operatorContainers
        for operatorContainer in VFFSL(SL,"operatorContainers",True): # generated from line 43, col 3
            write('''
''')
            _v = VFN(VFFSL(SL,"operatorContainer",True),"evaluateOperators",False)(parentFunction=function) # u'${operatorContainer.evaluateOperators(parentFunction=function)}' on line 45, col 1
            if _v is not None: write(_filter(_v, rawExpr='${operatorContainer.evaluateOperators(parentFunction=function)}')) # from line 45, col 1.
        write('''
''')
        # 
        #  Now actually begin the loop
        _v = VFN(VFFSL(SL,"codeBlocks",True)['sampling'],"loop",False)(self.insideSamplingLoops) # u"${codeBlocks['sampling'].loop(self.insideSamplingLoops)}" on line 50, col 1
        if _v is not None: write(_filter(_v, rawExpr="${codeBlocks['sampling'].loop(self.insideSamplingLoops)}")) # from line 50, col 1.
        #  That's the end of the loop, magic eh?
        # 
        if VFN(VFFSL(SL,"outputField",True),"hasDimensionName",False)(VFFSL(SL,"propagationDimension",True)): # generated from line 53, col 3
            write('''
''')
            _v = VFFSL(SL,"propDimRep.arrayName",True) # u'${propDimRep.arrayName}' on line 55, col 1
            if _v is not None: write(_filter(_v, rawExpr='${propDimRep.arrayName}')) # from line 55, col 1.
            write('''[''')
            _v = VFFSL(SL,"propDimRep.localOffset",True) # u'${propDimRep.localOffset}' on line 55, col 25
            if _v is not None: write(_filter(_v, rawExpr='${propDimRep.localOffset}')) # from line 55, col 25.
            write(''' + ''')
            _v = VFFSL(SL,"propDimRep.index",True) # u'${propDimRep.index}' on line 55, col 53
            if _v is not None: write(_filter(_v, rawExpr='${propDimRep.index}')) # from line 55, col 53.
            write('''++] = ''')
            _v = VFFSL(SL,"propagationDimension",True) # u'$propagationDimension' on line 55, col 78
            if _v is not None: write(_filter(_v, rawExpr='$propagationDimension')) # from line 55, col 78.
            write(''';
''')
        write('''
_LOG(_SAMPLE_LOG_LEVEL, "Sampled field (for moment group #''')
        _v = VFFSL(SL,"number",True) + 1 # u'${number + 1}' on line 58, col 59
        if _v is not None: write(_filter(_v, rawExpr='${number + 1}')) # from line 58, col 59.
        write(''') at ''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 58, col 77
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 58, col 77.
        write(''' = %e\\n", ''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 58, col 110
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 58, col 110.
        write(''');

''')
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('sampleFunctionEnd', VFFSL(SL,"featureOrdering",True)) # u"${insertCodeForFeaturesInReverseOrder('sampleFunctionEnd', $featureOrdering), autoIndent=True}" on line 60, col 1
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${insertCodeForFeaturesInReverseOrder('sampleFunctionEnd', $featureOrdering), autoIndent=True}")) # from line 60, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def insideSamplingLoops(self, codeString, **KWS):



        ## CHEETAH: generated from @def insideSamplingLoops($codeString) at line 67, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write('''#define _SAMPLE_COMPLEX(variable) \\
          variable ## R = variable.Re(); variable ## I = variable.Im();

// *************** Sampling code ****************
''')
        _v = VFFSL(SL,"codeString",True) # u'${codeString}' on line 73, col 1
        if _v is not None: write(_filter(_v, rawExpr='${codeString}')) # from line 73, col 1.
        write('''// **********************************************

#undef _SAMPLE_COMPLEX
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def processFunctionContents(self, function, **KWS):



        ## CHEETAH: generated from @def processFunctionContents($function) at line 83, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  If we don't have any processing code then we don't need to do a complicated loop
        if not self.hasattr('processingCode'): # generated from line 85, col 3
            #  If we didn't allocate a raw vector, then there actually is no processing to do
            #  at all.
            if not VFFSL(SL,"rawVectorNeedsToBeAllocated",True): # generated from line 88, col 5
                write('''// No post processing needs to be done
''')
            else: # generated from line 90, col 5
                # 
                #  Although we don't have any processing code, one of our features has
                #  processing code that needs to run (but it is simple, right?)
                _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)([VFFSL(SL,"rawVector",True)], VFFSL(SL,"insideProcessingLoopsNoProcessingCode",True), basis=VFFSL(SL,"outputBasis",True)) # u'${loopOverVectorsWithInnerContentTemplate([$rawVector], $insideProcessingLoopsNoProcessingCode, basis=$outputBasis)}' on line 94, col 1
                if _v is not None: write(_filter(_v, rawExpr='${loopOverVectorsWithInnerContentTemplate([$rawVector], $insideProcessingLoopsNoProcessingCode, basis=$outputBasis)}')) # from line 94, col 1.
        else: # generated from line 96, col 3
            assert False, "Post processing of sampled data hasn't been implemented yet!"
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def insideProcessingLoopsNoProcessingCode(self, **KWS):



        ## CHEETAH: generated from @def insideProcessingLoopsNoProcessingCode at line 102, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write('''_active_''')
        _v = VFFSL(SL,"processedVector.id",True) # u'${processedVector.id}' on line 104, col 9
        if _v is not None: write(_filter(_v, rawExpr='${processedVector.id}')) # from line 104, col 9.
        write('''[${index}] += _active_${vector.id}[${index}];
''')
        featureOrdering = ['Driver']
        _v = VFFSL(SL,"insertCodeForFeatures",False)('insideMomentGroupProcessingNoProcessingCodeLoop', VFFSL(SL,"featureOrdering",True)) # u"${insertCodeForFeatures('insideMomentGroupProcessingNoProcessingCodeLoop', $featureOrdering)}" on line 106, col 1
        if _v is not None: write(_filter(_v, rawExpr="${insertCodeForFeatures('insideMomentGroupProcessingNoProcessingCodeLoop', $featureOrdering)}")) # from line 106, col 1.
        write('''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionContents(self, function, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionContents($function) at line 113, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        outputFieldVectorComponents = VFN(VFFSL(SL,"anyObject",False)(VFFSL(SL,"outputField.vectors",True)),"components",True)
        dependentVariables = [{'vector': VFFSL(SL,"processedVector",True),                               'arrayName': ''.join(['_active_',str(VFFSL(SL,"processedVector.id",True))]),                               'components': VFFSL(SL,"processedVector.components",True)}]
        # 
        #  Note that Driver must be last
        featureOrdering = ['ErrorCheck', 'Driver']
        dict = {'momentGroup': self, 'dependentVariables': VFFSL(SL,"dependentVariables",True)}
        result = VFFSL(SL,"insertCodeForFeatures",False)('writeOutFunctionImplementationBegin', VFFSL(SL,"featureOrdering",True), VFFSL(SL,"dict",True))
        dependentVariables = VFFSL(SL,"dict.dependentVariables",True)
        componentCount = 0
        for variable in VFFSL(SL,"dependentVariables",True): # generated from line 126, col 3
            componentCount += len(VFFSL(SL,"variable.vector.components",True))
            #  Technically, all these variables must be of type real...
            if VFFSL(SL,"variable.vector.type",True) == 'complex': # generated from line 129, col 5
                componentCount += len(VFFSL(SL,"variable.vector.components",True))
        # 
        #  The features can return Cheetah template code suitable for passing to loopOverVectorsWithInnerContentTemplate
        #  in order to create their data. If any have, then we should actually create that loop and run that code.
        if VFFSL(SL,"result",True): # generated from line 136, col 3
            _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)([VFFSL(SL,"processedVector",True)], VFFSL(SL,"result",True), basis = VFFSL(SL,"outputBasis",True)) # u'${loopOverVectorsWithInnerContentTemplate([$processedVector], $result, basis = $outputBasis)}' on line 137, col 1
            if _v is not None: write(_filter(_v, rawExpr='${loopOverVectorsWithInnerContentTemplate([$processedVector], $result, basis = $outputBasis)}')) # from line 137, col 1.
        write('''
''')
        featureOrdering = ['ErrorCheck', 'Output']
        dict = {'field': VFFSL(SL,"outputField",True),                'basis': VFFSL(SL,"outputBasis",True),                'fp': '_outfile',                'dependentVariables': VFFSL(SL,"dependentVariables",True),                'xsilElementName': ''.join(['moment_group_',str(VFFSL(SL,"number",True) + 1)]),                'groupID': VFFSL(SL,"number",True)+1                }
        _v = VFFSL(SL,"insertCodeForFeatures",False)('writeOutFunctionImplementationBody', VFFSL(SL,"featureOrdering",True), VFFSL(SL,"dict",True)) # u"${insertCodeForFeatures('writeOutFunctionImplementationBody', $featureOrdering, $dict)}" on line 148, col 1
        if _v is not None: write(_filter(_v, rawExpr="${insertCodeForFeatures('writeOutFunctionImplementationBody', $featureOrdering, $dict)}")) # from line 148, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # MomentGroupElement.tmpl
        # 
        # Created by Graham Dennis on 2007-09-05.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        # 
        # 
        #   Description of template
        write('''

''')
        # 
        #   Implementation of the moment group sample function
        write('''
''')
        # 
        #   This function provides the contents of the moment group sampling loop
        write('''
''')
        # 
        #   Process function implementation
        write('''

''')
        # 
        #   Write output function implementation
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_MomentGroupElement= 'writeBody'

## END CLASS DEFINITION

if not hasattr(MomentGroupElement, '_initCheetahAttributes'):
    templateAPIClass = getattr(MomentGroupElement, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(MomentGroupElement)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=MomentGroupElement()).run()


