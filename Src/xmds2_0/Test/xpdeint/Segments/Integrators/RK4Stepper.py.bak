#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Segments.Integrators._Stepper import _Stepper

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.358964
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Segments/Integrators/RK4Stepper.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Oct 11 15:53:21 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class RK4Stepper(_Stepper):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(RK4Stepper, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def name(self, **KWS):



        ## Generated from @def name: RK4 at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''RK4''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def singleIntegrationStep(self, function, **KWS):



        ## CHEETAH: generated from @def singleIntegrationStep($function) at line 36, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        arguments = {'_step': '_step', VFFSL(SL,"propagationDimension",True): VFFSL(SL,"propagationDimension",True)}
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 39, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 39, col 1.
        write(u'''
// a_k = a
''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_akfield') # u"${copyVectors($integrationVectors, '_akfield')}" on line 42, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${copyVectors($integrationVectors, '_akfield')}")) # from line 42, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"callFunction",False)('nonconstantIPFields', arguments, _exponent = 1, parentFunction = function) # u"${callFunction('nonconstantIPFields', arguments, _exponent = 1, parentFunction = function)}" on line 44, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('nonconstantIPFields', arguments, _exponent = 1, parentFunction = function)}")) # from line 44, col 1.
        write(u'''

// a = D[a]
''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}" on line 47, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}")) # from line 47, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 48, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 48, col 1.
        write(u'''
// a_i = a
''')
        _v = VFFSL(SL,"copyVectors",False)(VFFSL(SL,"integrationVectors",True), '_aifield') # u"${copyVectors($integrationVectors, '_aifield')}" on line 51, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${copyVectors($integrationVectors, '_aifield')}")) # from line 51, col 1.
        write(u'''
''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 53, col 3
            write(u'''_active_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 54, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 54, col 9.
            write(u''' = _akfield_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 54, col 33
            if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 54, col 33.
            write(u''';
''')
        write(u'''  
// a_k = G[a_k, t]
''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function)}" on line 58, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function)}")) # from line 58, col 1.
        write(u'''

// a_k = D[a_k]
''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}" on line 61, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}")) # from line 61, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 62, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 62, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True), 
"""// a = a + a_k/6
_${vector.id}[$index] += _akfield_${vector.id}[$index]/6.0;
// a_k = a_i + a_k/2
_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + 0.5*_akfield_${vector.id}[$index];
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors, \n"""// a = a + a_k/6\n_${vector.id}[$index] += _akfield_${vector.id}[$index]/6.0;\n// a_k = a_i + a_k/2\n_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + 0.5*_akfield_${vector.id}[$index];\n""", basis = $homeBasis)}')) # from line 64, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 71, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 71, col 1.
        write(u''' += 0.5*_step;
''')
        if VFFSL(SL,"cross",True): # generated from line 72, col 3
            write(u'''
''')
            _v = VFFSL(SL,"interpolateDependencies",True) # u'${interpolateDependencies}' on line 74, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${interpolateDependencies}')) # from line 74, col 1.
        write(u'''
// a_k = G[a_k, t + h/2]
''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function)}" on line 78, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function)}")) # from line 78, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 79, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 79, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True),
"""// a = a + a_k/3
_${vector.id}[$index] += _akfield_${vector.id}[$index]/3.0;
// a_k = a_i + a_k/2
_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + 0.5*_akfield_${vector.id}[$index];
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors,\n"""// a = a + a_k/3\n_${vector.id}[$index] += _akfield_${vector.id}[$index]/3.0;\n// a_k = a_i + a_k/2\n_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + 0.5*_akfield_${vector.id}[$index];\n""", basis = $homeBasis)}')) # from line 81, col 1.
        write(u'''
// a_k = G[a_k, t + h/2]
''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function)}" on line 89, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function)}")) # from line 89, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 90, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 90, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True),
"""// a = a + a_k/3
_${vector.id}[$index] += _akfield_${vector.id}[$index]/3.0;
// a_k = a_i + a_k
_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + _akfield_${vector.id}[$index];
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors,\n"""// a = a + a_k/3\n_${vector.id}[$index] += _akfield_${vector.id}[$index]/3.0;\n// a_k = a_i + a_k\n_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + _akfield_${vector.id}[$index];\n""", basis = $homeBasis)}')) # from line 92, col 1.
        write(u'''
// a_k = D[a_k]
''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}" on line 100, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}")) # from line 100, col 1.
        write(u'''

''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 102, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 102, col 1.
        write(u''' += 0.5*_step;
''')
        if VFFSL(SL,"cross",True): # generated from line 103, col 3
            write(u'''
''')
            _v = VFFSL(SL,"updateDependenciesForNextStep",True) # u'${updateDependenciesForNextStep}' on line 105, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${updateDependenciesForNextStep}')) # from line 105, col 1.
        write(u'''
// a_k = G[a_k, t + h]
''')
        _v = VFFSL(SL,"callFunction",False)('deltaA', arguments, parentFunction = function) # u"${callFunction('deltaA', arguments, parentFunction = function)}" on line 109, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('deltaA', arguments, parentFunction = function)}")) # from line 109, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 110, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 110, col 1.
        write(u'''
''')
        for vector in VFFSL(SL,"integrationVectors",True): # generated from line 112, col 3
            write(u'''_active_''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 113, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 113, col 9.
            write(u''' = _''')
            _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 113, col 25
            if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 113, col 25.
            write(u''';
''')
        write(u'''
// a = D[a]
''')
        _v = VFFSL(SL,"callFunction",False)('ipEvolve', arguments, _exponent = +1, parentFunction = function) # u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}" on line 117, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${callFunction('ipEvolve', arguments, _exponent = +1, parentFunction = function)}")) # from line 117, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"transformVectorsToBasis",False)(VFFSL(SL,"integrationVectors",True), VFFSL(SL,"homeBasis",True)) # u'${transformVectorsToBasis($integrationVectors, $homeBasis)}' on line 118, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${transformVectorsToBasis($integrationVectors, $homeBasis)}')) # from line 118, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)(VFFSL(SL,"integrationVectors",True), 
"""// a = a + a_k/6
_${vector.id}[$index] += _akfield_${vector.id}[$index]/6.0;
""", basis = VFFSL(SL,"homeBasis",True))
        if _v is not None: write(_filter(_v, rawExpr=u'${loopOverVectorsWithInnerContentTemplate($integrationVectors, \n"""// a = a + a_k/6\n_${vector.id}[$index] += _akfield_${vector.id}[$index]/6.0;\n""", basis = $homeBasis)}')) # from line 120, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def interpolateDependencies(self, **KWS):



        ## CHEETAH: generated from @def interpolateDependencies at line 128, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #  Insert code to interpolate the dependency vectors onto the half-step point.
        #  
        write(u'''// Create 4th order midpoint interpolation for dependencies
if (_istep == 0) {
  // We are at the first point
  ''')
        _v = VFFSL(SL,"reducedFieldCopy",False)(VFFSL(SL,"integrator.dependencyMap",True), 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    1.0/16.0*( 5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
            + 15.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]
            -  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 2 * ${skipSize} * _${vector.id}_ncomponents]
            +      _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 3 * ${skipSize} * _${vector.id}_ncomponents]);
""")
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${reducedFieldCopy($integrator.dependencyMap, \n"""\n_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\\\\n    1.0/16.0*( 5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]\n            + 15.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]\n            -  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 2 * ${skipSize} * _${vector.id}_ncomponents]\n            +      _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 3 * ${skipSize} * _${vector.id}_ncomponents]);\n"""), autoIndent=True}')) # from line 135, col 3.
        write(u'''} else if (_istep == (''')
        _v = VFFSL(SL,"integrator.stepCount",True) # u'${integrator.stepCount}' on line 143, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${integrator.stepCount}')) # from line 143, col 23.
        write(u''' - 1)) {
  // We are at the last point
  ''')
        _v = VFFSL(SL,"reducedFieldCopy",False)(VFFSL(SL,"integrator.dependencyMap",True), 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    1.0/16.0*(15.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
            +  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]
            -  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - ${skipSize} * _${vector.id}_ncomponents]
            +      _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - 2 * ${skipSize} * _${vector.id}_ncomponents]);
""")
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${reducedFieldCopy($integrator.dependencyMap, \n"""\n_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\\\\n    1.0/16.0*(15.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]\n            +  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]\n            -  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - ${skipSize} * _${vector.id}_ncomponents]\n            +      _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - 2 * ${skipSize} * _${vector.id}_ncomponents]);\n"""), autoIndent=True}')) # from line 145, col 3.
        write(u'''} else {
  // We are somewhere in the middle
  ''')
        _v = VFFSL(SL,"reducedFieldCopy",False)(VFFSL(SL,"integrator.dependencyMap",True), 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    9.0/16.0*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
            + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents])
  - 1.0/16.0*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - ${skipSize} * _${vector.id}_ncomponents]
            + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 2 * ${skipSize} * _${vector.id}_ncomponents]);
""")
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${reducedFieldCopy($integrator.dependencyMap, \n"""\n_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\\\\n    9.0/16.0*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]\n            + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents])\n  - 1.0/16.0*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - ${skipSize} * _${vector.id}_ncomponents]\n            + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 2 * ${skipSize} * _${vector.id}_ncomponents]);\n"""), autoIndent=True}')) # from line 155, col 3.
        write(u'''}
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # RK4Stepper.tmpl
        # 
        # Created by Graham Dennis on 2007-09-23.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''



''')
        # 
        #   Single integration step (RK4)
        write(u'''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    ipPropagationStepFractions = ['0.5']

    extraIntegrationArrayNames = ['akfield', 'aifield']

    isCrossCapable = True

    resetFieldName = 'aifield'

    integrationOrder = 4.0

    _mainCheetahMethod_for_RK4Stepper= 'writeBody'

## END CLASS DEFINITION

if not hasattr(RK4Stepper, '_initCheetahAttributes'):
    templateAPIClass = getattr(RK4Stepper, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(RK4Stepper)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=RK4Stepper()).run()


