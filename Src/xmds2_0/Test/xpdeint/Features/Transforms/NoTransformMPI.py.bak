#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Features.Transforms._NoTransformMPI import _NoTransformMPI

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.682656
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/Transforms/NoTransformMPI.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Feb 23 00:45:53 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class NoTransformMPI(_NoTransformMPI):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(NoTransformMPI, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: MPI-distributed dimension control at line 23, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''MPI-distributed dimension control''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def setLocalLatticeAndOffsetVariables(self, **KWS):



        ## CHEETAH: generated from @def setLocalLatticeAndOffsetVariables at line 25, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''// First work out the local lattice and offset for the geometry
''')
        mpiDimRep = VFN(VFFSL(SL,"mpiDimension",True),"representations",True)[0]
        write(u'''// Set the block size for most ranks to lattice/processors rounded up
ptrdiff_t _block_size = (''')
        _v = VFFSL(SL,"mpiDimRep.globalLattice",True) # u'${mpiDimRep.globalLattice}' on line 30, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.globalLattice}')) # from line 30, col 26.
        write(u'''-1)/_size + 1;
''')
        _v = VFFSL(SL,"mpiDimRep.localOffset",True) # u'${mpiDimRep.localOffset}' on line 31, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localOffset}')) # from line 31, col 1.
        write(u''' = _rank * _block_size;
if (_rank != _size - 1)
  ''')
        _v = VFFSL(SL,"mpiDimRep.localLattice",True) # u'${mpiDimRep.localLattice}' on line 33, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localLattice}')) # from line 33, col 3.
        write(u""" = _block_size;
else {
  // The last rank takes up everything else
  // this should be less than or equal to _block_size
  // And if there's nothing left, we don't have a local lattice.
  """)
        _v = VFFSL(SL,"mpiDimRep.localLattice",True) # u'${mpiDimRep.localLattice}' on line 38, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localLattice}')) # from line 38, col 3.
        write(u''' = MAX(''')
        _v = VFFSL(SL,"mpiDimRep.globalLattice",True) # u'${mpiDimRep.globalLattice}' on line 38, col 35
        if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.globalLattice}')) # from line 38, col 35.
        write(u''' - _block_size * (_size - 1), 0);
}

''')
        for field in VFFSL(SL,"fields",True): # generated from line 41, col 3
            if field.name == 'geometry' or not VFFSL(SL,"isFieldDistributed",False)(field): # generated from line 42, col 5
                continue
            #  Set the local_lattice and local_offset variables based on the
            #  values for the geometry's version of these variables
            fieldMPIDimRep = field.dimensionWithName(VFFSL(SL,"mpiDimension.name",True)).representations[0]
            write(u"""// Set the local_lattice and local_offset variables for the '""")
            _v = VFFSL(SL,"field.name",True) # u'${field.name}' on line 48, col 62
            if _v is not None: write(_filter(_v, rawExpr=u'${field.name}')) # from line 48, col 62.
            write(u"""' field.
ptrdiff_t _""")
            _v = VFFSL(SL,"field.name",True) # u'${field.name}' on line 49, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${field.name}')) # from line 49, col 12.
            write(u'''_skip_size = ''')
            _v = VFFSL(SL,"mpiDimRep.globalLattice",True) # u'${mpiDimRep.globalLattice}' on line 49, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.globalLattice}')) # from line 49, col 38.
            write(u'''/''')
            _v = VFFSL(SL,"fieldMPIDimRep.globalLattice",True) # u'${fieldMPIDimRep.globalLattice}' on line 49, col 65
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.globalLattice}')) # from line 49, col 65.
            write(u''';
if (_rank == 0) {
  ''')
            _v = VFFSL(SL,"fieldMPIDimRep.localOffset",True) # u'${fieldMPIDimRep.localOffset}' on line 51, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.localOffset}')) # from line 51, col 3.
            write(u''' = 0;
  ''')
            _v = VFFSL(SL,"fieldMPIDimRep.localLattice",True) # u'${fieldMPIDimRep.localLattice}' on line 52, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.localLattice}')) # from line 52, col 3.
            write(u''' = (''')
            _v = VFFSL(SL,"mpiDimRep.localLattice",True) # u'${mpiDimRep.localLattice}' on line 52, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localLattice}')) # from line 52, col 37.
            write(u'''-1)/_''')
            _v = VFFSL(SL,"field.name",True) # u'${field.name}' on line 52, col 67
            if _v is not None: write(_filter(_v, rawExpr=u'${field.name}')) # from line 52, col 67.
            write(u'''_skip_size + 1;
} else {
  ''')
            _v = VFFSL(SL,"fieldMPIDimRep.localOffset",True) # u'${fieldMPIDimRep.localOffset}' on line 54, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.localOffset}')) # from line 54, col 3.
            write(u''' = (''')
            _v = VFFSL(SL,"mpiDimRep.localOffset",True) # u'${mpiDimRep.localOffset}' on line 54, col 36
            if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localOffset}')) # from line 54, col 36.
            write(u'''-1)/_''')
            _v = VFFSL(SL,"field.name",True) # u'${field.name}' on line 54, col 65
            if _v is not None: write(_filter(_v, rawExpr=u'${field.name}')) # from line 54, col 65.
            write(u'''_skip_size + 1;
  ''')
            _v = VFFSL(SL,"fieldMPIDimRep.localLattice",True) # u'${fieldMPIDimRep.localLattice}' on line 55, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.localLattice}')) # from line 55, col 3.
            write(u''' = MIN((''')
            _v = VFFSL(SL,"mpiDimRep.localOffset",True) # u'${mpiDimRep.localOffset}' on line 55, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localOffset}')) # from line 55, col 41.
            write(u''' + ''')
            _v = VFFSL(SL,"mpiDimRep.localLattice",True) # u'${mpiDimRep.localLattice}' on line 55, col 68
            if _v is not None: write(_filter(_v, rawExpr=u'${mpiDimRep.localLattice}')) # from line 55, col 68.
            write(u''' - 1)/_''')
            _v = VFFSL(SL,"field.name",True) # u'${field.name}' on line 55, col 100
            if _v is not None: write(_filter(_v, rawExpr=u'${field.name}')) # from line 55, col 100.
            write(u'''_skip_size
                                         + 1 - ''')
            _v = VFFSL(SL,"fieldMPIDimRep.localOffset",True) # u'${fieldMPIDimRep.localOffset}' on line 56, col 48
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.localOffset}')) # from line 56, col 48.
            write(u''', MAX(''')
            _v = VFFSL(SL,"fieldMPIDimRep.globalLattice",True) # u'${fieldMPIDimRep.globalLattice}' on line 56, col 83
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.globalLattice}')) # from line 56, col 83.
            write(u''' - ''')
            _v = VFFSL(SL,"fieldMPIDimRep.localOffset",True) # u'${fieldMPIDimRep.localOffset}' on line 56, col 117
            if _v is not None: write(_filter(_v, rawExpr=u'${fieldMPIDimRep.localOffset}')) # from line 56, col 117.
            write(u''', 0));
}

''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # NoTransformMPI.tmpl
        # 
        # Created by Graham Dennis on 2008-08-24.
        # 
        # Copyright (c) 2008-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_NoTransformMPI= 'writeBody'

## END CLASS DEFINITION

if not hasattr(NoTransformMPI, '_initCheetahAttributes'):
    templateAPIClass = getattr(NoTransformMPI, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(NoTransformMPI)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=NoTransformMPI()).run()


