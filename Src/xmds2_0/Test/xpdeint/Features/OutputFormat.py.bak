#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.ScriptElement import ScriptElement
from xpdeint.PrintfSafeFilter import PrintfSafeFilter
from xpdeint.CallOnceGuards import callOnceGuard, callOncePerInstanceGuard

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.448313
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/OutputFormat.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 29 13:43:25 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class OutputFormat(ScriptElement):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(OutputFormat, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: Unnamed Output Format at line 26, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Unnamed Output Format''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @callOnceGuard
    def functionPrototypes(self, **KWS):



        ## CHEETAH: generated from @def functionPrototypes at line 33, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(OutputFormat, self).functionPrototypes()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''FILE* _open_xsil_file(const char* _filename);
void _close_xsil_file(FILE*& fp);
void _write_xsil_header(FILE* fp);
void _write_xsil_footer(FILE* fp);
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @callOnceGuard
    def functionImplementations(self, **KWS):



        ## CHEETAH: generated from @def functionImplementations at line 45, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(OutputFormat, self).functionImplementations()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''
FILE* _open_xsil_file(const char* _filename)
{
''')
        featureOrdering = ['Driver']
        write(u'''  ''')
        _v = VFFSL(SL,"insertCodeForFeatures",False)('openXSILFile', featureOrdering) # u"${insertCodeForFeatures('openXSILFile', featureOrdering), autoIndent=True}" on line 53, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeatures('openXSILFile', featureOrdering), autoIndent=True}")) # from line 53, col 3.
        write(u'''  
  FILE* fp = fopen(_filename, "w");
  
  if (fp == NULL)
    // _LOG will cause the simulation to exit
    _LOG(_ERROR_LOG_LEVEL, "Unable to open output file \'%s\'.\\n"
                           "Exiting.\\n", _filename);
  
  return fp;
}

void _close_xsil_file(FILE*& fp)
{
  if (fp)
    fclose(fp);
  fp = NULL;
  
  ''')
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('closeXSILFile', featureOrdering) # u"${insertCodeForFeaturesInReverseOrder('closeXSILFile', featureOrdering), autoIndent=True}" on line 71, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeaturesInReverseOrder('closeXSILFile', featureOrdering), autoIndent=True}")) # from line 71, col 3.
        write(u'''}

''')
        _v = VFFSL(SL,"writeXSILHeaderFunctionImplementation",True) # u'${writeXSILHeaderFunctionImplementation}' on line 74, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${writeXSILHeaderFunctionImplementation}')) # from line 74, col 1.
        write(u'''
''')
        _v = VFFSL(SL,"writeXSILFooterFunctionImplementation",True) # u'${writeXSILFooterFunctionImplementation}' on line 76, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${writeXSILFooterFunctionImplementation}')) # from line 76, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeXSILHeaderFunctionImplementation(self, **KWS):



        ## CHEETAH: generated from @def writeXSILHeaderFunctionImplementation at line 80, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''void _write_xsil_header(FILE* fp)
{
  if (!fp)
    return;
''')
        #  The input script may contain entity references to other documents.  The content of the XSIL is the full, expanded simulation
        #  so that a simulation can be re-run even if the external references have changed.
        expandedInputScript = VFN(VFFSL(SL,"xmlDocument",True),"toxml",False)()
        #  Find the end tag in a case-insensitive way
        indexForEndTag = VFN(VFN(VFFSL(SL,"expandedInputScript",True),"lower",False)(),"rfind",False)('</simulation>')
        xsilOutputHeader = VFFSL(SL,"expandedInputScript",True)[0:VFFSL(SL,"indexForEndTag",True)]
        _orig_filter_77565613 = _filter
        _filter = self._CHEETAH__currentFilter = VFFSL(SL,"PrintfSafeFilter",True)(self).filter
        for line in VFN(VFFSL(SL,"xsilOutputHeader",True),"splitlines",False)(): # generated from line 92, col 5
            write(u'''  fprintf(fp, "''')
            _v = VFFSL(SL,"line",True) # u'${line}' on line 93, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'${line}')) # from line 93, col 16.
            write(u'''\\n");
''')
        write(u'''  
  fprintf(fp, "\\n<info>\\n");
  fprintf(fp, "Script compiled with XMDS2 version ''')
        _v = VFFSL(SL,"xmds.versionString",True) # u'${xmds.versionString}' on line 97, col 51
        if _v is not None: write(_filter(_v, rawExpr=u'${xmds.versionString}')) # from line 97, col 51.
        write(u''' (''')
        _v = VFFSL(SL,"xmds.subversionRevision",True) # u'${xmds.subversionRevision}' on line 97, col 74
        if _v is not None: write(_filter(_v, rawExpr=u'${xmds.subversionRevision}')) # from line 97, col 74.
        write(u''')\\n");
  fprintf(fp, "See http://www.xmds.org for more information.\\n");
''')
        _filter = self._CHEETAH__currentFilter = _orig_filter_77565613
        # 
        featureOrderingXSILInfo = ['Arguments', 'Stochastic']
        write(u'''  ''')
        _v = VFFSL(SL,"insertCodeForFeatures",False)('xsilOutputInfo', VFFSL(SL,"featureOrderingXSILInfo",True), {'fp': 'fp'}) # u"${insertCodeForFeatures('xsilOutputInfo', $featureOrderingXSILInfo, {'fp': 'fp'}), autoIndent=True}" on line 102, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeatures('xsilOutputInfo', $featureOrderingXSILInfo, {'fp': 'fp'}), autoIndent=True}")) # from line 102, col 3.
        write(u'''  fprintf(fp, "</info>\\n");
  
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeXSILFooterFunctionImplementation(self, **KWS):



        ## CHEETAH: generated from @def writeXSILFooterFunctionImplementation at line 108, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''// In addition to writing the footer (if \'fp\' is not NULL)
// this function closes the fp file pointer.
void _write_xsil_footer(FILE* fp)
{
  if (fp) {
    fprintf(fp, "</simulation>\\n");
  }
}
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutSetup(self, filename, caller, **KWS):



        ## CHEETAH: generated from @def writeOutSetup($filename, $caller) at line 121, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''char *_xsilFilename = (char*)malloc(256);
snprintf(_xsilFilename, 256, "%s.xsil", ''')
        _v = VFFSL(SL,"filename",True) # u'$filename' on line 123, col 41
        if _v is not None: write(_filter(_v, rawExpr=u'$filename')) # from line 123, col 41.
        write(u''');

FILE* _outfile = _open_xsil_file(_xsilFilename);

if (_outfile) {
  _write_xsil_header(_outfile);
''')
        if not caller in VFFSL(SL,"outputFilesTruncated",True): # generated from line 129, col 3
            write(u'''  ''')
            _v = VFFSL(SL,"truncateOutputFiles",False)(filename) # u'${truncateOutputFiles(filename), autoIndent=True}' on line 130, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${truncateOutputFiles(filename), autoIndent=True}')) # from line 130, col 3.
            VFN(VFFSL(SL,"outputFilesTruncated",True),"add",False)(caller)
        write(u'''}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutTearDown(self, **KWS):



        ## CHEETAH: generated from @def writeOutTearDown at line 136, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''_write_xsil_footer(_outfile);
_close_xsil_file(_outfile);
free(_xsilFilename);
_xsilFilename = NULL;
_outfile = NULL;
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def truncateOutputFiles(self, baseFilename, **KWS):



        ## CHEETAH: generated from @def truncateOutputFiles($baseFilename) at line 144, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionImplementationBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionImplementationBegin($dict) at line 147, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        fp = dict['fp']
        xsilElementName = dict['xsilElementName']
        field = dict['field']
        basis = dict['basis']
        numIndependentVariables = len(VFFSL(SL,"field.dimensions",True))
        # 
        dependentVariables = dict['dependentVariables']
        componentCount = 0
        for variable in VFFSL(SL,"dependentVariables",True): # generated from line 157, col 3
            componentCount += len(VFFSL(SL,"variable.vector.components",True))
            if VFFSL(SL,"variable.vector.type",True) == 'complex': # generated from line 159, col 5
                componentCount += len(VFFSL(SL,"variable.vector.components",True))
        # 
        write(u'''if (''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 164, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 164, col 5.
        write(u''') {
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 165, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 165, col 11.
        write(u''', "\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 166, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 166, col 11.
        write(u''', "<XSIL Name=\\"''')
        _v = VFFSL(SL,"xsilElementName",True) # u'${xsilElementName}' on line 166, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${xsilElementName}')) # from line 166, col 30.
        write(u'''\\">\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 167, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 167, col 11.
        write(u''', "  <Param Name=\\"n_independent\\">''')
        _v = VFFSL(SL,"numIndependentVariables",True) # u'${numIndependentVariables}' on line 167, col 49
        if _v is not None: write(_filter(_v, rawExpr=u'${numIndependentVariables}')) # from line 167, col 49.
        write(u'''</Param>\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 168, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 168, col 11.
        write(u''', "  <Array Name=\\"variables\\" Type=\\"Text\\">\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 169, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 169, col 11.
        write(u''', "    <Dim>''')
        _v = VFFSL(SL,"numIndependentVariables",True) + componentCount # u'${numIndependentVariables + componentCount}' on line 169, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${numIndependentVariables + componentCount}')) # from line 169, col 26.
        write(u'''</Dim>\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 170, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 170, col 11.
        write(u''', "    <Stream><Metalink Format=\\"Text\\" Delimiter=\\" \\\\n\\"/>\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 171, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 171, col 11.
        write(u''', "''')
        #  First loop over the dimensions (the independent variables)
        for dimension in VFFSL(SL,"field.dimensions",True): # generated from line 173, col 3
            _v = VFN(VFN(VFFSL(SL,"dimension",True),"inBasis",False)(basis),"name",True) # u'${dimension.inBasis(basis).name}' on line 174, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${dimension.inBasis(basis).name}')) # from line 174, col 1.
            write(u''' ''')
        # 
        #  Now loop over the dependent variables
        for variable in VFFSL(SL,"dependentVariables",True): # generated from line 178, col 3
            for componentName in VFFSL(SL,"variable.components",True): # generated from line 179, col 5
                if VFFSL(SL,"variable.vector.type",True) == 'real': # generated from line 180, col 7
                    _v = VFFSL(SL,"componentName",True) # u'${componentName}' on line 181, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'${componentName}')) # from line 181, col 1.
                    write(u''' ''')
                else: # generated from line 182, col 7
                    _v = VFFSL(SL,"componentName",True) # u'${componentName}' on line 183, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'${componentName}')) # from line 183, col 1.
                    write(u'''R ''')
                    _v = VFFSL(SL,"componentName",True) # u'${componentName}' on line 183, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${componentName}')) # from line 183, col 19.
                    write(u'''I ''')
        write(u'''\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 188, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 188, col 11.
        write(u''', "    </Stream>\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 189, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 189, col 11.
        write(u''', "  </Array>\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 190, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 190, col 11.
        write(u''', "  <Array Name=\\"data\\" Type=\\"''')
        _v = VFFSL(SL,"precision",True) # u'${precision}' on line 190, col 47
        if _v is not None: write(_filter(_v, rawExpr=u'${precision}')) # from line 190, col 47.
        write(u'''\\">\\n");
''')
        # 
        #  Now loop over the dimensions
        for dimension in VFFSL(SL,"field.dimensions",True): # generated from line 193, col 3
            write(u'''  fprintf(''')
            _v = VFFSL(SL,"fp",True) # u'$fp' on line 194, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 194, col 11.
            write(u''', "    <Dim>%i</Dim>\\n", ''')
            _v = VFN(VFN(VFFSL(SL,"dimension",True),"inBasis",False)(basis),"globalLattice",True) # u'$dimension.inBasis(basis).globalLattice' on line 194, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$dimension.inBasis(basis).globalLattice')) # from line 194, col 39.
            write(u''');
''')
        #  Now the variables dimension
        write(u'''  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 197, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 197, col 11.
        write(u''', "    <Dim>''')
        _v = VFFSL(SL,"numIndependentVariables",True) + componentCount # u'${numIndependentVariables + componentCount}' on line 197, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${numIndependentVariables + componentCount}')) # from line 197, col 26.
        write(u'''</Dim>\\n");
}
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionImplementationEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionImplementationEnd($dict) at line 202, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        fp = dict['fp']
        # 
        write(u'''if (''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 206, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 206, col 5.
        write(u''') {
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 207, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 207, col 11.
        write(u''', "  </Array>\\n");
  fprintf(''')
        _v = VFFSL(SL,"fp",True) # u'$fp' on line 208, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$fp')) # from line 208, col 11.
        write(u''', "</XSIL>\\n");
}
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # OutputFormat.tmpl
        # 
        # Created by Graham Dennis on 2009-01-24.
        # 
        # Copyright (c) 2009-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''










''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    outputFormatClasses = {}

    outputFormat = False

    mpiSafe = False

    outputFilesTruncated = set()

    _mainCheetahMethod_for_OutputFormat= 'writeBody'

## END CLASS DEFINITION

if not hasattr(OutputFormat, '_initCheetahAttributes'):
    templateAPIClass = getattr(OutputFormat, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(OutputFormat)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=OutputFormat()).run()


