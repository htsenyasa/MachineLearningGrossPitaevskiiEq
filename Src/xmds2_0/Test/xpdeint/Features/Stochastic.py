#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import builtins as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Features._Stochastic import _Stochastic
from xpdeint.Operators.DeltaAOperator import DeltaAOperator

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.488134
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/Stochastic.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Aug 28 15:52:21 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Stochastic(_Stochastic):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Stochastic, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in list(KWs.items()):
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: Stochastic at line 26, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''Stochastic''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def globals(self, **KWS):



        ## CHEETAH: generated from @def globals at line 33, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(Stochastic, self).globals()
        if _v is not None: write(_filter(_v))
        # 
        for integrator in self.adaptiveIntegratorsWithNoises() : # generated from line 37, col 3
            write('''// ********************************************************
// struct used to store step size and noise vector to ensure
// stochastic convergence
struct _dtdWstore_segment''')
            _v = VFFSL(SL,"integrator.segmentNumber",True) # u'${integrator.segmentNumber}' on line 41, col 26
            if _v is not None: write(_filter(_v, rawExpr='${integrator.segmentNumber}')) # from line 41, col 26.
            write(''' {
  real _step;
''')
            # 
            for noiseVector in integrator.dynamicNoiseVectors: # generated from line 44, col 5
                write('''  ''')
                _v = VFFSL(SL,"noiseVector.type",True) # u'$noiseVector.type' on line 45, col 3
                if _v is not None: write(_filter(_v, rawExpr='$noiseVector.type')) # from line 45, col 3.
                write('''* _''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 45, col 23
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 45, col 23.
                write(''';
''')
            write('''  
  _dtdWstore_segment''')
            _v = VFFSL(SL,"integrator.segmentNumber",True) # u'${integrator.segmentNumber}' on line 48, col 21
            if _v is not None: write(_filter(_v, rawExpr='${integrator.segmentNumber}')) # from line 48, col 21.
            write('''() {
  _step = 0;
''')
            # 
            for noiseVector in integrator.dynamicNoiseVectors: # generated from line 51, col 5
                write('''  _''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 52, col 4
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 52, col 4.
                write(''' = NULL;
''')
            write('''  }
  ~_dtdWstore_segment''')
            _v = VFFSL(SL,"integrator.segmentNumber",True) # u'${integrator.segmentNumber}' on line 55, col 22
            if _v is not None: write(_filter(_v, rawExpr='${integrator.segmentNumber}')) # from line 55, col 22.
            write('''() {
''')
            # 
            for noiseVector in integrator.dynamicNoiseVectors: # generated from line 57, col 5
                write('''    if (_''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 58, col 10
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 58, col 10.
                write(''')
      xmds_free(_''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 59, col 18
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 59, col 18.
                write(''');
''')
            write('''  }
};
''')
        # 
        for dimRep in self.nonUniformDimRepsNeededForGaussianNoise: # generated from line 65, col 3
            _v = VFFSL(SL,"dimRep.type",True) # u'${dimRep.type}' on line 66, col 1
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.type}')) # from line 66, col 1.
            write('''* ''')
            _v = VFFSL(SL,"dimRep.stepSizeArrayName",True) # u'${dimRep.stepSizeArrayName}' on line 66, col 17
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.stepSizeArrayName}')) # from line 66, col 17.
            write('''_invsqrt = (''')
            _v = VFFSL(SL,"dimRep.type",True) # u'${dimRep.type}' on line 66, col 56
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.type}')) # from line 66, col 56.
            write('''*) xmds_malloc(sizeof(''')
            _v = VFFSL(SL,"dimRep.type",True) # u'${dimRep.type}' on line 66, col 92
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.type}')) # from line 66, col 92.
            write(''') * (''')
            _v = VFFSL(SL,"dimRep.globalLattice",True) # u'${dimRep.globalLattice}' on line 66, col 111
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.globalLattice}')) # from line 66, col 111.
            write('''));
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def mainBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def mainBegin($dict) at line 71, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for dimRep in self.nonUniformDimRepsNeededForGaussianNoise: # generated from line 73, col 3
            write('''for (long ''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 74, col 11
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.loopIndex}')) # from line 74, col 11.
            write(''' = 0; ''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 74, col 36
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.loopIndex}')) # from line 74, col 36.
            write(''' < ''')
            _v = VFFSL(SL,"dimRep.globalLattice",True) # u'${dimRep.globalLattice}' on line 74, col 58
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.globalLattice}')) # from line 74, col 58.
            write('''; ''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 74, col 83
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.loopIndex}')) # from line 74, col 83.
            write('''++) {
  ''')
            _v = VFFSL(SL,"dimRep.stepSizeArrayName",True) # u'${dimRep.stepSizeArrayName}' on line 75, col 3
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.stepSizeArrayName}')) # from line 75, col 3.
            write('''_invsqrt[''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 75, col 39
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.loopIndex}')) # from line 75, col 39.
            write('''] = (real)1.0/sqrt(''')
            _v = VFFSL(SL,"dimRep.stepSizeArrayName",True) # u'${dimRep.stepSizeArrayName}' on line 75, col 77
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.stepSizeArrayName}')) # from line 75, col 77.
            write('''[''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 75, col 105
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.loopIndex}')) # from line 75, col 105.
            write('''] * (''')
            _v = VFFSL(SL,"dimRep.volumePrefactor",True) # u'${dimRep.volumePrefactor}' on line 75, col 129
            if _v is not None: write(_filter(_v, rawExpr='${dimRep.volumePrefactor}')) # from line 75, col 129.
            write('''));
}
''')
        write('''
''')
        for noiseVector in VFFSL(SL,"noiseVectors",True): # generated from line 79, col 3
            _v = VFFSL(SL,"noiseVector.initialiseGlobalSeeds",True) # u'${noiseVector.initialiseGlobalSeeds}' on line 80, col 1
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.initialiseGlobalSeeds}')) # from line 80, col 1.
            write('''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def topLevelSequenceBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def topLevelSequenceBegin($dict) at line 86, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for noiseVector in VFFSL(SL,"noiseVectors",True): # generated from line 88, col 3
            _v = VFFSL(SL,"noiseVector.initialiseLocalSeeds",True) # u'${noiseVector.initialiseLocalSeeds}' on line 89, col 1
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.initialiseLocalSeeds}')) # from line 89, col 1.
            write('''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateAdaptiveStepBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateAdaptiveStepBegin($dict) at line 95, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        # 
        if not integrator.dynamicNoiseVectors: # generated from line 99, col 3
            return
        # 
        write('''typedef _dtdWstore_segment''')
        _v = VFFSL(SL,"integrator.segmentNumber",True) # u'${integrator.segmentNumber}' on line 103, col 27
        if _v is not None: write(_filter(_v, rawExpr='${integrator.segmentNumber}')) # from line 103, col 27.
        write(''' _dtdWstore;
list<_dtdWstore> _noise_list;
list<_dtdWstore>::iterator _active_node;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateAdaptiveStepEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateAdaptiveStepEnd($dict) at line 109, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        # 
        if not integrator.dynamicNoiseVectors: # generated from line 113, col 3
            return
        # 
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 117, col 3
            write('''_active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 118, col 9
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 118, col 9.
            write(''' = _''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 118, col 30
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 118, col 30.
            write(''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateFixedStepInnerLoopBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateFixedStepInnerLoopBegin(dict) at line 123, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        # 
        if not integrator.dynamicNoiseVectors: # generated from line 127, col 3
            return
        # 
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 131, col 3
            write('''
_active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 133, col 9
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 133, col 9.
            write(''' = _''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 133, col 30
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 133, col 30.
            write(''';
''')
            _v = VFN(VFN(VFFSL(SL,"noiseVector",True),"functions",True)['evaluate'],"call",False)(_step = '_noiseStep') # u"${noiseVector.functions['evaluate'].call(_step = '_noiseStep')}" on line 134, col 1
            if _v is not None: write(_filter(_v, rawExpr="${noiseVector.functions['evaluate'].call(_step = '_noiseStep')}")) # from line 134, col 1.
            write('''
''')
        # 
        if 'ErrorCheck' in VFFSL(SL,"features",True): # generated from line 137, col 3
            write('''
if (!_half_step) { // For the full step we average the two noises.
''')
            for noiseVector in integrator.dynamicNoiseVectors: # generated from line 140, col 5
                # 
                write('''  _active_''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 142, col 11
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 142, col 11.
                write(''' = _''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 142, col 32
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 142, col 32.
                write('''2;
  ''')
                _v = VFN(VFN(VFFSL(SL,"noiseVector",True),"functions",True)['evaluate'],"call",False)(_step = '_noiseStep') # u"${noiseVector.functions['evaluate'].call(_step = '_noiseStep'), autoIndent=True}" on line 143, col 3
                if _v is not None: write(_filter(_v, autoIndent=True, rawExpr="${noiseVector.functions['evaluate'].call(_step = '_noiseStep'), autoIndent=True}")) # from line 143, col 3.
                write('''
  ''')
                _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)([noiseVector],
  """_${vector.id}[$index] = 0.5*(_${vector.id}[$index] + _${vector.id}2[$index]);
  """, basis = noiseVector.initialBasis)
                if _v is not None: write(_filter(_v, autoIndent=True, rawExpr='${loopOverVectorsWithInnerContentTemplate([noiseVector],\n  """_${vector.id}[$index] = 0.5*(_${vector.id}[$index] + _${vector.id}2[$index]);\n  """, basis = noiseVector.initialBasis), autoIndent=True}')) # from line 144, col 3.
                write('''  _active_''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 147, col 11
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 147, col 11.
                write(''' = _''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 147, col 32
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 147, col 32.
                write(''';
''')
            write('''}
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateAdaptiveStepInnerLoopBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateAdaptiveStepInnerLoopBegin(dict) at line 154, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        # 
        if not integrator.dynamicNoiseVectors: # generated from line 158, col 3
            return
        # 
        write('''if (_noise_list.empty()) {
  // Noise list empty so start afresh
  _noise_list.push_front(_dtdWstore());
  _active_node = _noise_list.begin();
  _active_node->_step = _step;
''')
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 167, col 3
            write('''  
  _active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 169, col 11
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 169, col 11.
            write(''' =  (''')
            _v = VFFSL(SL,"noiseVector.type",True) # u'${noiseVector.type}' on line 169, col 33
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.type}')) # from line 169, col 33.
            write('''*) xmds_malloc(sizeof(''')
            _v = VFFSL(SL,"noiseVector.type",True) # u'${noiseVector.type}' on line 169, col 74
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.type}')) # from line 169, col 74.
            write(''') * MAX(''')
            _v = VFFSL(SL,"noiseVector.allocSize",True) # u'${noiseVector.allocSize}' on line 169, col 101
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.allocSize}')) # from line 169, col 101.
            write(''',1));
  _active_node->_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 170, col 18
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 170, col 18.
            write(''' = _active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 170, col 46
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 170, col 46.
            write(''';
  ''')
            _v = VFN(VFN(VFFSL(SL,"noiseVector",True),"functions",True)['evaluate'],"call",False)(_step = '_step') # u"${noiseVector.functions['evaluate'].call(_step = '_step')}" on line 171, col 3
            if _v is not None: write(_filter(_v, rawExpr="${noiseVector.functions['evaluate'].call(_step = '_step')}")) # from line 171, col 3.
            write('''
''')
        write('''} else if (_step*(1.0 + _EPSILON) < _noise_list.begin()->_step) {
  // Create new smallest time step
  
  // If the step is greater than 50% of the current smallest step size
  // then we should just use half the step size because we are going to have
  // to do the other half at some point too.
  
  const real _old_smallest_step = _noise_list.begin()->_step;
  
  if (_step > 0.5*_old_smallest_step*(1.0 + _EPSILON))
    _step = 0.5*_old_smallest_step;
  
''')
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 185, col 3
            #  It is necessary to transform the noise vector back to its original basis, as it may have been transformed in the mean time.
            write('''  ''')
            _v = VFFSL(SL,"transformVectorsToBasis",False)([noiseVector], noiseVector.initialBasis) # u'${transformVectorsToBasis([noiseVector], noiseVector.initialBasis), autoIndent=True}' on line 187, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr='${transformVectorsToBasis([noiseVector], noiseVector.initialBasis), autoIndent=True}')) # from line 187, col 3.
            write('''  _active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 188, col 11
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 188, col 11.
            write(''' = (''')
            _v = VFFSL(SL,"noiseVector.type",True) # u'${noiseVector.type}' on line 188, col 32
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.type}')) # from line 188, col 32.
            write('''*) xmds_malloc(sizeof(''')
            _v = VFFSL(SL,"noiseVector.type",True) # u'${noiseVector.type}' on line 188, col 73
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.type}')) # from line 188, col 73.
            write(''') * MAX(''')
            _v = VFFSL(SL,"noiseVector.allocSize",True) # u'${noiseVector.allocSize}' on line 188, col 100
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.allocSize}')) # from line 188, col 100.
            write(''',1));
  ''')
            _v = VFN(VFN(VFFSL(SL,"noiseVector",True),"functions",True)['split'],"call",False)(_new_step = '_step', _old_step = '_old_smallest_step', _old_array = '_noise_list.begin()->_' + noiseVector.id) # u"${noiseVector.functions['split'].call(_new_step = '_step', _old_step = '_old_smallest_step', _old_array = '_noise_list.begin()->_' + noiseVector.id)}" on line 189, col 3
            if _v is not None: write(_filter(_v, rawExpr="${noiseVector.functions['split'].call(_new_step = '_step', _old_step = '_old_smallest_step', _old_array = '_noise_list.begin()->_' + noiseVector.id)}")) # from line 189, col 3.
            write('''
  
''')
        # 
        write('''  _noise_list.push_front(_dtdWstore());
  _active_node = _noise_list.begin();
  _active_node->_step = _step;
''')
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 196, col 3
            write('''  _active_node->_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 197, col 18
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 197, col 18.
            write(''' = _active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 197, col 46
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 197, col 46.
            write(''';
''')
        write('''} else {
  // Use step already attempted
  for (_active_node = _noise_list.begin(); (_active_node != _noise_list.end()) && (_active_node->_step <= _step*(1.0 + _EPSILON)); _active_node++)
    ;
  
  _active_node--;
  _step = _active_node->_step;
''')
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 206, col 3
            write('''  _active_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 207, col 11
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 207, col 11.
            write(''' = _active_node->_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 207, col 46
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 207, col 46.
            write(''';
''')
            if noiseVector.needsTransforms: # generated from line 208, col 5
                write('''  _''')
                _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 209, col 4
                if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 209, col 4.
                write('''_basis = ''')
                _v = VFFSL(SL,"basisIndexForBasis",False)(noiseVector.initialBasis) # u'${basisIndexForBasis(noiseVector.initialBasis)}' on line 209, col 30
                if _v is not None: write(_filter(_v, rawExpr='${basisIndexForBasis(noiseVector.initialBasis)}')) # from line 209, col 30.
                write(''';
''')
        write('''  
  if ( _break_next && !((_''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 213, col 27
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 213, col 27.
        write('''_local + _step)*(1.0 + _EPSILON) >= _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 213, col 87
        if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 213, col 87.
        write('''_break_next))
    _break_next = false;
} 

''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def adaptiveStepSucceeded(self, dict, **KWS):



        ## CHEETAH: generated from @def adaptiveStepSucceeded(dict) at line 220, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        # 
        if not integrator.dynamicNoiseVectors: # generated from line 224, col 3
            return
        # 
        write('''
// Trim dtdW tree
_active_node++;
if (_active_node == _noise_list.end())
  _noise_list.clear();
else {
  for (list<_dtdWstore>::iterator _temp_iter = _active_node; _temp_iter != _noise_list.end(); _temp_iter++) {
    _temp_iter->_step -= _step;
    real _temp_step = _temp_iter->_step;
    
''')
        for noiseVector in integrator.dynamicNoiseVectors: # generated from line 238, col 3
            #  The noise vector must be transformed back to its initial basis in case it has been transformed during the integration step.
            write('''    ''')
            _v = VFFSL(SL,"transformVectorsToBasis",False)([noiseVector], noiseVector.initialBasis) # u'${transformVectorsToBasis([noiseVector], noiseVector.initialBasis), autoIndent = True}' on line 240, col 5
            if _v is not None: write(_filter(_v, autoIndent = True, rawExpr='${transformVectorsToBasis([noiseVector], noiseVector.initialBasis), autoIndent = True}')) # from line 240, col 5.
            write('''    ''')
            _v = VFFSL(SL,"noiseVector.type",True) # u'${noiseVector.type}' on line 241, col 5
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.type}')) # from line 241, col 5.
            write('''* _temp_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 241, col 32
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 241, col 32.
            write(''' = _temp_iter->_''')
            _v = VFFSL(SL,"noiseVector.id",True) # u'${noiseVector.id}' on line 241, col 65
            if _v is not None: write(_filter(_v, rawExpr='${noiseVector.id}')) # from line 241, col 65.
            write(''';
    ''')
            _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)([VFFSL(SL,"noiseVector",True)],
"""_temp_${vector.id}[$index] = (_temp_${vector.id}[$index]*(_temp_step + _step) - _active_${vector.id}[$index]*_step)/_temp_step;
""")
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr='${loopOverVectorsWithInnerContentTemplate([$noiseVector],\n"""_temp_${vector.id}[$index] = (_temp_${vector.id}[$index]*(_temp_step + _step) - _active_${vector.id}[$index]*_step)/_temp_step;\n"""), autoIndent=True}')) # from line 242, col 5.
        write('''  }
  
  _noise_list.erase(_noise_list.begin(), _active_node);
}
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Stochastic.tmpl
        # 
        # Created by Graham Dennis on 2007-12-11.
        # 
        # Copyright (c) 2007-2012, Graham Dennis and Joe Hope
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write('''


''')
        # 
        #   Globals
        write('''







''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    featureName = 'Stochastic'

    uselib = ['randomisation_seeding']

    _mainCheetahMethod_for_Stochastic= 'writeBody'

## END CLASS DEFINITION

if not hasattr(Stochastic, '_initCheetahAttributes'):
    templateAPIClass = getattr(Stochastic, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Stochastic)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Stochastic()).run()


