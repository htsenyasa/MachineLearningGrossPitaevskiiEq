#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Features._Feature import _Feature
from xpdeint.Utilities import lazy_property

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.410333
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/Output.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Sep  3 14:15:51 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Output(_Feature):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Output, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: output at line 25, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''output''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @lazy_property
    def outputGroups(self, **KWS):



        ## CHEETAH: generated from @def outputGroups at line 29, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        return len(VFFSL(SL,"momentGroups",True))
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def functionPrototypes(self, **KWS):



        ## CHEETAH: generated from @def functionPrototypes at line 33, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(Output, self).functionPrototypes()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''void _write_output();
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def functionImplementations(self, **KWS):



        ## CHEETAH: generated from @def functionImplementations at line 41, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(Output, self).functionImplementations()
        if _v is not None: write(_filter(_v))
        # 
        _v = VFFSL(SL,"writeOutFunctionImplementation",True) # u'${writeOutFunctionImplementation}' on line 45, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${writeOutFunctionImplementation}')) # from line 45, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionImplementation(self, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionImplementation at line 49, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''void _write_output()
{
  _LOG(_SIMULATION_LOG_LEVEL, "Generating output for ''')
        _v = VFFSL(SL,"simulationName",True) # u'${simulationName}' on line 52, col 54
        if _v is not None: write(_filter(_v, rawExpr=u'${simulationName}')) # from line 52, col 54.
        write(u'''\\n");
  
''')
        if not VFFSL(SL,"momentGroups",True): # generated from line 54, col 3
            write(u'''  _LOG(_SIMULATION_LOG_LEVEL, "Warning: No output moment groups.\\n");
''')
        else: # generated from line 56, col 3
            featureOrdering = ['Driver', 'ChunkedOutput']
            write(u'''  ''')
            _v = VFFSL(SL,"insertCodeForFeatures",False)('writeOutBegin', featureOrdering) # u"${insertCodeForFeatures('writeOutBegin', featureOrdering), autoIndent=True}" on line 58, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeatures('writeOutBegin', featureOrdering), autoIndent=True}")) # from line 58, col 3.
            write(u'''  
  ''')
            _v = VFN(VFFSL(SL,"outputFormat",True),"writeOutSetup",False)(''.join([u'("',str(VFFSL(SL,"filename",True)),u'" + gsArgsAndValues).c_str()']), self) # u'${outputFormat.writeOutSetup(c\'("${filename}" + gsArgsAndValues).c_str()\', self), autoIndent=True}' on line 60, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${outputFormat.writeOutSetup(c\'("${filename}" + gsArgsAndValues).c_str()\', self), autoIndent=True}')) # from line 60, col 3.
            for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 61, col 5
                write(u'''  ''')
                _v = VFN(VFN(VFFSL(SL,"momentGroup",True),"functions",True)['writeOut'],"call",False)(_outfile = '_outfile') # u"${momentGroup.functions['writeOut'].call(_outfile = '_outfile')}" on line 62, col 3
                if _v is not None: write(_filter(_v, rawExpr=u"${momentGroup.functions['writeOut'].call(_outfile = '_outfile')}")) # from line 62, col 3.
                write(u'''
''')
            write(u'''  
  ''')
            _v = VFFSL(SL,"outputFormat.writeOutTearDown",True) # u'${outputFormat.writeOutTearDown, autoIndent=True}' on line 65, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${outputFormat.writeOutTearDown, autoIndent=True}')) # from line 65, col 3.
            write(u'''  
  ''')
            _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('writeOutEnd', featureOrdering) # u"${insertCodeForFeaturesInReverseOrder('writeOutEnd', featureOrdering), autoIndent=True}" on line 67, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeaturesInReverseOrder('writeOutEnd', featureOrdering), autoIndent=True}")) # from line 67, col 3.
        write(u'''}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionImplementationBody(self, dict, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionImplementationBody($dict) at line 72, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        dict.setdefault('baseFilename', ''.join([u'("',str(VFFSL(SL,"filename",True)),u'" + gsArgsAndValues).c_str()']))
        dict.setdefault('outputGroupFilenameSuffix', '_' + dict['caller'].name)
        _v = VFN(VFFSL(SL,"outputFormat",True),"writeOutFunctionImplementationBody",False)(dict) # u'${outputFormat.writeOutFunctionImplementationBody(dict)}' on line 75, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${outputFormat.writeOutFunctionImplementationBody(dict)}')) # from line 75, col 1.
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def mainEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def mainEnd($dict) at line 78, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
_write_output();
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateFixedStepInnerLoopEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateFixedStepInnerLoopEnd($dict) at line 83, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        assert len(VFFSL(SL,"momentGroups",True)) == len(VFFSL(SL,"integrator.samples",True))
        # 
        for momentGroupNumber, sampleCount in enumerate(VFFSL(SL,"integrator.samples",True)): # generated from line 88, col 3
            if VFFSL(SL,"sampleCount",True) > 0: # generated from line 89, col 5
                assert (VFFSL(SL,"integrator.stepCount",True) % VFFSL(SL,"sampleCount",True)) == 0
                sampleEveryNthStep = VFFSL(SL,"integrator.stepCount",True) / VFFSL(SL,"sampleCount",True)
                write(u'''if ((_istep % ''')
                _v = VFFSL(SL,"sampleEveryNthStep",True) # u'$sampleEveryNthStep' on line 92, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'$sampleEveryNthStep')) # from line 92, col 15.
                write(u''') == ''')
                _v = VFFSL(SL,"sampleEveryNthStep",True) - 1 # u'${sampleEveryNthStep - 1}' on line 92, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'${sampleEveryNthStep - 1}')) # from line 92, col 39.
                write(u''')
  _mg''')
                _v = VFFSL(SL,"momentGroupNumber",True) # u'${momentGroupNumber}' on line 93, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupNumber}')) # from line 93, col 6.
                write(u'''_sample();
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateAdaptiveStepOuterLoopEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateAdaptiveStepOuterLoopEnd($dict) at line 99, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        assert len(VFFSL(SL,"momentGroups",True)) == len(VFFSL(SL,"integrator.samples",True))
        # 
        write(u'''if (_break_next) {
''')
        for momentGroupNumber, sampleCount in enumerate(VFFSL(SL,"integrator.samples",True)): # generated from line 105, col 3
            write(u'''  if (_next_sample_flag[''')
            _v = VFFSL(SL,"momentGroupNumber",True) # u'$momentGroupNumber' on line 106, col 25
            if _v is not None: write(_filter(_v, rawExpr=u'$momentGroupNumber')) # from line 106, col 25.
            write(u''']) {
    _mg''')
            _v = VFFSL(SL,"momentGroupNumber",True) # u'${momentGroupNumber}' on line 107, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupNumber}')) # from line 107, col 8.
            write(u'''_sample();
    _next_sample_counter[''')
            _v = VFFSL(SL,"momentGroupNumber",True) # u'$momentGroupNumber' on line 108, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$momentGroupNumber')) # from line 108, col 26.
            write(u''']++;
  }
''')
        momentGroupCount = len(VFFSL(SL,"integrator.samples",True))
        write(u'''  if (_next_sample_flag[''')
        _v = VFFSL(SL,"momentGroupCount",True) # u'${momentGroupCount}' on line 112, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupCount}')) # from line 112, col 25.
        write(u'''])
    _next_sample_flag[''')
        _v = VFFSL(SL,"momentGroupCount",True) + 1 # u'${momentGroupCount + 1}' on line 113, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupCount + 1}')) # from line 113, col 23.
        write(u'''] = true;
  else {
    _break_next = false;
    _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 116, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 116, col 6.
        write(u'''_break_next = _''')
        _v = VFFSL(SL,"integrator.name",True) # u'${integrator.name}' on line 116, col 44
        if _v is not None: write(_filter(_v, rawExpr=u'${integrator.name}')) # from line 116, col 44.
        write(u'''_setup_sampling(_next_sample_flag, _next_sample_counter);
  }
}

if ( (_''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 120, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 120, col 8.
        write(u'''_local + _step)*(1.0 + _EPSILON) > _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 120, col 67
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 120, col 67.
        write(u'''_break_next) {
  _break_next = true;
  _LOG(_SAMPLE_LOG_LEVEL, "Current timestep: %e\\n", _old_step);
  _step = _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 123, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 123, col 12.
        write(u'''_break_next - _''')
        _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 123, col 50
        if _v is not None: write(_filter(_v, rawExpr=u'${propagationDimension}')) # from line 123, col 50.
        write(u'''_local;
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Output.tmpl
        # 
        # Created by Graham Dennis on 2007-08-26.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''








''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    featureName = 'Output'

    _mainCheetahMethod_for_Output= 'writeBody'

## END CLASS DEFINITION

if not hasattr(Output, '_initCheetahAttributes'):
    templateAPIClass = getattr(Output, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Output)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Output()).run()


