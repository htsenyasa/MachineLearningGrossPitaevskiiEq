#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Features._ErrorCheck import _ErrorCheck

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.29573
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/ErrorCheck.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Feb  4 18:39:07 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ErrorCheck(_ErrorCheck):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ErrorCheck, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: error check at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''error check''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def globals(self, **KWS):



        ## CHEETAH: generated from @def globals at line 27, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(ErrorCheck, self).globals()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''bool _half_step;
''')
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 32, col 3
            momentGroupOutputField = VFFSL(SL,"momentGroup.outputField",True)
            write(u'''
// Arrays for full- and half-step moment group results
real* _''')
            _v = VFFSL(SL,"momentGroupOutputField.name",True) # u'${momentGroupOutputField.name}' on line 36, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupOutputField.name}')) # from line 36, col 8.
            write(u'''_fullstep;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def topLevelSequenceBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def topLevelSequenceBegin($dict) at line 41, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #  Loop over moment groups allocating half step array
        #  and saving the pointer to the original array
        #  Note that we allocate the half step array now and not
        #  later when we actually need it so that if allocating it would
        #  cause us to run out of virtual memory, we do that at the *start*
        #  of the simulation, not half way through
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 49, col 3
            momentGroupOutputField = VFFSL(SL,"momentGroup.outputField",True)
            write(u'''
_''')
            _v = VFFSL(SL,"momentGroupOutputField.name",True) # u'${momentGroupOutputField.name}' on line 52, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupOutputField.name}')) # from line 52, col 2.
            write(u'''_fullstep = _''')
            _v = VFFSL(SL,"momentGroup.processedVector.id",True) # u'${momentGroup.processedVector.id}' on line 52, col 45
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroup.processedVector.id}')) # from line 52, col 45.
            write(u''';
// _''')
            _v = VFFSL(SL,"momentGroupOutputField.name",True) # u'${momentGroupOutputField.name}' on line 53, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupOutputField.name}')) # from line 53, col 5.
            write(u'''_halfstep has already been allocated
''')
        write(u'''
for (_half_step = false; ; _half_step = true)
{
  if (!_half_step) {
    _LOG(_SIMULATION_LOG_LEVEL, "Beginning full step integration ...\\n");
''')
        #  Loop over the moment groups setting the output field to the fullstep fiel
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 61, col 3
            momentGroupOutputField = VFFSL(SL,"momentGroup.outputField",True)
            write(u'''    
    _active_''')
            _v = VFFSL(SL,"momentGroup.processedVector.id",True) # u'${momentGroup.processedVector.id}' on line 64, col 13
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroup.processedVector.id}')) # from line 64, col 13.
            write(u''' = _''')
            _v = VFFSL(SL,"momentGroupOutputField.name",True) # u'${momentGroupOutputField.name}' on line 64, col 50
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupOutputField.name}')) # from line 64, col 50.
            write(u'''_fullstep;
''')
        write(u'''  }
  else {
    _LOG(_SIMULATION_LOG_LEVEL, "Beginning half step integration ...\\n");
''')
        #  Loop over the moment groups setting the output field to the already-allocated halfstep field
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 70, col 3
            momentGroupOutputField = VFFSL(SL,"momentGroup.outputField",True)
            write(u'''    
''')
            for aliasName in momentGroup.processedVector.aliases: # generated from line 73, col 5
                if not aliasName==''.join([u'_',str(VFFSL(SL,"momentGroupOutputField.name",True)),u'_halfstep']): # generated from line 74, col 7
                    write(u'''    _active_''')
                    _v = VFFSL(SL,"momentGroup.processedVector.id",True) # u'${momentGroup.processedVector.id}' on line 75, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${momentGroup.processedVector.id}')) # from line 75, col 13.
                    write(u''' = ''')
                    _v = VFFSL(SL,"aliasName",True) # u'$aliasName' on line 75, col 49
                    if _v is not None: write(_filter(_v, rawExpr=u'$aliasName')) # from line 75, col 49.
                    write(u''';
    ''')
                    _v = VFN(VFN(VFFSL(SL,"momentGroup.processedVector",True),"functions",True)['initialise'],"call",False)() # u"${momentGroup.processedVector.functions['initialise'].call()}" on line 76, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u"${momentGroup.processedVector.functions['initialise'].call()}")) # from line 76, col 5.
                    write(u'''
''')
            write(u'''    
    _active_''')
            _v = VFFSL(SL,"momentGroup.processedVector.id",True) # u'${momentGroup.processedVector.id}' on line 80, col 13
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroup.processedVector.id}')) # from line 80, col 13.
            write(u''' = _''')
            _v = VFFSL(SL,"momentGroupOutputField.name",True) # u'${momentGroupOutputField.name}' on line 80, col 50
            if _v is not None: write(_filter(_v, rawExpr=u'${momentGroupOutputField.name}')) # from line 80, col 50.
            write(u'''_halfstep;
''')
        write(u'''  }
  
''')
        VFFSL(SL,"dict",True)['extraIndent'] += 2
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def topLevelSequenceEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def topLevelSequenceEnd($dict) at line 88, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''  
  if (_half_step)
      break;
}
''')
        VFFSL(SL,"dict",True)['extraIndent'] -= 2
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionImplementationBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionImplementationBegin($dict) at line 100, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        momentGroup = dict['caller']
        dependentVariables = dict['dependentVariables']
        fieldName = VFFSL(SL,"momentGroup.outputField.name",True)
        # 
        #  So our job is to create 'error_' versions of all of the variables in the momentGroup's outputField.
        newVariableDict = {'vector': VFFSL(SL,"momentGroup.processedVector",True),                           'arrayName': ''.join([u'_',str(VFFSL(SL,"fieldName",True)),u'_fullstep']),                           'components': ['error_' + component for component in VFFSL(SL,"momentGroup.processedVector.components",True)],                          }
        dependentVariables.append(newVariableDict)
        # 
        #  Now return the template that will be used to create the error vector
        write(u'''// Copy the error into the fullstep array
_''')
        _v = VFFSL(SL,"fieldName",True) # u'${fieldName}' on line 115, col 2
        if _v is not None: write(_filter(_v, rawExpr=u'${fieldName}')) # from line 115, col 2.
        write(u'''_fullstep[$index] = _''')
        _v = VFFSL(SL,"fieldName",True) # u'${fieldName}' on line 115, col 36
        if _v is not None: write(_filter(_v, rawExpr=u'${fieldName}')) # from line 115, col 36.
        write(u'''_fullstep[$index] - _''')
        _v = VFFSL(SL,"fieldName",True) # u'${fieldName}' on line 115, col 70
        if _v is not None: write(_filter(_v, rawExpr=u'${fieldName}')) # from line 115, col 70.
        write(u'''_halfstep[$index];
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def createFixedStepVariable(self, dict, **KWS):



        ## CHEETAH: generated from @def createFixedStepVariable($dict) at line 119, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
// If we are doing half-step integration, divide the step size by 2
if (_half_step)
  _step /= 2.0;
// Regardless, the step size for generated noise is the half-step
_noiseStep /= 2.0;
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def createToleranceVariable(self, dict, **KWS):



        ## CHEETAH: generated from @def createToleranceVariable($dict) at line 128, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
// If we are doing half-step integration, divide the tolerance by 16
if (_half_step)
  _tolerance /= 16.0;
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateFixedStepInnerLoopBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateFixedStepInnerLoopBegin($dict) at line 135, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        write(u'''
// If we are doing half-step integration, then we need to do each integrate step twice (but with half the step size)
for (int _error_check_loop_iter = (_half_step ? 2 : 1); _error_check_loop_iter > 0; _error_check_loop_iter--) {
''')
        VFFSL(SL,"dict",True)['extraIndent'] += 2
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def integrateFixedStepInnerLoopEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def integrateFixedStepInnerLoopEnd($dict) at line 145, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''}
''')
        VFFSL(SL,"dict",True)['extraIndent'] -= 2
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutFunctionImplementationBody(self, dict, **KWS):



        ## CHEETAH: generated from @def writeOutFunctionImplementationBody($dict) at line 152, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        momentGroup = dict['caller']
        processedVector = VFFSL(SL,"momentGroup.processedVector",True)
        outputFieldName = momentGroup.outputField.name
        write(u'''_active_''')
        _v = VFFSL(SL,"processedVector.id",True) # u'${processedVector.id}' on line 156, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${processedVector.id}')) # from line 156, col 9.
        write(u''' = _''')
        _v = VFFSL(SL,"outputFieldName",True) # u'${outputFieldName}' on line 156, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${outputFieldName}')) # from line 156, col 34.
        write(u'''_fullstep;

''')
        _v = VFN(VFFSL(SL,"processedVector",True),"findMaximum",False)('_max_step_error', basis = momentGroup.outputBasis) # u"${processedVector.findMaximum('_max_step_error', basis = momentGroup.outputBasis)}" on line 158, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${processedVector.findMaximum('_max_step_error', basis = momentGroup.outputBasis)}")) # from line 158, col 1.
        write(u'''
// Restore active pointer for processed vector
_active_''')
        _v = VFFSL(SL,"processedVector.id",True) # u'${processedVector.id}' on line 161, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${processedVector.id}')) # from line 161, col 9.
        write(u''' = _''')
        _v = VFFSL(SL,"outputFieldName",True) # u'${outputFieldName}' on line 161, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${outputFieldName}')) # from line 161, col 34.
        write(u'''_halfstep;

_LOG(_SIMULATION_LOG_LEVEL, "Maximum step error in moment group ''')
        _v = VFFSL(SL,"momentGroup.number",True)+1 # u'${momentGroup.number+1}' on line 163, col 65
        if _v is not None: write(_filter(_v, rawExpr=u'${momentGroup.number+1}')) # from line 163, col 65.
        write(u''' was %e\\n", _max_step_error);
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # ErrorCheck.tmpl
        # 
        # Created by Graham Dennis on 2007-08-26.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''





''')
        # 
        #   This function returns a Cheetah template string suitable for passing to loopOverVectorsWithInnerContentTemplate
        write(u'''




''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    featureName = 'ErrorCheck'

    _mainCheetahMethod_for_ErrorCheck= 'writeBody'

## END CLASS DEFINITION

if not hasattr(ErrorCheck, '_initCheetahAttributes'):
    templateAPIClass = getattr(ErrorCheck, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ErrorCheck)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ErrorCheck()).run()


