#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Features._ChunkedOutput import _ChunkedOutput

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.270118
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/ChunkedOutput.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Aug  1 11:52:34 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ChunkedOutput(_ChunkedOutput):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ChunkedOutput, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: Chunked Output at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Chunked Output''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def defines(self, **KWS):



        ## CHEETAH: generated from @def defines at line 27, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(ChunkedOutput, self).defines()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''
#define _CHUNK_SIZE ((long)''')
        _v = VFFSL(SL,"chunkSize",True) # u'$chunkSize' on line 32, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'$chunkSize')) # from line 32, col 28.
        write(u''')
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def preAllocation(self, dict, **KWS):



        ## CHEETAH: generated from @def preAllocation($dict) at line 36, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for mg in VFFSL(SL,"momentGroups",True): # generated from line 38, col 3
            propDimRep = mg.propDimRep
            if not propDimRep: # generated from line 40, col 5
                continue
            _v = VFFSL(SL,"propDimRep.localLattice",True) # u'${propDimRep.localLattice}' on line 43, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.localLattice}')) # from line 43, col 1.
            write(u''' = ''')
            _v = VFFSL(SL,"propDimRep.globalLattice",True) # u'${propDimRep.globalLattice}' on line 43, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.globalLattice}')) # from line 43, col 30.
            write(u''';
if (''')
            _v = VFN(VFFSL(SL,"mg.processedVector",True),"sizeInBasis",False)(mg.codeBlocks['sampling'].basis) # u"${mg.processedVector.sizeInBasis(mg.codeBlocks['sampling'].basis)}" on line 44, col 5
            if _v is not None: write(_filter(_v, rawExpr=u"${mg.processedVector.sizeInBasis(mg.codeBlocks['sampling'].basis)}")) # from line 44, col 5.
            write(u''')
  ''')
            _v = VFFSL(SL,"propDimRep.localLattice",True) # u'${propDimRep.localLattice}' on line 45, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.localLattice}')) # from line 45, col 3.
            write(u''' = MIN((_CHUNK_SIZE-1) / (''')
            _v = VFN(VFFSL(SL,"mg.processedVector",True),"sizeInBasis",False)(mg.codeBlocks['sampling'].basis) # u"${mg.processedVector.sizeInBasis(mg.codeBlocks['sampling'].basis)}" on line 45, col 55
            if _v is not None: write(_filter(_v, rawExpr=u"${mg.processedVector.sizeInBasis(mg.codeBlocks['sampling'].basis)}")) # from line 45, col 55.
            write(u''' / ''')
            _v = VFFSL(SL,"propDimRep.globalLattice",True) # u'${propDimRep.globalLattice}' on line 45, col 124
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.globalLattice}')) # from line 45, col 124.
            write(u''' * sizeof(''')
            _v = VFFSL(SL,"mg.processedVector.type",True) # u'${mg.processedVector.type}' on line 45, col 161
            if _v is not None: write(_filter(_v, rawExpr=u'${mg.processedVector.type}')) # from line 45, col 161.
            write(u''')) + 1, ''')
            _v = VFFSL(SL,"propDimRep.globalLattice",True) # u'${propDimRep.globalLattice}' on line 45, col 195
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.globalLattice}')) # from line 45, col 195.
            write(u''');
''')
            _v = VFFSL(SL,"insertCodeForFeatures",False)('findMax', ['Driver'], {'variable': '&' + propDimRep.localLattice, 'count': 1, 'op': 'min', 'type': 'long'}) # u"${insertCodeForFeatures('findMax', ['Driver'], {'variable': '&' + propDimRep.localLattice, 'count': 1, 'op': 'min', 'type': 'long'}), autoIndent=True}" on line 46, col 1
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeatures('findMax', ['Driver'], {'variable': '&' + propDimRep.localLattice, 'count': 1, 'op': 'min', 'type': 'long'}), autoIndent=True}")) # from line 46, col 1.
            write(u'''// Now find the minimum and broadcast it.
''')
        #  Initialise output files
        outputFeature = VFFSL(SL,"features",True)['Output']
        _v = VFN(VFFSL(SL,"outputFeature.outputFormat",True),"writeOutSetup",False)(''.join([u'("',str(VFFSL(SL,"outputFeature.filename",True)),u'" + gsArgsAndValues).c_str()']), outputFeature) # u'${outputFeature.outputFormat.writeOutSetup(c\'("${outputFeature.filename}" + gsArgsAndValues).c_str()\', outputFeature)}' on line 51, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${outputFeature.outputFormat.writeOutSetup(c\'("${outputFeature.filename}" + gsArgsAndValues).c_str()\', outputFeature)}')) # from line 51, col 1.
        _v = VFFSL(SL,"outputFeature.outputFormat.writeOutTearDown",True) # u'${outputFeature.outputFormat.writeOutTearDown}' on line 52, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${outputFeature.outputFormat.writeOutTearDown}')) # from line 52, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def sampleFunctionEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def sampleFunctionEnd($dict) at line 56, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        mg = dict['caller']
        propDimRep = mg.propDimRep
        # 
        if not propDimRep: # generated from line 61, col 3
            return
        write(u'''if (''')
        _v = VFFSL(SL,"propDimRep.index",True) # u'${propDimRep.index}' on line 64, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.index}')) # from line 64, col 5.
        write(u''' == ''')
        _v = VFFSL(SL,"propDimRep.localLattice",True) # u'${propDimRep.localLattice}' on line 64, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.localLattice}')) # from line 64, col 28.
        write(u'''
    && (''')
        _v = VFFSL(SL,"propDimRep.index",True) # u'${propDimRep.index}' on line 65, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.index}')) # from line 65, col 9.
        write(u''' + ''')
        _v = VFFSL(SL,"propDimRep.localOffset",True) # u'${propDimRep.localOffset}' on line 65, col 31
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.localOffset}')) # from line 65, col 31.
        write(u''') != ''')
        _v = VFFSL(SL,"propDimRep.globalLattice",True) # u'${propDimRep.globalLattice}' on line 65, col 61
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.globalLattice}')) # from line 65, col 61.
        write(u''')
{
  ''')
        _v = VFN(VFN(VFFSL(SL,"mg",True),"functions",True)['writeOut'],"call",False)(_outfile='NULL') # u"${mg.functions['writeOut'].call(_outfile='NULL'), autoIndent=True}" on line 67, col 3
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${mg.functions['writeOut'].call(_outfile='NULL'), autoIndent=True}")) # from line 67, col 3.
        write(u'''
  _LOG(_SIMULATION_LOG_LEVEL, "Written a chunk of moment group ''')
        _v = VFFSL(SL,"mg.number",True)+1 # u'${mg.number+1}' on line 68, col 64
        if _v is not None: write(_filter(_v, rawExpr=u'${mg.number+1}')) # from line 68, col 64.
        write(u'''\\n");
  ''')
        _v = VFFSL(SL,"propDimRep.localOffset",True) # u'${propDimRep.localOffset}' on line 69, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.localOffset}')) # from line 69, col 3.
        write(u''' += ''')
        _v = VFFSL(SL,"propDimRep.index",True) # u'${propDimRep.index}' on line 69, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.index}')) # from line 69, col 32.
        write(u''';
  ''')
        _v = VFFSL(SL,"propDimRep.index",True) # u'${propDimRep.index}' on line 70, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.index}')) # from line 70, col 3.
        write(u''' = 0;
''')
        if mg.integratingComponents: # generated from line 71, col 3
            write(u'''  ''')
            _v = VFFSL(SL,"mg.rawVector.initialise",True) # u'${mg.rawVector.initialise, autoIndent=True}' on line 72, col 3
            if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u'${mg.rawVector.initialise, autoIndent=True}')) # from line 72, col 3.
        write(u'''}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeOutBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def writeOutBegin($dict) at line 77, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for mg in VFFSL(SL,"momentGroups",True): # generated from line 79, col 3
            propDimRep = mg.propDimRep
            if not propDimRep: # generated from line 81, col 5
                continue
            _v = VFFSL(SL,"propDimRep.localLattice",True) # u'${propDimRep.localLattice}' on line 84, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.localLattice}')) # from line 84, col 1.
            write(u''' = ''')
            _v = VFFSL(SL,"propDimRep.index",True) # u'${propDimRep.index}' on line 84, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${propDimRep.index}')) # from line 84, col 30.
            write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # ChunkedOutput.tmpl
        # 
        # Created by Graham Dennis on 2010-09-17.
        # 
        # Copyright (c) 2010-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''




''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    featureName = 'ChunkedOutput'

    _mainCheetahMethod_for_ChunkedOutput= 'writeBody'

## END CLASS DEFINITION

if not hasattr(ChunkedOutput, '_initCheetahAttributes'):
    templateAPIClass = getattr(ChunkedOutput, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ChunkedOutput)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ChunkedOutput()).run()


