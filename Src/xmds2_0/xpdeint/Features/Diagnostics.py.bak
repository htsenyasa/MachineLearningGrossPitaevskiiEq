#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Features._Diagnostics import _Diagnostics
from xpdeint.Geometry.UniformDimensionRepresentation import UniformDimensionRepresentation

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.313475
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Features/Diagnostics.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Feb  4 18:39:07 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Diagnostics(_Diagnostics):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Diagnostics, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: Simulation diagnostics at line 26, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''Simulation diagnostics''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def timestepErrorBegin(self, dict, **KWS):



        ## CHEETAH: generated from @def timestepErrorBegin($dict) at line 34, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        vector = dict['vector']
        # 
        write(u'''real _component_errors[_''')
        _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 38, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 38, col 25.
        write(u'''_ncomponents];
for (long _i0 = 0; _i0 < _''')
        _v = VFFSL(SL,"vector.id",True) # u'${vector.id}' on line 39, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${vector.id}')) # from line 39, col 27.
        write(u'''_ncomponents; _i0++)
  _component_errors[_i0] = 0.0;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def timestepErrorEnd(self, dict, **KWS):



        ## CHEETAH: generated from @def timestepErrorEnd($dict) at line 44, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        vector = dict['vector']
        integrator = dict['caller']
        # 
        _v = VFFSL(SL,"insertCodeForFeatures",False)('findMax', ['Driver'], {'variable': '_component_errors', 'count': ''.join([u'_',str(VFFSL(SL,"vector.id",True)),u'_ncomponents'])}) # u"${insertCodeForFeatures('findMax', ['Driver'], {'variable': '_component_errors', 'count': c'_${vector.id}_ncomponents'})}" on line 49, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeatures('findMax', ['Driver'], {'variable': '_component_errors', 'count': c'_${vector.id}_ncomponents'})}")) # from line 49, col 1.
        write(u'''if (_error > ''')
        _v = VFFSL(SL,"integrator.tolerance",True) # u'$integrator.tolerance' on line 50, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'$integrator.tolerance')) # from line 50, col 14.
        write(u''')
''')
        if len(VFFSL(SL,"vector.field.dimensions",True)): # generated from line 51, col 3
            write(u'''  _LOG(_WARNING_LOG_LEVEL, "''')
            _v = ', '.join([componentName + '_error: %.1e (cutoff: %.1e)' for componentName in vector.components]) # u"${', '.join([componentName + '_error: %.1e (cutoff: %.1e)' for componentName in vector.components])}" on line 52, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"${', '.join([componentName + '_error: %.1e (cutoff: %.1e)' for componentName in vector.components])}")) # from line 52, col 29.
            write(u'''\\n",
                           ''')
            _v = ', '.join([''.join([u'_component_errors[',str(VFFSL(SL,"componentIndex",True)),u'], _cutoff[',str(VFFSL(SL,"componentIndex",True)),u']']) for componentIndex in range(len(vector.components))]) # u"${', '.join([c'_component_errors[${componentIndex}], _cutoff[${componentIndex}]' for componentIndex in range(len(vector.components))])}" on line 53, col 28
            if _v is not None: write(_filter(_v, rawExpr=u"${', '.join([c'_component_errors[${componentIndex}], _cutoff[${componentIndex}]' for componentIndex in range(len(vector.components))])}")) # from line 53, col 28.
            write(u''');
''')
        else: # generated from line 54, col 3
            write(u'''  _LOG(_WARNING_LOG_LEVEL, "''')
            _v = ', '.join([componentName + '_error: %.1e (size: %.1e)' for componentName in vector.components]) # u"${', '.join([componentName + '_error: %.1e (size: %.1e)' for componentName in vector.components])}" on line 55, col 29
            if _v is not None: write(_filter(_v, rawExpr=u"${', '.join([componentName + '_error: %.1e (size: %.1e)' for componentName in vector.components])}")) # from line 55, col 29.
            write(u'''\\n",
                           ''')
            _v = ', '.join([''.join([u'_component_errors[',str(VFFSL(SL,"componentIndex",True)),u'], mod(_active_',str(VFFSL(SL,"vector.id",True)),u'[',str(VFFSL(SL,"componentIndex",True)),u'])']) for componentIndex in range(len(vector.components))]) # u"${', '.join([c'_component_errors[${componentIndex}], mod(_active_${vector.id}[${componentIndex}])' for componentIndex in range(len(vector.components))])}" on line 56, col 28
            if _v is not None: write(_filter(_v, rawExpr=u"${', '.join([c'_component_errors[${componentIndex}], mod(_active_${vector.id}[${componentIndex}])' for componentIndex in range(len(vector.components))])}")) # from line 56, col 28.
            write(u''');
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def updateMaximumError(self, dict, **KWS):



        ## CHEETAH: generated from @def updateMaximumError($dict) at line 61, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''if (_temp_error > _component_errors[_i1])
  _component_errors[_i1] = _temp_error;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def adaptiveStepFailed(self, dict, **KWS):



        ## CHEETAH: generated from @def adaptiveStepFailed($dict) at line 76, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        integrator = dict['caller']
        # 
        write(u'''if (_error == 2.0*''')
        _v = VFFSL(SL,"integrator.tolerance",True) # u'${integrator.tolerance}' on line 80, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${integrator.tolerance}')) # from line 80, col 19.
        write(u''')
  _LOG(_SEGMENT_LOG_LEVEL, "NaN hit on this step. Retrying. (Error set to %e)\\n", 2.0*''')
        _v = VFFSL(SL,"integrator.tolerance",True) # u'${integrator.tolerance}' on line 81, col 87
        if _v is not None: write(_filter(_v, rawExpr=u'${integrator.tolerance}')) # from line 81, col 87.
        write(u''');
_LOG(_SEGMENT_LOG_LEVEL, "Step size %e failed, ''')
        _v = VFFSL(SL,"integrator.propagationDimension",True) # u'${integrator.propagationDimension}' on line 82, col 48
        if _v is not None: write(_filter(_v, rawExpr=u'${integrator.propagationDimension}')) # from line 82, col 48.
        write(u''' = %e, error = %e\\n", _step, ''')
        _v = VFFSL(SL,"integrator.propagationDimension",True) # u'${integrator.propagationDimension}' on line 82, col 111
        if _v is not None: write(_filter(_v, rawExpr=u'${integrator.propagationDimension}')) # from line 82, col 111.
        write(u''', _error);
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def nonlocalAccessValidationFunctionContents(self, dimRepsNeeded, nonlocalAccessString, componentName, func, **KWS):



        ## CHEETAH: generated from @def nonlocalAccessValidationFunctionContents($dimRepsNeeded, $nonlocalAccessString, $componentName, $func) at line 86, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        for dimRep in [dimRep for dimRep in dimRepsNeeded if dimRep.type == 'long' and isinstance(dimRep, UniformDimensionRepresentation)]: # generated from line 88, col 3
            write(u'''if (''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 89, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.loopIndex}')) # from line 89, col 5.
            write(u''' < 0 || ''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 89, col 32
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.loopIndex}')) # from line 89, col 32.
            write(u''' >= ''')
            _v = VFFSL(SL,"dimRep.globalLattice",True) # u'${dimRep.globalLattice}' on line 89, col 55
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.globalLattice}')) # from line 89, col 55.
            write(u''') {
  _LOG(
    _ERROR_LOG_LEVEL,
    "Error: Invalid access of dimension ''')
            _v = VFFSL(SL,"dimRep.name",True) # u'${dimRep.name}' on line 92, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.name}')) # from line 92, col 41.
            write(u''' in %s on line %i.\\n"
    "       Value %li is out of range (%li, %li).\\n"
    "       Error was caused by accessing variable \'''')
            _v = VFFSL(SL,"componentName",True) # u'${componentName}' on line 94, col 53
            if _v is not None: write(_filter(_v, rawExpr=u'${componentName}')) # from line 94, col 53.
            write(u'''\' nonlocally.\\n",
    filename, line_number, ''')
            _v = VFFSL(SL,"dimRep.loopIndex",True) # u'${dimRep.loopIndex}' on line 95, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.loopIndex}')) # from line 95, col 28.
            write(u''' + ''')
            _v = VFFSL(SL,"dimRep.minimum",True) # u'${dimRep.minimum}' on line 95, col 50
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.minimum}')) # from line 95, col 50.
            write(u''', ''')
            _v = VFFSL(SL,"dimRep.minimum",True) # u'${dimRep.minimum}' on line 95, col 69
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.minimum}')) # from line 95, col 69.
            write(u''', ''')
            _v = VFFSL(SL,"dimRep.maximum",True) # u'${dimRep.maximum}' on line 95, col 88
            if _v is not None: write(_filter(_v, rawExpr=u'${dimRep.maximum}')) # from line 95, col 88.
            write(u'''
  );
}
''')
        write(u'''return ''')
        _v = VFFSL(SL,"nonlocalAccessString",True) # u'${nonlocalAccessString}' on line 99, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${nonlocalAccessString}')) # from line 99, col 8.
        write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Diagnostics.tmpl
        # 
        # Created by Graham Dennis on 2008-04-08.
        # 
        # Copyright (c) 2008-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''


''')
        #  As more gets added to this we are going to want a way of turning parts of this on and off
        #  The way I think this should be done in the future is to have a _DIAGNOSTIC_LOG function that instead
        #  of a log level includes a 'log location' string or the like, then the user can pass a list of
        #  log locations to the diagnostics feature, and those 'log locations' are turned on.
        write(u'''



''')
        #  @def adaptiveStepSucceeded($dict)
        #    @#
        #    @set $integrator = dict['caller']
        #    @#
        #  _LOG(_WARNING_LOG_LEVEL, "Step size %e succeeded, ${integrator.propagationDimension} = %e, error = %e\n", _step, ${integrator.propagationDimension}, _error);
        #    @#
        #  @end def
        write(u'''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    featureName = 'Diagnostics'

    _mainCheetahMethod_for_Diagnostics= 'writeBody'

## END CLASS DEFINITION

if not hasattr(Diagnostics, '_initCheetahAttributes'):
    templateAPIClass = getattr(Diagnostics, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Diagnostics)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Diagnostics()).run()


