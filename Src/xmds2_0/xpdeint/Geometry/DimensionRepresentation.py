#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import builtins as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Geometry._DimensionRepresentation import _DimensionRepresentation

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975071.747762
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:31 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Geometry/DimensionRepresentation.tmpl'
__CHEETAH_srcLastModified__ = 'Tue May 22 16:27:12 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class DimensionRepresentation(_DimensionRepresentation):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(DimensionRepresentation, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in list(KWs.items()):
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def defines(self, **KWS):



        ## CHEETAH: generated from @def defines at line 24, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(DimensionRepresentation, self).defines()
        if _v is not None: write(_filter(_v))
        if VFFSL(SL,"silent",True): # generated from line 27, col 3
            return _dummyTrans and trans.response().getvalue() or ""
        # 
        write('''#define ''')
        _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 31, col 9
        if _v is not None: write(_filter(_v, rawExpr='${globalLattice}')) # from line 31, col 9.
        write(''' ((int)''')
        _v = VFFSL(SL,"runtimeLattice",True) # u'${runtimeLattice}' on line 31, col 32
        if _v is not None: write(_filter(_v, rawExpr='${runtimeLattice}')) # from line 31, col 32.
        write(''')
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def globals(self, **KWS):



        ## CHEETAH: generated from @def globals at line 35, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(DimensionRepresentation, self).globals()
        if _v is not None: write(_filter(_v))
        # 
        if VFFSL(SL,"silent",True): # generated from line 39, col 3
            return _dummyTrans and trans.response().getvalue() or ""
        # 
        #  Note: Here we just *define* the variables for which we're going to
        #  allocate space later (in allocate() below). This is needed in case the
        #  lattice size is specified at runtime - if we allocate space here, it
        #  will use the default argument lattice size, rather than the one set
        #  in the argument processing code in the main() function.
        # 
        #  Make sure we don't create a variable for the propagtion direction dimension
        if VFFSL(SL,"runtimeLattice",True): # generated from line 50, col 3
            _v = VFFSL(SL,"type",True) # u'${type}' on line 51, col 1
            if _v is not None: write(_filter(_v, rawExpr='${type}')) # from line 51, col 1.
            write('''* ''')
            _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 51, col 10
            if _v is not None: write(_filter(_v, rawExpr='${arrayName}')) # from line 51, col 10.
            write(''' = NULL;
''')
        # 
        if VFFSL(SL,"hasLocalOffset",True): # generated from line 54, col 3
            write('''ptrdiff_t ''')
            _v = VFFSL(SL,"localLattice",True) # u'$localLattice' on line 55, col 11
            if _v is not None: write(_filter(_v, rawExpr='$localLattice')) # from line 55, col 11.
            write(''' = 0;
ptrdiff_t ''')
            _v = VFFSL(SL,"localOffset",True) # u'$localOffset' on line 56, col 11
            if _v is not None: write(_filter(_v, rawExpr='$localOffset')) # from line 56, col 11.
            write(''' = 0;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def allocate(self, **KWS):



        ## CHEETAH: generated from @def allocate(self) at line 61, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"silent",True): # generated from line 62, col 3
            return _dummyTrans and trans.response().getvalue() or ""
        #  We allocate an extra point just in case
        #  Also make sure we don't create a variable for the propagtion direction dimension
        if VFFSL(SL,"runtimeLattice",True): # generated from line 67, col 3
            _v = VFFSL(SL,"arrayName",True) # u'${arrayName}' on line 68, col 1
            if _v is not None: write(_filter(_v, rawExpr='${arrayName}')) # from line 68, col 1.
            write(''' = (''')
            _v = VFFSL(SL,"type",True) # u'${type}' on line 68, col 17
            if _v is not None: write(_filter(_v, rawExpr='${type}')) # from line 68, col 17.
            write('''*) xmds_malloc(sizeof(''')
            _v = VFFSL(SL,"type",True) # u'${type}' on line 68, col 46
            if _v is not None: write(_filter(_v, rawExpr='${type}')) # from line 68, col 46.
            write(''') * (''')
            _v = VFFSL(SL,"globalLattice",True) # u'${globalLattice}' on line 68, col 58
            if _v is not None: write(_filter(_v, rawExpr='${globalLattice}')) # from line 68, col 58.
            write('''+1));
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # DimensionRepresentation.tmpl
        # 
        # Created by Graham Dennis on 2008-08-01.
        # 
        # Copyright (c) 2008-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_DimensionRepresentation= 'writeBody'

## END CLASS DEFINITION

if not hasattr(DimensionRepresentation, '_initCheetahAttributes'):
    templateAPIClass = getattr(DimensionRepresentation, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(DimensionRepresentation)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=DimensionRepresentation()).run()


