#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import builtins as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Segments.SequenceSegment import SequenceSegment

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.533359
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Segments/TopLevelSequenceElement.tmpl'
__CHEETAH_srcLastModified__ = 'Sat Feb  4 18:39:07 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class TopLevelSequenceElement(SequenceSegment):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(TopLevelSequenceElement, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in list(KWs.items()):
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: segment $segmentNumber (Top level sequence) at line 30, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''segment ''')
        _v = VFFSL(SL,"segmentNumber",True) # u'$segmentNumber' on line 30, col 27
        if _v is not None: write(_filter(_v, rawExpr='$segmentNumber')) # from line 30, col 27.
        write(''' (Top level sequence)''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def functionImplementations(self, **KWS):



        ## CHEETAH: generated from @def functionImplementations at line 32, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #  Make this empty as the content of the top-level sequence will be written by
        #  a simulation driver
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def topLevelSequenceInnerContent(self, **KWS):



        ## CHEETAH: generated from @def topLevelSequenceInnerContent at line 39, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = VFFSL(SL,"propagationDimension",True) # u'$propagationDimension' on line 41, col 1
        if _v is not None: write(_filter(_v, rawExpr='$propagationDimension')) # from line 41, col 1.
        write(''' = 0.0;
''')
        # 
        write('''
''')
        fieldsNotToInitialise = set()
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 45, col 3
            #  Initialise the raw vector
            _v = VFN(VFN(VFFSL(SL,"momentGroup.rawVector",True),"functions",True)['initialise'],"call",False)() # u"${momentGroup.rawVector.functions['initialise'].call()}" on line 47, col 1
            if _v is not None: write(_filter(_v, rawExpr="${momentGroup.rawVector.functions['initialise'].call()}")) # from line 47, col 1.
            write('''
''')
            #  Don't call the initialise method as that will cause
            #  its aliases to be initialised, which is bad.
            fieldsNotToInitialise.add(momentGroup.outputField)
        # 
        vectorsToInitialise = set()
        for field in [f for f in VFFSL(SL,"fields",True) if f not in fieldsNotToInitialise]: # generated from line 54, col 3
            vectorsToInitialise.update([v for v in field.managedVectors if not (v.isComputed or v.isNoise)])
        # 
        for vector in self.evaluationOrderForVectors(vectorsToInitialise, static = True): # generated from line 58, col 3
            if vector.isComputed: # generated from line 59, col 5
                #  Computed vectors were explicitly removed from the set of vectors that need
                #  initialisation. The only way we can get one now is if one of the other vectors depends on this
                #  vector. In this case, we must provide the information the other vector is requiring. To do this,
                #  we must evaluate the vector, not initialise it.
                _v = VFN(VFN(VFFSL(SL,"vector",True),"functions",True)['evaluate'],"call",False)() # u"${vector.functions['evaluate'].call()}" on line 64, col 1
                if _v is not None: write(_filter(_v, rawExpr="${vector.functions['evaluate'].call()}")) # from line 64, col 1.
                write('''
''')
            else: # generated from line 65, col 5
                _v = VFFSL(SL,"vector.initialise",True) # u'${vector.initialise}' on line 66, col 1
                if _v is not None: write(_filter(_v, rawExpr='${vector.initialise}')) # from line 66, col 1.
        # 
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 70, col 3
            #  We only need to set the sample index for the propagation dimension
            #  and only if this moment group has the propagation dimension as one
            #  of its dimensions
            if not VFN(VFFSL(SL,"momentGroup.outputField",True),"hasDimensionName",False)(VFFSL(SL,"propagationDimension",True)): # generated from line 74, col 5
                continue
            write('''_''')
            _v = VFFSL(SL,"momentGroup.outputField.id",True) # u'${momentGroup.outputField.id}' on line 77, col 2
            if _v is not None: write(_filter(_v, rawExpr='${momentGroup.outputField.id}')) # from line 77, col 2.
            write('''_index_''')
            _v = VFFSL(SL,"propagationDimension",True) # u'${propagationDimension}' on line 77, col 38
            if _v is not None: write(_filter(_v, rawExpr='${propagationDimension}')) # from line 77, col 38.
            write(''' = 0;
''')
        # 
        for momentGroup in [x for x in VFFSL(SL,"momentGroups",True) if x.requiresInitialSample]: # generated from line 80, col 3
            write('''_mg''')
            _v = VFFSL(SL,"momentGroup.number",True) # u'${momentGroup.number}' on line 81, col 4
            if _v is not None: write(_filter(_v, rawExpr='${momentGroup.number}')) # from line 81, col 4.
            write('''_sample();
''')
        # 
        _v = VFFSL(SL,"segmentFunctionBody",False)(function=None) # u'${segmentFunctionBody(function=None)}' on line 84, col 1
        if _v is not None: write(_filter(_v, rawExpr='${segmentFunctionBody(function=None)}')) # from line 84, col 1.
        # 
        write('''
''')
        for momentGroup in VFFSL(SL,"momentGroups",True): # generated from line 87, col 3
            write('''_mg''')
            _v = VFFSL(SL,"momentGroup.number",True) # u'${momentGroup.number}' on line 88, col 4
            if _v is not None: write(_filter(_v, rawExpr='${momentGroup.number}')) # from line 88, col 4.
            write('''_process();
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # TopLevelSequenceElement.tmpl
        # 
        # Created by Graham Dennis on 2007-08-27.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write('''
''')
        assert VFFSL(SL,"segmentNumber",True) == 0
        write('''
''')
        # 
        #   Description of template
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    globalNameSpaceName = "topLevelSequence"

    _mainCheetahMethod_for_TopLevelSequenceElement= 'writeBody'

## END CLASS DEFINITION

if not hasattr(TopLevelSequenceElement, '_initCheetahAttributes'):
    templateAPIClass = getattr(TopLevelSequenceElement, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(TopLevelSequenceElement)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=TopLevelSequenceElement()).run()


