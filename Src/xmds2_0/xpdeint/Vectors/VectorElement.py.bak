#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.Vectors._VectorElement import _VectorElement

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.88735
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Vectors/VectorElement.tmpl'
__CHEETAH_srcLastModified__ = 'Fri May 25 16:30:07 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class VectorElement(_VectorElement):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(VectorElement, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def description(self, **KWS):



        ## Generated from @def description: vector $name at line 27, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''vector ''')
        _v = VFFSL(SL,"name",True) # u'$name' on line 27, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 27, col 26.
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def defines(self, **KWS):



        ## CHEETAH: generated from @def defines at line 32, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(VectorElement, self).defines()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''// vector ''')
        _v = VFFSL(SL,"name",True) # u'$name' on line 36, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 36, col 11.
        write(u''' defines
#define _''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 37, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 37, col 10.
        write(u'''_ncomponents ''')
        _v = VFFSL(SL,"nComponents",True) # u'$nComponents' on line 37, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'$nComponents')) # from line 37, col 28.
        write(u'''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def globals(self, **KWS):



        ## CHEETAH: generated from @def globals at line 44, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        _v = super(VectorElement, self).globals()
        if _v is not None: write(_filter(_v))
        # 
        write(u'''// vector ''')
        _v = VFFSL(SL,"name",True) # u'$name' on line 48, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 48, col 11.
        write(u''' globals
size_t ''')
        _v = VFFSL(SL,"allocSize",True) # u'${allocSize}' on line 49, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${allocSize}')) # from line 49, col 8.
        write(u''' = 0;
''')
        _v = VFFSL(SL,"type",True) # u'$type' on line 50, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 50, col 1.
        write(u'''* _''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 50, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 50, col 9.
        write(u''' = NULL;
''')
        _v = VFFSL(SL,"type",True) # u'$type' on line 51, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 51, col 1.
        write(u'''* _active_''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 51, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 51, col 16.
        write(u''' = NULL;
''')
        for aliasName in VFFSL(SL,"aliases",True): # generated from line 52, col 3
            _v = VFFSL(SL,"type",True) # u'$type' on line 53, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 53, col 1.
            write(u'''* ''')
            _v = VFFSL(SL,"aliasName",True) # u'${aliasName}' on line 53, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${aliasName}')) # from line 53, col 8.
            write(u''' = NULL;
''')
        # 
        if VFFSL(SL,"needsTransforms",True): # generated from line 56, col 3
            write(u'''
ptrdiff_t _''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 58, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 58, col 12.
            write(u'''_basis = -1;
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def initialiseFunctionContents(self, function, **KWS):



        ## CHEETAH: generated from @def initialiseFunctionContents($function) at line 66, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        if VFFSL(SL,"integratingComponents",True): # generated from line 68, col 3
            write(u"""// Because we're integrating over dimensions, we need to set the vector to zero.
bzero(_active_""")
            _v = VFFSL(SL,"id",True) # u'${id}' on line 70, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 70, col 15.
            write(u''', sizeof(''')
            _v = VFFSL(SL,"type",True) # u'${type}' on line 70, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 70, col 29.
            write(u''') * ''')
            _v = VFFSL(SL,"allocSize",True) # u'${allocSize}' on line 70, col 40
            if _v is not None: write(_filter(_v, rawExpr=u'${allocSize}')) # from line 70, col 40.
            write(u''');
''')
        if VFFSL(SL,"initialiser",True): # generated from line 72, col 3
            write(u'''
''')
            _v = VFFSL(SL,"initialiser.initialiseVector",True) # u'${initialiser.initialiseVector}' on line 74, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${initialiser.initialiseVector}')) # from line 74, col 1.
        if VFFSL(SL,"needsTransforms",True): # generated from line 76, col 3
            write(u'''
_''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 78, col 2
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 78, col 2.
            write(u'''_basis = ''')
            _v = VFFSL(SL,"basisIndexForBasis",False)(self.initialBasis) # u'$basisIndexForBasis(self.initialBasis)' on line 78, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$basisIndexForBasis(self.initialBasis)')) # from line 78, col 16.
            write(u''';
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def basisTransformFunctionContents(self, function, **KWS):



        ## CHEETAH: generated from @def basisTransformFunctionContents($function) at line 83, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        featureOrdering = ['TransformMultiplexer']
        dict = {'function': function}
        _v = VFFSL(SL,"insertCodeForFeatures",False)('basisTransformFunctionContentsBegin', featureOrdering, dict) # u"${insertCodeForFeatures('basisTransformFunctionContentsBegin', featureOrdering, dict)}" on line 87, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeatures('basisTransformFunctionContentsBegin', featureOrdering, dict)}")) # from line 87, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def initialise(self, **KWS):



        ## CHEETAH: generated from @def initialise at line 94, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        if VFFSL(SL,"needsInitialisation",True): # generated from line 96, col 3
            for aliasName in VFFSL(SL,"aliases",True): # generated from line 97, col 5
                write(u'''_active_''')
                _v = VFFSL(SL,"id",True) # u'${id}' on line 98, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 98, col 9.
                write(u''' = ''')
                _v = VFFSL(SL,"aliasName",True) # u'$aliasName' on line 98, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$aliasName')) # from line 98, col 17.
                write(u''';
''')
                _v = VFN(VFFSL(SL,"functions",True)['initialise'],"call",False)() # u"${functions['initialise'].call()}" on line 99, col 1
                if _v is not None: write(_filter(_v, rawExpr=u"${functions['initialise'].call()}")) # from line 99, col 1.
                write(u'''
''')
            write(u'''_active_''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 101, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 101, col 9.
            write(u''' = _''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 101, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 101, col 18.
            write(u''';
''')
            _v = VFN(VFFSL(SL,"functions",True)['initialise'],"call",False)() # u"${functions['initialise'].call()}" on line 102, col 1
            if _v is not None: write(_filter(_v, rawExpr=u"${functions['initialise'].call()}")) # from line 102, col 1.
            write(u'''
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def allocate(self, **KWS):



        ## CHEETAH: generated from @def allocate at line 110, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
_''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 112, col 2
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 112, col 2.
        write(u''' = (''')
        _v = VFFSL(SL,"type",True) # u'$type' on line 112, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 112, col 11.
        write(u'''*) xmds_malloc(sizeof(''')
        _v = VFFSL(SL,"type",True) # u'${type}' on line 112, col 38
        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 112, col 38.
        write(u''') * MAX(''')
        _v = VFFSL(SL,"allocSize",True) # u'${allocSize}' on line 112, col 53
        if _v is not None: write(_filter(_v, rawExpr=u'${allocSize}')) # from line 112, col 53.
        write(u''',1));
_active_''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 113, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 113, col 9.
        write(u''' = _''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 113, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 113, col 18.
        write(u''';
''')
        for aliasName in VFFSL(SL,"aliases",True): # generated from line 114, col 3
            _v = VFFSL(SL,"aliasName",True) # u'$aliasName' on line 115, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$aliasName')) # from line 115, col 1.
            write(u''' = (''')
            _v = VFFSL(SL,"type",True) # u'$type' on line 115, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 115, col 15.
            write(u'''*) xmds_malloc(sizeof(''')
            _v = VFFSL(SL,"type",True) # u'${type}' on line 115, col 42
            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 115, col 42.
            write(u''') * MAX(''')
            _v = VFFSL(SL,"allocSize",True) # u'${allocSize}' on line 115, col 57
            if _v is not None: write(_filter(_v, rawExpr=u'${allocSize}')) # from line 115, col 57.
            write(u''',1)); // alias for _''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 115, col 89
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 115, col 89.
            write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def free(self, **KWS):



        ## CHEETAH: generated from @def free at line 119, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
xmds_free(_''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 121, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 121, col 12.
        write(u''');
_active_''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 122, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 122, col 9.
        write(u''' = _''')
        _v = VFFSL(SL,"id",True) # u'${id}' on line 122, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 122, col 18.
        write(u''' = NULL;
''')
        for aliasName in VFFSL(SL,"aliases",True): # generated from line 123, col 3
            write(u'''xmds_free(''')
            _v = VFFSL(SL,"aliasName",True) # u'$aliasName' on line 124, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$aliasName')) # from line 124, col 11.
            write(u'''); // alias for _''')
            _v = VFFSL(SL,"id",True) # u'${id}' on line 124, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 124, col 38.
            write(u'''
''')
            _v = VFFSL(SL,"aliasName",True) # u'${aliasName}' on line 125, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${aliasName}')) # from line 125, col 1.
            write(u''' = NULL;
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def findMaximum(self, variableName, basis=None, **KWS):



        ## CHEETAH: generated from @def findMaximum($variableName, $basis = None) at line 129, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''real ''')
        _v = VFFSL(SL,"variableName",True) # u'${variableName}' on line 130, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${variableName}')) # from line 130, col 6.
        write(u''' = 0.0;

''')
        if VFFSL(SL,"type",True) == 'real': # generated from line 132, col 3
            modFunction = 'abs'
        else: # generated from line 134, col 3
            modFunction = 'mod2'
        ## START CAPTURE REGION: _96124288 loopContents at line 137, col 3 in the source.
        _orig_trans_96124288 = trans
        _wasBuffering_96124288 = self._CHEETAH__isBuffering
        self._CHEETAH__isBuffering = True
        trans = _captureCollector_96124288 = DummyTransaction()
        write = _captureCollector_96124288.response().write
        write(u'''real _current_size = ''')
        _v = VFFSL(SL,"modFunction",True) # u'${modFunction}' on line 138, col 22
        if _v is not None: write(_filter(_v, rawExpr=u'${modFunction}')) # from line 138, col 22.
        write(u'''(_active_${vector.id}[${index}]);
if (_current_size > ''')
        _v = VFFSL(SL,"variableName",True) # u'$variableName' on line 139, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'$variableName')) # from line 139, col 21.
        write(u''') // UNVECTORISABLE
  ''')
        _v = VFFSL(SL,"variableName",True) # u'${variableName}' on line 140, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${variableName}')) # from line 140, col 3.
        write(u''' = _current_size;
''')
        trans = _orig_trans_96124288
        write = trans.response().write
        self._CHEETAH__isBuffering = _wasBuffering_96124288 
        loopContents = _captureCollector_96124288.response().getvalue()
        del _orig_trans_96124288
        del _captureCollector_96124288
        del _wasBuffering_96124288
        _v = VFFSL(SL,"loopOverVectorsWithInnerContentTemplate",False)([self], loopContents, basis = basis) # u'${loopOverVectorsWithInnerContentTemplate([self], loopContents, basis = basis)}' on line 142, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${loopOverVectorsWithInnerContentTemplate([self], loopContents, basis = basis)}')) # from line 142, col 1.
        if VFFSL(SL,"type",True) == 'complex': # generated from line 143, col 3
            _v = VFFSL(SL,"variableName",True) # u'${variableName}' on line 144, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'${variableName}')) # from line 144, col 1.
            write(u''' = sqrt(''')
            _v = VFFSL(SL,"variableName",True) # u'${variableName}' on line 144, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'${variableName}')) # from line 144, col 24.
            write(u'''); // Take the square root to find the modulus.
''')
        _v = VFFSL(SL,"insertCodeForFeatures",False)('findMax', ['Driver'], {'variable': ''.join([u'&',str(VFFSL(SL,"variableName",True))]), 'count': '1'}) # u"${insertCodeForFeatures('findMax', ['Driver'], {'variable': c'&${variableName}', 'count': '1'})}" on line 146, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"${insertCodeForFeatures('findMax', ['Driver'], {'variable': c'&${variableName}', 'count': '1'})}")) # from line 146, col 1.
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # VectorElement.tmpl
        # 
        # Created by Graham Dennis on 2007-08-28.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        write(u'''
''')
        # 
        #   Description of template
        write(u'''
''')
        # 
        #   Defines needed at the start of the simulation
        write(u'''
''')
        # 
        #   Globals needed at the start of the simulation
        write(u'''
''')
        # 
        #   Write the vector initialisation routine
        write(u'''

''')
        # 
        #   Initialise vector (called from segment 0)
        write(u'''
''')
        # 
        #   Allocate (and initialise active pointers) (called from main)
        write(u'''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_VectorElement= 'writeBody'

## END CLASS DEFINITION

if not hasattr(VectorElement, '_initCheetahAttributes'):
    templateAPIClass = getattr(VectorElement, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(VectorElement)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=VectorElement()).run()


