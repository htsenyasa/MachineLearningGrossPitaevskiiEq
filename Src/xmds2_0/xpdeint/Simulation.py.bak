#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xpdeint.ScriptElement import ScriptElement

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1484975072.616684
__CHEETAH_genTimestamp__ = 'Sat Jan 21 16:04:32 2017'
__CHEETAH_src__ = '/home/mattias/xmds-2.2.3/admin/staging/xmds-2.2.3/xpdeint/Simulation.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Nov 14 17:42:18 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Simulation(ScriptElement):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Simulation, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def logFunctionInnerContent(self, **KWS):



        ## CHEETAH: generated from @def logFunctionInnerContent at line 210, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        write(u'''if (logLevel & (_ERROR_LOG_LEVEL | _WARNING_LOG_LEVEL)) \\
    printf("%s:%i: ", __FILE__, __LINE__); \\
printf(__VA_ARGS__); \\
fflush(stdout); \\
''')
        # 
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Simulation.tmpl
        # 
        # Created by Graham Dennis on 2007-08-23.
        # 
        # Copyright (c) 2007-2012, Graham Dennis
        # 
        # This program is free software: you can redistribute it and/or modify
        # it under the terms of the GNU General Public License as published by
        # the Free Software Foundation, either version 2 of the License, or
        # (at your option) any later version.
        # 
        # This program is distributed in the hope that it will be useful,
        # but WITHOUT ANY WARRANTY; without even the implied warranty of
        # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        # GNU General Public License for more details.
        # 
        # You should have received a copy of the GNU General Public License
        # along with this program.  If not, see <http://www.gnu.org/licenses/>.
        # 
        # 
        # 
        # 
        #  First check we have at least Cheetah version 2.0.1
        if __CHEETAH_versionTuple__ < (2, 0, 1, 'final', 0): # generated from line 29, col 1
            raise AssertionError("xmds2 requires at least Cheetah version "
                               "2.0.1. You currently have %s." % __CHEETAH_version__)
        # 
        # 
        #  Base simulation template
        write(u'''// ********************************************************
// simulation logging

#define _SAMPLE_LOG_LEVEL             (1 << 0)
#define _SEGMENT_LOG_LEVEL            (1 << 1)
#define _PATH_LOG_LEVEL               (1 << 2)
#define _SIMULATION_LOG_LEVEL         (1 << 3)
#define _WARNING_LOG_LEVEL            (1 << 4)
#define _ERROR_LOG_LEVEL              (1 << 5)
#define _NO_ERROR_TERMINATE_LOG_LEVEL (1 << 6)
#define _ALL_LOG_LEVELS        _SAMPLE_LOG_LEVEL|_SEGMENT_LOG_LEVEL|_PATH_LOG_LEVEL|_SIMULATION_LOG_LEVEL|_WARNING_LOG_LEVEL|_ERROR_LOG_LEVEL|_NO_ERROR_TERMINATE_LOG_LEVEL
#define _LOG_LEVELS_BEING_LOGGED (''')
        _v = VFN(VFFSL(SL,"features",True)['Driver'],"logLevelsBeingLogged",True) # u"${features['Driver'].logLevelsBeingLogged}" on line 47, col 35
        if _v is not None: write(_filter(_v, rawExpr=u"${features['Driver'].logLevelsBeingLogged}")) # from line 47, col 35.
        write(u''')

#define real Re
#define imag Im

#include <complex>

#undef real
#undef imag


#include <stdio.h>

''')
        featureOrdering = ['Driver']
        write(u'''#define _LOG(logLevel, ...) \\
  do { \\
    if (logLevel & _LOG_LEVELS_BEING_LOGGED) { \\
''')
        dict = {'extraIndent': 0}
        write(u'''      ''')
        _v = VFFSL(SL,"insertCodeForFeatures",False)('logFunctionBegin', VFFSL(SL,"featureOrdering",True), VFFSL(SL,"dict",True)) # u"${insertCodeForFeatures('logFunctionBegin', $featureOrdering, $dict), autoIndent=True}" on line 65, col 7
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeatures('logFunctionBegin', $featureOrdering, $dict), autoIndent=True}")) # from line 65, col 7.
        extraIndent = dict['extraIndent']
        write(u'''      ''')
        _v = VFFSL(SL,"logFunctionInnerContent",True) # u'${logFunctionInnerContent, autoIndent=True, extraIndent=extraIndent}' on line 67, col 7
        if _v is not None: write(_filter(_v, autoIndent=True, extraIndent=extraIndent, rawExpr=u'${logFunctionInnerContent, autoIndent=True, extraIndent=extraIndent}')) # from line 67, col 7.
        write(u'''      ''')
        _v = VFFSL(SL,"insertCodeForFeaturesInReverseOrder",False)('logFunctionEnd', VFFSL(SL,"featureOrdering",True), VFFSL(SL,"dict",True)) # u"${insertCodeForFeaturesInReverseOrder('logFunctionEnd', $featureOrdering, $dict), autoIndent=True}" on line 68, col 7
        if _v is not None: write(_filter(_v, autoIndent=True, rawExpr=u"${insertCodeForFeaturesInReverseOrder('logFunctionEnd', $featureOrdering, $dict), autoIndent=True}")) # from line 68, col 7.
        write(u"""      if (logLevel & (_ERROR_LOG_LEVEL | _NO_ERROR_TERMINATE_LOG_LEVEL)) \\
        exit(logLevel == _ERROR_LOG_LEVEL); \\
    } \\
  } while (0)

// ********************************************************
// simulation includes

#include <xpdeint_platform.h>
#include <cmath>
#include <string>
#include <cstring>
#include <fstream>
#include <sstream>
#include <cstdlib>

#if CFG_OSAPI == CFG_OSAPI_POSIX // These are POSIX headers (i.e. non-windows)
  #include <sys/time.h>
#endif // POSIX

#ifdef __APPLE__
  #include <Availability.h>
  #if __MAC_OS_X_VERSION_MIN_REQUIRED >= 1080
    #define OS_OBJECT_USE_OBJC 0 // Don't make dispatch and xpc objects Objective-C objects.
    #include <IOKit/pwr_mgt/IOPMLib.h> // To disable user idle sleep on Mountain Lion
  #endif
#endif

#include <time.h>
#include <list>
#include <vector>
#include <algorithm>

""")
        for child in VFFSL(SL,"children",True): # generated from line 102, col 1
            #  Prevent writing zero-length defines
            result = VFN(VFFSL(SL,"child",True),"implementationsForFunctionName",False)('includes')
            if VFFSL(SL,"result",True) and not VFN(VFFSL(SL,"result",True),"isspace",False)(): # generated from line 105, col 3
                _v = VFFSL(SL,"result",True) # u'${result}' on line 106, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'${result}')) # from line 106, col 1.
                write(u'''
''')
        write(u'''
''')
        realType = {'single': 'float', 'double': 'double'}[VFFSL(SL,"precision",True)]
        write(u'''typedef long integer;
typedef ''')
        _v = VFFSL(SL,"realType",True) # u'${realType}' on line 113, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${realType}')) # from line 113, col 9.
        write(u""" real;
typedef std::complex<real> XMDSComplexType;

#include <xpdeint.h>

#define complex XMDSComplexType

const complex i(0.0, 1.0);

using namespace std;

#if CFG_COMPILER == CFG_COMPILER_ICC
  //
  // Disable ICC's warning: label was declared but never referenced
  //
  #pragma warning ( disable : 177 )
#endif

inline void *xmds_malloc(size_t size);

// ********************************************************
// DEFINES
// ********************************************************
""")
        #  only loop over the elements that implement the defines function
        for child in VFFSL(SL,"children",True): # generated from line 137, col 1
            #  Prevent writing zero-length defines
            result = VFN(VFFSL(SL,"child",True),"implementationsForFunctionName",False)('defines')
            if result and not result.isspace(): # generated from line 140, col 3
                write(u'''
// ********************************************************
//   ''')
                _v = VFFSL(SL,"child.description",True) # u'$child.description' on line 143, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'$child.description')) # from line 143, col 6.
                write(u''' defines
''')
                _v = VFFSL(SL,"result",True) # u'$result' on line 144, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$result')) # from line 144, col 1.
        write(u'''

// ********************************************************
// GLOBALS
// ********************************************************

''')
        #  only loop over the elements that implement the globals function
        for child in VFFSL(SL,"children",True): # generated from line 154, col 1
            #  Prevent writing zero-length globals
            result = VFN(VFFSL(SL,"child",True),"implementationsForFunctionName",False)('globals')
            if result and not result.isspace(): # generated from line 157, col 3
                write(u'''
// ********************************************************
//   ''')
                _v = VFFSL(SL,"child.description",True) # u'$child.description' on line 160, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'$child.description')) # from line 160, col 6.
                write(u''' globals
''')
                _v = VFFSL(SL,"result",True) # u'$result' on line 161, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$result')) # from line 161, col 1.
        write(u'''

// ********************************************************
// FUNCTION PROTOTYPES
// ********************************************************
''')
        #  only loop over the elements that implement the prototypes function
        for child in VFFSL(SL,"children",True): # generated from line 170, col 1
            #  Prevent writing zero-length globals
            result = VFN(VFFSL(SL,"child",True),"implementationsForFunctionName",False)('functionPrototypes')
            if result and not result.isspace(): # generated from line 173, col 3
                write(u'''
// ********************************************************
//   ''')
                _v = VFFSL(SL,"child.description",True) # u'$child.description' on line 176, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'$child.description')) # from line 176, col 6.
                write(u''' function prototypes
''')
                _v = VFFSL(SL,"result",True) # u'$result' on line 177, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$result')) # from line 177, col 1.
        write(u'''
// ********************************************************
// MAIN ROUTINE
// ********************************************************
''')
        _v = VFFSL(SL,"features.Driver.mainRoutine",True) # u'$features.Driver.mainRoutine' on line 184, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$features.Driver.mainRoutine')) # from line 184, col 1.
        write(u'''
// ********************************************************
// FUNCTION IMPLEMENTATIONS
// ********************************************************

inline void *xmds_malloc(size_t size)
{
  void *retPointer = _xmds_malloc(size);
  if ( !retPointer )
    _LOG(_ERROR_LOG_LEVEL, "ERROR: Couldn\'t allocate %zu bytes of memory!", size);
  return retPointer;
}

''')
        #  only loop over the elements that implement the prototypes function
        for child in VFFSL(SL,"children",True): # generated from line 199, col 1
            #  Prevent writing zero-length function implementations
            result = VFN(VFFSL(SL,"child",True),"implementationsForFunctionName",False)('functionImplementations')
            if result and not result.isspace(): # generated from line 202, col 3
                write(u'''
// ********************************************************
//   ''')
                _v = VFFSL(SL,"child.description",True) # u'$child.description' on line 205, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'$child.description')) # from line 205, col 6.
                write(u''' function implementations
''')
                _v = VFFSL(SL,"result",True) # u'$result' on line 206, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$result')) # from line 206, col 1.
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    name = ''

    id = ''

    _mainCheetahMethod_for_Simulation= 'writeBody'

## END CLASS DEFINITION

if not hasattr(Simulation, '_initCheetahAttributes'):
    templateAPIClass = getattr(Simulation, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Simulation)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Simulation()).run()


