Conda downloaded.
Virtual environment is created with conda (nonlinarSE).
Pytorch is installed to virtual environment.
Pytorch/MNIST digit example is tested in VE. (0.98/1 Accuracy)
http://cs231n.github.io/convolutional-networks/ (read)


To feed our neural network we are going to manipulate datasets.MNIST class.

It automatically downloads the files and converts it to proper format and keeps it
internally in train_loader.datasets.train_data attribute.
This is a [60000, 28, 28] Tensor.

We can easily manipulate these data by a simple assignment. For instance,

in sampletrainloader.py file, there is a "read" function which reads MNIST data and converts
it to 28x28 multidim array. This function can be used with the following way

#From pytorch2.py file

data = list(rm.read()) #list involves all 60000 example.
pixels = np.zeros([60000, 28, 28])
labels = np.zeros([60000, 1])

#for i in range(len(data)):
#    pixels[i], labels[i] = data[i]


pixel_tensor = torch.from_numpy(pixels)
label_tensor = torch.from_numpy(labels)

here we seperated all pixels and labels in different arrays and converted them into Tensors.
(These arrays pixel_tensor and label_tensor represents our nonlinearSE data.)
After that all we need to is an assignment.

train_loader.dataset.train_data = pixel_tensor
train_loader.train_data = pixel_tensor


(NOTE: The method used in pytorch2.py to read MNIST data must be optimized because it holds all
data in RAM..)


Next thing to do must be creating an dataset class that is inherited from pytorch "dataset class",
documentations says that, __getitem__ and __len__ methods are only requierments.
